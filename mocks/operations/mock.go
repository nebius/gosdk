// Code generated by MockGen. DO NOT EDIT.
// Source: operations/operation.go
//
// Generated by this command:
//
//	mockgen -source operations/operation.go -package operations -typed
//

// Package operations is a generated GoMock package.
package operations

import (
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	status "google.golang.org/grpc/status"
	proto "google.golang.org/protobuf/proto"
)

// MockOperation is a mock of Operation interface.
type MockOperation struct {
	ctrl     *gomock.Controller
	recorder *MockOperationMockRecorder
}

// MockOperationMockRecorder is the mock recorder for MockOperation.
type MockOperationMockRecorder struct {
	mock *MockOperation
}

// NewMockOperation creates a new mock instance.
func NewMockOperation(ctrl *gomock.Controller) *MockOperation {
	mock := &MockOperation{ctrl: ctrl}
	mock.recorder = &MockOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperation) EXPECT() *MockOperationMockRecorder {
	return m.recorder
}

// CreatedAt mocks base method.
func (m *MockOperation) CreatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt.
func (mr *MockOperationMockRecorder) CreatedAt() *MockOperationCreatedAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockOperation)(nil).CreatedAt))
	return &MockOperationCreatedAtCall{Call: call}
}

// MockOperationCreatedAtCall wrap *gomock.Call
type MockOperationCreatedAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationCreatedAtCall) Return(arg0 time.Time) *MockOperationCreatedAtCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationCreatedAtCall) Do(f func() time.Time) *MockOperationCreatedAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationCreatedAtCall) DoAndReturn(f func() time.Time) *MockOperationCreatedAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatedBy mocks base method.
func (m *MockOperation) CreatedBy() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatedBy")
	ret0, _ := ret[0].(string)
	return ret0
}

// CreatedBy indicates an expected call of CreatedBy.
func (mr *MockOperationMockRecorder) CreatedBy() *MockOperationCreatedByCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedBy", reflect.TypeOf((*MockOperation)(nil).CreatedBy))
	return &MockOperationCreatedByCall{Call: call}
}

// MockOperationCreatedByCall wrap *gomock.Call
type MockOperationCreatedByCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationCreatedByCall) Return(arg0 string) *MockOperationCreatedByCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationCreatedByCall) Do(f func() string) *MockOperationCreatedByCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationCreatedByCall) DoAndReturn(f func() string) *MockOperationCreatedByCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Description mocks base method.
func (m *MockOperation) Description() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Description")
	ret0, _ := ret[0].(string)
	return ret0
}

// Description indicates an expected call of Description.
func (mr *MockOperationMockRecorder) Description() *MockOperationDescriptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Description", reflect.TypeOf((*MockOperation)(nil).Description))
	return &MockOperationDescriptionCall{Call: call}
}

// MockOperationDescriptionCall wrap *gomock.Call
type MockOperationDescriptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationDescriptionCall) Return(arg0 string) *MockOperationDescriptionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationDescriptionCall) Do(f func() string) *MockOperationDescriptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationDescriptionCall) DoAndReturn(f func() string) *MockOperationDescriptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Done mocks base method.
func (m *MockOperation) Done() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockOperationMockRecorder) Done() *MockOperationDoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockOperation)(nil).Done))
	return &MockOperationDoneCall{Call: call}
}

// MockOperationDoneCall wrap *gomock.Call
type MockOperationDoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationDoneCall) Return(arg0 bool) *MockOperationDoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationDoneCall) Do(f func() bool) *MockOperationDoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationDoneCall) DoAndReturn(f func() bool) *MockOperationDoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FinishedAt mocks base method.
func (m *MockOperation) FinishedAt() *time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishedAt")
	ret0, _ := ret[0].(*time.Time)
	return ret0
}

// FinishedAt indicates an expected call of FinishedAt.
func (mr *MockOperationMockRecorder) FinishedAt() *MockOperationFinishedAtCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishedAt", reflect.TypeOf((*MockOperation)(nil).FinishedAt))
	return &MockOperationFinishedAtCall{Call: call}
}

// MockOperationFinishedAtCall wrap *gomock.Call
type MockOperationFinishedAtCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationFinishedAtCall) Return(arg0 *time.Time) *MockOperationFinishedAtCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationFinishedAtCall) Do(f func() *time.Time) *MockOperationFinishedAtCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationFinishedAtCall) DoAndReturn(f func() *time.Time) *MockOperationFinishedAtCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ID mocks base method.
func (m *MockOperation) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockOperationMockRecorder) ID() *MockOperationIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockOperation)(nil).ID))
	return &MockOperationIDCall{Call: call}
}

// MockOperationIDCall wrap *gomock.Call
type MockOperationIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationIDCall) Return(arg0 string) *MockOperationIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationIDCall) Do(f func() string) *MockOperationIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationIDCall) DoAndReturn(f func() string) *MockOperationIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Poll mocks base method.
func (m *MockOperation) Poll(arg0 context.Context, arg1 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Poll", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Poll indicates an expected call of Poll.
func (mr *MockOperationMockRecorder) Poll(arg0 any, arg1 ...any) *MockOperationPollCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockOperation)(nil).Poll), varargs...)
	return &MockOperationPollCall{Call: call}
}

// MockOperationPollCall wrap *gomock.Call
type MockOperationPollCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationPollCall) Return(arg0 operations.Operation, arg1 error) *MockOperationPollCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationPollCall) Do(f func(context.Context, ...grpc.CallOption) (operations.Operation, error)) *MockOperationPollCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationPollCall) DoAndReturn(f func(context.Context, ...grpc.CallOption) (operations.Operation, error)) *MockOperationPollCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProgressData mocks base method.
func (m *MockOperation) ProgressData() proto.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProgressData")
	ret0, _ := ret[0].(proto.Message)
	return ret0
}

// ProgressData indicates an expected call of ProgressData.
func (mr *MockOperationMockRecorder) ProgressData() *MockOperationProgressDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProgressData", reflect.TypeOf((*MockOperation)(nil).ProgressData))
	return &MockOperationProgressDataCall{Call: call}
}

// MockOperationProgressDataCall wrap *gomock.Call
type MockOperationProgressDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationProgressDataCall) Return(arg0 proto.Message) *MockOperationProgressDataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationProgressDataCall) Do(f func() proto.Message) *MockOperationProgressDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationProgressDataCall) DoAndReturn(f func() proto.Message) *MockOperationProgressDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Raw mocks base method.
func (m *MockOperation) Raw() *v1.Operation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw")
	ret0, _ := ret[0].(*v1.Operation)
	return ret0
}

// Raw indicates an expected call of Raw.
func (mr *MockOperationMockRecorder) Raw() *MockOperationRawCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockOperation)(nil).Raw))
	return &MockOperationRawCall{Call: call}
}

// MockOperationRawCall wrap *gomock.Call
type MockOperationRawCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationRawCall) Return(arg0 *v1.Operation) *MockOperationRawCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationRawCall) Do(f func() *v1.Operation) *MockOperationRawCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationRawCall) DoAndReturn(f func() *v1.Operation) *MockOperationRawCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Request mocks base method.
func (m *MockOperation) Request() proto.Message {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request")
	ret0, _ := ret[0].(proto.Message)
	return ret0
}

// Request indicates an expected call of Request.
func (mr *MockOperationMockRecorder) Request() *MockOperationRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockOperation)(nil).Request))
	return &MockOperationRequestCall{Call: call}
}

// MockOperationRequestCall wrap *gomock.Call
type MockOperationRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationRequestCall) Return(arg0 proto.Message) *MockOperationRequestCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationRequestCall) Do(f func() proto.Message) *MockOperationRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationRequestCall) DoAndReturn(f func() proto.Message) *MockOperationRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RequestHeaders mocks base method.
func (m *MockOperation) RequestHeaders() http.Header {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestHeaders")
	ret0, _ := ret[0].(http.Header)
	return ret0
}

// RequestHeaders indicates an expected call of RequestHeaders.
func (mr *MockOperationMockRecorder) RequestHeaders() *MockOperationRequestHeadersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestHeaders", reflect.TypeOf((*MockOperation)(nil).RequestHeaders))
	return &MockOperationRequestHeadersCall{Call: call}
}

// MockOperationRequestHeadersCall wrap *gomock.Call
type MockOperationRequestHeadersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationRequestHeadersCall) Return(arg0 http.Header) *MockOperationRequestHeadersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationRequestHeadersCall) Do(f func() http.Header) *MockOperationRequestHeadersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationRequestHeadersCall) DoAndReturn(f func() http.Header) *MockOperationRequestHeadersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResourceID mocks base method.
func (m *MockOperation) ResourceID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResourceID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ResourceID indicates an expected call of ResourceID.
func (mr *MockOperationMockRecorder) ResourceID() *MockOperationResourceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResourceID", reflect.TypeOf((*MockOperation)(nil).ResourceID))
	return &MockOperationResourceIDCall{Call: call}
}

// MockOperationResourceIDCall wrap *gomock.Call
type MockOperationResourceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationResourceIDCall) Return(arg0 string) *MockOperationResourceIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationResourceIDCall) Do(f func() string) *MockOperationResourceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationResourceIDCall) DoAndReturn(f func() string) *MockOperationResourceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Status mocks base method.
func (m *MockOperation) Status() *status.Status {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(*status.Status)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockOperationMockRecorder) Status() *MockOperationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockOperation)(nil).Status))
	return &MockOperationStatusCall{Call: call}
}

// MockOperationStatusCall wrap *gomock.Call
type MockOperationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationStatusCall) Return(arg0 *status.Status) *MockOperationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationStatusCall) Do(f func() *status.Status) *MockOperationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationStatusCall) DoAndReturn(f func() *status.Status) *MockOperationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Successful mocks base method.
func (m *MockOperation) Successful() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Successful")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Successful indicates an expected call of Successful.
func (mr *MockOperationMockRecorder) Successful() *MockOperationSuccessfulCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Successful", reflect.TypeOf((*MockOperation)(nil).Successful))
	return &MockOperationSuccessfulCall{Call: call}
}

// MockOperationSuccessfulCall wrap *gomock.Call
type MockOperationSuccessfulCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationSuccessfulCall) Return(arg0 bool) *MockOperationSuccessfulCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationSuccessfulCall) Do(f func() bool) *MockOperationSuccessfulCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationSuccessfulCall) DoAndReturn(f func() bool) *MockOperationSuccessfulCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Wait mocks base method.
func (m *MockOperation) Wait(arg0 context.Context, arg1 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Wait", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Wait indicates an expected call of Wait.
func (mr *MockOperationMockRecorder) Wait(arg0 any, arg1 ...any) *MockOperationWaitCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockOperation)(nil).Wait), varargs...)
	return &MockOperationWaitCall{Call: call}
}

// MockOperationWaitCall wrap *gomock.Call
type MockOperationWaitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOperationWaitCall) Return(arg0 operations.Operation, arg1 error) *MockOperationWaitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOperationWaitCall) Do(f func(context.Context, ...grpc.CallOption) (operations.Operation, error)) *MockOperationWaitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOperationWaitCall) DoAndReturn(f func(context.Context, ...grpc.CallOption) (operations.Operation, error)) *MockOperationWaitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
