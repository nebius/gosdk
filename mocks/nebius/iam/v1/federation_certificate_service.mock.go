// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/iam/v1/federation_certificate_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/iam/v1/federation_certificate_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/iam/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFederationCertificateService is a mock of FederationCertificateService interface.
type MockFederationCertificateService struct {
	ctrl     *gomock.Controller
	recorder *MockFederationCertificateServiceMockRecorder
}

// MockFederationCertificateServiceMockRecorder is the mock recorder for MockFederationCertificateService.
type MockFederationCertificateServiceMockRecorder struct {
	mock *MockFederationCertificateService
}

// NewMockFederationCertificateService creates a new mock instance.
func NewMockFederationCertificateService(ctrl *gomock.Controller) *MockFederationCertificateService {
	mock := &MockFederationCertificateService{ctrl: ctrl}
	mock.recorder = &MockFederationCertificateServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFederationCertificateService) EXPECT() *MockFederationCertificateServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFederationCertificateService) Create(arg0 context.Context, arg1 *v10.CreateFederationCertificateRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFederationCertificateServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockFederationCertificateServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFederationCertificateService)(nil).Create), varargs...)
	return &MockFederationCertificateServiceCreateCall{Call: call}
}

// MockFederationCertificateServiceCreateCall wrap *gomock.Call
type MockFederationCertificateServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederationCertificateServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockFederationCertificateServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederationCertificateServiceCreateCall) Do(f func(context.Context, *v10.CreateFederationCertificateRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederationCertificateServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederationCertificateServiceCreateCall) DoAndReturn(f func(context.Context, *v10.CreateFederationCertificateRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederationCertificateServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockFederationCertificateService) Delete(arg0 context.Context, arg1 *v10.DeleteFederationCertificateRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFederationCertificateServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockFederationCertificateServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFederationCertificateService)(nil).Delete), varargs...)
	return &MockFederationCertificateServiceDeleteCall{Call: call}
}

// MockFederationCertificateServiceDeleteCall wrap *gomock.Call
type MockFederationCertificateServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederationCertificateServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockFederationCertificateServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederationCertificateServiceDeleteCall) Do(f func(context.Context, *v10.DeleteFederationCertificateRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederationCertificateServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederationCertificateServiceDeleteCall) DoAndReturn(f func(context.Context, *v10.DeleteFederationCertificateRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederationCertificateServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockFederationCertificateService) Get(arg0 context.Context, arg1 *v10.GetFederationCertificateRequest, arg2 ...grpc.CallOption) (*v10.FederationCertificate, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.FederationCertificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFederationCertificateServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockFederationCertificateServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFederationCertificateService)(nil).Get), varargs...)
	return &MockFederationCertificateServiceGetCall{Call: call}
}

// MockFederationCertificateServiceGetCall wrap *gomock.Call
type MockFederationCertificateServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederationCertificateServiceGetCall) Return(arg0 *v10.FederationCertificate, arg1 error) *MockFederationCertificateServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederationCertificateServiceGetCall) Do(f func(context.Context, *v10.GetFederationCertificateRequest, ...grpc.CallOption) (*v10.FederationCertificate, error)) *MockFederationCertificateServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederationCertificateServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetFederationCertificateRequest, ...grpc.CallOption) (*v10.FederationCertificate, error)) *MockFederationCertificateServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockFederationCertificateService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockFederationCertificateServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockFederationCertificateServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockFederationCertificateService)(nil).GetOperation), varargs...)
	return &MockFederationCertificateServiceGetOperationCall{Call: call}
}

// MockFederationCertificateServiceGetOperationCall wrap *gomock.Call
type MockFederationCertificateServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederationCertificateServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockFederationCertificateServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederationCertificateServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederationCertificateServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederationCertificateServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederationCertificateServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListByFederation mocks base method.
func (m *MockFederationCertificateService) ListByFederation(arg0 context.Context, arg1 *v10.ListFederationCertificateByFederationRequest, arg2 ...grpc.CallOption) (*v10.ListFederationCertificateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListByFederation", varargs...)
	ret0, _ := ret[0].(*v10.ListFederationCertificateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByFederation indicates an expected call of ListByFederation.
func (mr *MockFederationCertificateServiceMockRecorder) ListByFederation(arg0, arg1 any, arg2 ...any) *MockFederationCertificateServiceListByFederationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByFederation", reflect.TypeOf((*MockFederationCertificateService)(nil).ListByFederation), varargs...)
	return &MockFederationCertificateServiceListByFederationCall{Call: call}
}

// MockFederationCertificateServiceListByFederationCall wrap *gomock.Call
type MockFederationCertificateServiceListByFederationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederationCertificateServiceListByFederationCall) Return(arg0 *v10.ListFederationCertificateResponse, arg1 error) *MockFederationCertificateServiceListByFederationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederationCertificateServiceListByFederationCall) Do(f func(context.Context, *v10.ListFederationCertificateByFederationRequest, ...grpc.CallOption) (*v10.ListFederationCertificateResponse, error)) *MockFederationCertificateServiceListByFederationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederationCertificateServiceListByFederationCall) DoAndReturn(f func(context.Context, *v10.ListFederationCertificateByFederationRequest, ...grpc.CallOption) (*v10.ListFederationCertificateResponse, error)) *MockFederationCertificateServiceListByFederationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockFederationCertificateService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockFederationCertificateServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockFederationCertificateServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockFederationCertificateService)(nil).ListOperations), varargs...)
	return &MockFederationCertificateServiceListOperationsCall{Call: call}
}

// MockFederationCertificateServiceListOperationsCall wrap *gomock.Call
type MockFederationCertificateServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederationCertificateServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockFederationCertificateServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederationCertificateServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockFederationCertificateServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederationCertificateServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockFederationCertificateServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockFederationCertificateService) Update(arg0 context.Context, arg1 *v10.UpdateFederationCertificateRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFederationCertificateServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockFederationCertificateServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFederationCertificateService)(nil).Update), varargs...)
	return &MockFederationCertificateServiceUpdateCall{Call: call}
}

// MockFederationCertificateServiceUpdateCall wrap *gomock.Call
type MockFederationCertificateServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederationCertificateServiceUpdateCall) Return(arg0 operations.Operation, arg1 error) *MockFederationCertificateServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederationCertificateServiceUpdateCall) Do(f func(context.Context, *v10.UpdateFederationCertificateRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederationCertificateServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederationCertificateServiceUpdateCall) DoAndReturn(f func(context.Context, *v10.UpdateFederationCertificateRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederationCertificateServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
