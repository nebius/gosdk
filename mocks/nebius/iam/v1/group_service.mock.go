// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/iam/v1/group_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/iam/v1/group_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	v1 "github.com/nebius/gosdk/proto/nebius/iam/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockGroupService is a mock of GroupService interface.
type MockGroupService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupServiceMockRecorder
}

// MockGroupServiceMockRecorder is the mock recorder for MockGroupService.
type MockGroupServiceMockRecorder struct {
	mock *MockGroupService
}

// NewMockGroupService creates a new mock instance.
func NewMockGroupService(ctrl *gomock.Controller) *MockGroupService {
	mock := &MockGroupService{ctrl: ctrl}
	mock.recorder = &MockGroupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupService) EXPECT() *MockGroupServiceMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockGroupService) Filter(arg0 context.Context, arg1 *v1.ListGroupsRequest, arg2 ...grpc.CallOption) iter.Seq2[*v1.Group, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v1.Group, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockGroupServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockGroupServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockGroupService)(nil).Filter), varargs...)
	return &MockGroupServiceFilterCall{Call: call}
}

// MockGroupServiceFilterCall wrap *gomock.Call
type MockGroupServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupServiceFilterCall) Return(arg0 iter.Seq2[*v1.Group, error]) *MockGroupServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupServiceFilterCall) Do(f func(context.Context, *v1.ListGroupsRequest, ...grpc.CallOption) iter.Seq2[*v1.Group, error]) *MockGroupServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupServiceFilterCall) DoAndReturn(f func(context.Context, *v1.ListGroupsRequest, ...grpc.CallOption) iter.Seq2[*v1.Group, error]) *MockGroupServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockGroupService) Get(arg0 context.Context, arg1 *v1.GetGroupRequest, arg2 ...grpc.CallOption) (*v1.Group, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGroupServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockGroupServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGroupService)(nil).Get), varargs...)
	return &MockGroupServiceGetCall{Call: call}
}

// MockGroupServiceGetCall wrap *gomock.Call
type MockGroupServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupServiceGetCall) Return(arg0 *v1.Group, arg1 error) *MockGroupServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupServiceGetCall) Do(f func(context.Context, *v1.GetGroupRequest, ...grpc.CallOption) (*v1.Group, error)) *MockGroupServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupServiceGetCall) DoAndReturn(f func(context.Context, *v1.GetGroupRequest, ...grpc.CallOption) (*v1.Group, error)) *MockGroupServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockGroupService) GetByName(arg0 context.Context, arg1 *v1.GetGroupByNameRequest, arg2 ...grpc.CallOption) (*v1.Group, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v1.Group)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockGroupServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockGroupServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockGroupService)(nil).GetByName), varargs...)
	return &MockGroupServiceGetByNameCall{Call: call}
}

// MockGroupServiceGetByNameCall wrap *gomock.Call
type MockGroupServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupServiceGetByNameCall) Return(arg0 *v1.Group, arg1 error) *MockGroupServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupServiceGetByNameCall) Do(f func(context.Context, *v1.GetGroupByNameRequest, ...grpc.CallOption) (*v1.Group, error)) *MockGroupServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupServiceGetByNameCall) DoAndReturn(f func(context.Context, *v1.GetGroupByNameRequest, ...grpc.CallOption) (*v1.Group, error)) *MockGroupServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockGroupService) List(arg0 context.Context, arg1 *v1.ListGroupsRequest, arg2 ...grpc.CallOption) (*v1.ListGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1.ListGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockGroupServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockGroupServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGroupService)(nil).List), varargs...)
	return &MockGroupServiceListCall{Call: call}
}

// MockGroupServiceListCall wrap *gomock.Call
type MockGroupServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupServiceListCall) Return(arg0 *v1.ListGroupsResponse, arg1 error) *MockGroupServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupServiceListCall) Do(f func(context.Context, *v1.ListGroupsRequest, ...grpc.CallOption) (*v1.ListGroupsResponse, error)) *MockGroupServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupServiceListCall) DoAndReturn(f func(context.Context, *v1.ListGroupsRequest, ...grpc.CallOption) (*v1.ListGroupsResponse, error)) *MockGroupServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
