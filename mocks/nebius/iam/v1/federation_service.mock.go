// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/iam/v1/federation_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/iam/v1/federation_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/iam/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFederationService is a mock of FederationService interface.
type MockFederationService struct {
	ctrl     *gomock.Controller
	recorder *MockFederationServiceMockRecorder
}

// MockFederationServiceMockRecorder is the mock recorder for MockFederationService.
type MockFederationServiceMockRecorder struct {
	mock *MockFederationService
}

// NewMockFederationService creates a new mock instance.
func NewMockFederationService(ctrl *gomock.Controller) *MockFederationService {
	mock := &MockFederationService{ctrl: ctrl}
	mock.recorder = &MockFederationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFederationService) EXPECT() *MockFederationServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFederationService) Create(arg0 context.Context, arg1 *v10.CreateFederationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFederationServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockFederationServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFederationService)(nil).Create), varargs...)
	return &MockFederationServiceCreateCall{Call: call}
}

// MockFederationServiceCreateCall wrap *gomock.Call
type MockFederationServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederationServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockFederationServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederationServiceCreateCall) Do(f func(context.Context, *v10.CreateFederationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederationServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederationServiceCreateCall) DoAndReturn(f func(context.Context, *v10.CreateFederationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederationServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockFederationService) Delete(arg0 context.Context, arg1 *v10.DeleteFederationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFederationServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockFederationServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFederationService)(nil).Delete), varargs...)
	return &MockFederationServiceDeleteCall{Call: call}
}

// MockFederationServiceDeleteCall wrap *gomock.Call
type MockFederationServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederationServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockFederationServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederationServiceDeleteCall) Do(f func(context.Context, *v10.DeleteFederationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederationServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederationServiceDeleteCall) DoAndReturn(f func(context.Context, *v10.DeleteFederationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederationServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockFederationService) Filter(arg0 context.Context, arg1 *v10.ListFederationsRequest, arg2 ...grpc.CallOption) iter.Seq2[*v10.Federation, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v10.Federation, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockFederationServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockFederationServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockFederationService)(nil).Filter), varargs...)
	return &MockFederationServiceFilterCall{Call: call}
}

// MockFederationServiceFilterCall wrap *gomock.Call
type MockFederationServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederationServiceFilterCall) Return(arg0 iter.Seq2[*v10.Federation, error]) *MockFederationServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederationServiceFilterCall) Do(f func(context.Context, *v10.ListFederationsRequest, ...grpc.CallOption) iter.Seq2[*v10.Federation, error]) *MockFederationServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederationServiceFilterCall) DoAndReturn(f func(context.Context, *v10.ListFederationsRequest, ...grpc.CallOption) iter.Seq2[*v10.Federation, error]) *MockFederationServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockFederationService) Get(arg0 context.Context, arg1 *v10.GetFederationRequest, arg2 ...grpc.CallOption) (*v10.Federation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.Federation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFederationServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockFederationServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFederationService)(nil).Get), varargs...)
	return &MockFederationServiceGetCall{Call: call}
}

// MockFederationServiceGetCall wrap *gomock.Call
type MockFederationServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederationServiceGetCall) Return(arg0 *v10.Federation, arg1 error) *MockFederationServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederationServiceGetCall) Do(f func(context.Context, *v10.GetFederationRequest, ...grpc.CallOption) (*v10.Federation, error)) *MockFederationServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederationServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetFederationRequest, ...grpc.CallOption) (*v10.Federation, error)) *MockFederationServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockFederationService) GetByName(arg0 context.Context, arg1 *v1.GetByNameRequest, arg2 ...grpc.CallOption) (*v10.Federation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v10.Federation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockFederationServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockFederationServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockFederationService)(nil).GetByName), varargs...)
	return &MockFederationServiceGetByNameCall{Call: call}
}

// MockFederationServiceGetByNameCall wrap *gomock.Call
type MockFederationServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederationServiceGetByNameCall) Return(arg0 *v10.Federation, arg1 error) *MockFederationServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederationServiceGetByNameCall) Do(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v10.Federation, error)) *MockFederationServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederationServiceGetByNameCall) DoAndReturn(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v10.Federation, error)) *MockFederationServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockFederationService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockFederationServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockFederationServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockFederationService)(nil).GetOperation), varargs...)
	return &MockFederationServiceGetOperationCall{Call: call}
}

// MockFederationServiceGetOperationCall wrap *gomock.Call
type MockFederationServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederationServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockFederationServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederationServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederationServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederationServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederationServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockFederationService) List(arg0 context.Context, arg1 *v10.ListFederationsRequest, arg2 ...grpc.CallOption) (*v10.ListFederationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v10.ListFederationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockFederationServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockFederationServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFederationService)(nil).List), varargs...)
	return &MockFederationServiceListCall{Call: call}
}

// MockFederationServiceListCall wrap *gomock.Call
type MockFederationServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederationServiceListCall) Return(arg0 *v10.ListFederationsResponse, arg1 error) *MockFederationServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederationServiceListCall) Do(f func(context.Context, *v10.ListFederationsRequest, ...grpc.CallOption) (*v10.ListFederationsResponse, error)) *MockFederationServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederationServiceListCall) DoAndReturn(f func(context.Context, *v10.ListFederationsRequest, ...grpc.CallOption) (*v10.ListFederationsResponse, error)) *MockFederationServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockFederationService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockFederationServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockFederationServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockFederationService)(nil).ListOperations), varargs...)
	return &MockFederationServiceListOperationsCall{Call: call}
}

// MockFederationServiceListOperationsCall wrap *gomock.Call
type MockFederationServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederationServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockFederationServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederationServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockFederationServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederationServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockFederationServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockFederationService) Update(arg0 context.Context, arg1 *v10.UpdateFederationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFederationServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockFederationServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFederationService)(nil).Update), varargs...)
	return &MockFederationServiceUpdateCall{Call: call}
}

// MockFederationServiceUpdateCall wrap *gomock.Call
type MockFederationServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederationServiceUpdateCall) Return(arg0 operations.Operation, arg1 error) *MockFederationServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederationServiceUpdateCall) Do(f func(context.Context, *v10.UpdateFederationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederationServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederationServiceUpdateCall) DoAndReturn(f func(context.Context, *v10.UpdateFederationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederationServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
