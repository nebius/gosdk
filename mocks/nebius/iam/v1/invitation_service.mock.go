// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/iam/v1/invitation_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/iam/v1/invitation_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/iam/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockInvitationService is a mock of InvitationService interface.
type MockInvitationService struct {
	ctrl     *gomock.Controller
	recorder *MockInvitationServiceMockRecorder
}

// MockInvitationServiceMockRecorder is the mock recorder for MockInvitationService.
type MockInvitationServiceMockRecorder struct {
	mock *MockInvitationService
}

// NewMockInvitationService creates a new mock instance.
func NewMockInvitationService(ctrl *gomock.Controller) *MockInvitationService {
	mock := &MockInvitationService{ctrl: ctrl}
	mock.recorder = &MockInvitationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvitationService) EXPECT() *MockInvitationServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInvitationService) Create(arg0 context.Context, arg1 *v10.CreateInvitationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInvitationServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockInvitationServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInvitationService)(nil).Create), varargs...)
	return &MockInvitationServiceCreateCall{Call: call}
}

// MockInvitationServiceCreateCall wrap *gomock.Call
type MockInvitationServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInvitationServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockInvitationServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInvitationServiceCreateCall) Do(f func(context.Context, *v10.CreateInvitationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockInvitationServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInvitationServiceCreateCall) DoAndReturn(f func(context.Context, *v10.CreateInvitationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockInvitationServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockInvitationService) Delete(arg0 context.Context, arg1 *v10.DeleteInvitationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockInvitationServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockInvitationServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInvitationService)(nil).Delete), varargs...)
	return &MockInvitationServiceDeleteCall{Call: call}
}

// MockInvitationServiceDeleteCall wrap *gomock.Call
type MockInvitationServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInvitationServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockInvitationServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInvitationServiceDeleteCall) Do(f func(context.Context, *v10.DeleteInvitationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockInvitationServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInvitationServiceDeleteCall) DoAndReturn(f func(context.Context, *v10.DeleteInvitationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockInvitationServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockInvitationService) Filter(arg0 context.Context, arg1 *v10.ListInvitationsRequest, arg2 ...grpc.CallOption) iter.Seq2[*v10.Invitation, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v10.Invitation, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockInvitationServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockInvitationServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockInvitationService)(nil).Filter), varargs...)
	return &MockInvitationServiceFilterCall{Call: call}
}

// MockInvitationServiceFilterCall wrap *gomock.Call
type MockInvitationServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInvitationServiceFilterCall) Return(arg0 iter.Seq2[*v10.Invitation, error]) *MockInvitationServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInvitationServiceFilterCall) Do(f func(context.Context, *v10.ListInvitationsRequest, ...grpc.CallOption) iter.Seq2[*v10.Invitation, error]) *MockInvitationServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInvitationServiceFilterCall) DoAndReturn(f func(context.Context, *v10.ListInvitationsRequest, ...grpc.CallOption) iter.Seq2[*v10.Invitation, error]) *MockInvitationServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockInvitationService) Get(arg0 context.Context, arg1 *v10.GetInvitationRequest, arg2 ...grpc.CallOption) (*v10.Invitation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.Invitation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInvitationServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockInvitationServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInvitationService)(nil).Get), varargs...)
	return &MockInvitationServiceGetCall{Call: call}
}

// MockInvitationServiceGetCall wrap *gomock.Call
type MockInvitationServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInvitationServiceGetCall) Return(arg0 *v10.Invitation, arg1 error) *MockInvitationServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInvitationServiceGetCall) Do(f func(context.Context, *v10.GetInvitationRequest, ...grpc.CallOption) (*v10.Invitation, error)) *MockInvitationServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInvitationServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetInvitationRequest, ...grpc.CallOption) (*v10.Invitation, error)) *MockInvitationServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockInvitationService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockInvitationServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockInvitationServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockInvitationService)(nil).GetOperation), varargs...)
	return &MockInvitationServiceGetOperationCall{Call: call}
}

// MockInvitationServiceGetOperationCall wrap *gomock.Call
type MockInvitationServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInvitationServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockInvitationServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInvitationServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockInvitationServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInvitationServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockInvitationServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockInvitationService) List(arg0 context.Context, arg1 *v10.ListInvitationsRequest, arg2 ...grpc.CallOption) (*v10.ListInvitationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v10.ListInvitationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockInvitationServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockInvitationServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInvitationService)(nil).List), varargs...)
	return &MockInvitationServiceListCall{Call: call}
}

// MockInvitationServiceListCall wrap *gomock.Call
type MockInvitationServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInvitationServiceListCall) Return(arg0 *v10.ListInvitationsResponse, arg1 error) *MockInvitationServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInvitationServiceListCall) Do(f func(context.Context, *v10.ListInvitationsRequest, ...grpc.CallOption) (*v10.ListInvitationsResponse, error)) *MockInvitationServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInvitationServiceListCall) DoAndReturn(f func(context.Context, *v10.ListInvitationsRequest, ...grpc.CallOption) (*v10.ListInvitationsResponse, error)) *MockInvitationServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockInvitationService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockInvitationServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockInvitationServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockInvitationService)(nil).ListOperations), varargs...)
	return &MockInvitationServiceListOperationsCall{Call: call}
}

// MockInvitationServiceListOperationsCall wrap *gomock.Call
type MockInvitationServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInvitationServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockInvitationServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInvitationServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockInvitationServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInvitationServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockInvitationServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Resend mocks base method.
func (m *MockInvitationService) Resend(arg0 context.Context, arg1 *v10.ResendInvitationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Resend", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resend indicates an expected call of Resend.
func (mr *MockInvitationServiceMockRecorder) Resend(arg0, arg1 any, arg2 ...any) *MockInvitationServiceResendCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resend", reflect.TypeOf((*MockInvitationService)(nil).Resend), varargs...)
	return &MockInvitationServiceResendCall{Call: call}
}

// MockInvitationServiceResendCall wrap *gomock.Call
type MockInvitationServiceResendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInvitationServiceResendCall) Return(arg0 operations.Operation, arg1 error) *MockInvitationServiceResendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInvitationServiceResendCall) Do(f func(context.Context, *v10.ResendInvitationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockInvitationServiceResendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInvitationServiceResendCall) DoAndReturn(f func(context.Context, *v10.ResendInvitationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockInvitationServiceResendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockInvitationService) Update(arg0 context.Context, arg1 *v10.UpdateInvitationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockInvitationServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockInvitationServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInvitationService)(nil).Update), varargs...)
	return &MockInvitationServiceUpdateCall{Call: call}
}

// MockInvitationServiceUpdateCall wrap *gomock.Call
type MockInvitationServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInvitationServiceUpdateCall) Return(arg0 operations.Operation, arg1 error) *MockInvitationServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInvitationServiceUpdateCall) Do(f func(context.Context, *v10.UpdateInvitationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockInvitationServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInvitationServiceUpdateCall) DoAndReturn(f func(context.Context, *v10.UpdateInvitationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockInvitationServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
