// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/iam/v1/group_membership_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/iam/v1/group_membership_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/iam/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockGroupMembershipService is a mock of GroupMembershipService interface.
type MockGroupMembershipService struct {
	ctrl     *gomock.Controller
	recorder *MockGroupMembershipServiceMockRecorder
}

// MockGroupMembershipServiceMockRecorder is the mock recorder for MockGroupMembershipService.
type MockGroupMembershipServiceMockRecorder struct {
	mock *MockGroupMembershipService
}

// NewMockGroupMembershipService creates a new mock instance.
func NewMockGroupMembershipService(ctrl *gomock.Controller) *MockGroupMembershipService {
	mock := &MockGroupMembershipService{ctrl: ctrl}
	mock.recorder = &MockGroupMembershipServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGroupMembershipService) EXPECT() *MockGroupMembershipServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGroupMembershipService) Create(arg0 context.Context, arg1 *v10.CreateGroupMembershipRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGroupMembershipServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockGroupMembershipServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGroupMembershipService)(nil).Create), varargs...)
	return &MockGroupMembershipServiceCreateCall{Call: call}
}

// MockGroupMembershipServiceCreateCall wrap *gomock.Call
type MockGroupMembershipServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupMembershipServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockGroupMembershipServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupMembershipServiceCreateCall) Do(f func(context.Context, *v10.CreateGroupMembershipRequest, ...grpc.CallOption) (operations.Operation, error)) *MockGroupMembershipServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupMembershipServiceCreateCall) DoAndReturn(f func(context.Context, *v10.CreateGroupMembershipRequest, ...grpc.CallOption) (operations.Operation, error)) *MockGroupMembershipServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockGroupMembershipService) Delete(arg0 context.Context, arg1 *v10.DeleteGroupMembershipRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockGroupMembershipServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockGroupMembershipServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGroupMembershipService)(nil).Delete), varargs...)
	return &MockGroupMembershipServiceDeleteCall{Call: call}
}

// MockGroupMembershipServiceDeleteCall wrap *gomock.Call
type MockGroupMembershipServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupMembershipServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockGroupMembershipServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupMembershipServiceDeleteCall) Do(f func(context.Context, *v10.DeleteGroupMembershipRequest, ...grpc.CallOption) (operations.Operation, error)) *MockGroupMembershipServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupMembershipServiceDeleteCall) DoAndReturn(f func(context.Context, *v10.DeleteGroupMembershipRequest, ...grpc.CallOption) (operations.Operation, error)) *MockGroupMembershipServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockGroupMembershipService) Get(arg0 context.Context, arg1 *v10.GetGroupMembershipRequest, arg2 ...grpc.CallOption) (*v10.GroupMembership, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.GroupMembership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGroupMembershipServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockGroupMembershipServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGroupMembershipService)(nil).Get), varargs...)
	return &MockGroupMembershipServiceGetCall{Call: call}
}

// MockGroupMembershipServiceGetCall wrap *gomock.Call
type MockGroupMembershipServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupMembershipServiceGetCall) Return(arg0 *v10.GroupMembership, arg1 error) *MockGroupMembershipServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupMembershipServiceGetCall) Do(f func(context.Context, *v10.GetGroupMembershipRequest, ...grpc.CallOption) (*v10.GroupMembership, error)) *MockGroupMembershipServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupMembershipServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetGroupMembershipRequest, ...grpc.CallOption) (*v10.GroupMembership, error)) *MockGroupMembershipServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockGroupMembershipService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockGroupMembershipServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockGroupMembershipServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockGroupMembershipService)(nil).GetOperation), varargs...)
	return &MockGroupMembershipServiceGetOperationCall{Call: call}
}

// MockGroupMembershipServiceGetOperationCall wrap *gomock.Call
type MockGroupMembershipServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupMembershipServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockGroupMembershipServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupMembershipServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockGroupMembershipServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupMembershipServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockGroupMembershipServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetWithAttributes mocks base method.
func (m *MockGroupMembershipService) GetWithAttributes(arg0 context.Context, arg1 *v10.GetGroupMembershipRequest, arg2 ...grpc.CallOption) (*v10.GroupMembershipWithAttributes, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithAttributes", varargs...)
	ret0, _ := ret[0].(*v10.GroupMembershipWithAttributes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithAttributes indicates an expected call of GetWithAttributes.
func (mr *MockGroupMembershipServiceMockRecorder) GetWithAttributes(arg0, arg1 any, arg2 ...any) *MockGroupMembershipServiceGetWithAttributesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithAttributes", reflect.TypeOf((*MockGroupMembershipService)(nil).GetWithAttributes), varargs...)
	return &MockGroupMembershipServiceGetWithAttributesCall{Call: call}
}

// MockGroupMembershipServiceGetWithAttributesCall wrap *gomock.Call
type MockGroupMembershipServiceGetWithAttributesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupMembershipServiceGetWithAttributesCall) Return(arg0 *v10.GroupMembershipWithAttributes, arg1 error) *MockGroupMembershipServiceGetWithAttributesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupMembershipServiceGetWithAttributesCall) Do(f func(context.Context, *v10.GetGroupMembershipRequest, ...grpc.CallOption) (*v10.GroupMembershipWithAttributes, error)) *MockGroupMembershipServiceGetWithAttributesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupMembershipServiceGetWithAttributesCall) DoAndReturn(f func(context.Context, *v10.GetGroupMembershipRequest, ...grpc.CallOption) (*v10.GroupMembershipWithAttributes, error)) *MockGroupMembershipServiceGetWithAttributesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListMemberOf mocks base method.
func (m *MockGroupMembershipService) ListMemberOf(arg0 context.Context, arg1 *v10.ListMemberOfRequest, arg2 ...grpc.CallOption) (*v10.ListMemberOfResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMemberOf", varargs...)
	ret0, _ := ret[0].(*v10.ListMemberOfResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMemberOf indicates an expected call of ListMemberOf.
func (mr *MockGroupMembershipServiceMockRecorder) ListMemberOf(arg0, arg1 any, arg2 ...any) *MockGroupMembershipServiceListMemberOfCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMemberOf", reflect.TypeOf((*MockGroupMembershipService)(nil).ListMemberOf), varargs...)
	return &MockGroupMembershipServiceListMemberOfCall{Call: call}
}

// MockGroupMembershipServiceListMemberOfCall wrap *gomock.Call
type MockGroupMembershipServiceListMemberOfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupMembershipServiceListMemberOfCall) Return(arg0 *v10.ListMemberOfResponse, arg1 error) *MockGroupMembershipServiceListMemberOfCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupMembershipServiceListMemberOfCall) Do(f func(context.Context, *v10.ListMemberOfRequest, ...grpc.CallOption) (*v10.ListMemberOfResponse, error)) *MockGroupMembershipServiceListMemberOfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupMembershipServiceListMemberOfCall) DoAndReturn(f func(context.Context, *v10.ListMemberOfRequest, ...grpc.CallOption) (*v10.ListMemberOfResponse, error)) *MockGroupMembershipServiceListMemberOfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListMembers mocks base method.
func (m *MockGroupMembershipService) ListMembers(arg0 context.Context, arg1 *v10.ListGroupMembershipsRequest, arg2 ...grpc.CallOption) (*v10.ListGroupMembershipsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembers", varargs...)
	ret0, _ := ret[0].(*v10.ListGroupMembershipsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembers indicates an expected call of ListMembers.
func (mr *MockGroupMembershipServiceMockRecorder) ListMembers(arg0, arg1 any, arg2 ...any) *MockGroupMembershipServiceListMembersCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembers", reflect.TypeOf((*MockGroupMembershipService)(nil).ListMembers), varargs...)
	return &MockGroupMembershipServiceListMembersCall{Call: call}
}

// MockGroupMembershipServiceListMembersCall wrap *gomock.Call
type MockGroupMembershipServiceListMembersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupMembershipServiceListMembersCall) Return(arg0 *v10.ListGroupMembershipsResponse, arg1 error) *MockGroupMembershipServiceListMembersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupMembershipServiceListMembersCall) Do(f func(context.Context, *v10.ListGroupMembershipsRequest, ...grpc.CallOption) (*v10.ListGroupMembershipsResponse, error)) *MockGroupMembershipServiceListMembersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupMembershipServiceListMembersCall) DoAndReturn(f func(context.Context, *v10.ListGroupMembershipsRequest, ...grpc.CallOption) (*v10.ListGroupMembershipsResponse, error)) *MockGroupMembershipServiceListMembersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListMembersWithAttributes mocks base method.
func (m *MockGroupMembershipService) ListMembersWithAttributes(arg0 context.Context, arg1 *v10.ListGroupMembershipsRequest, arg2 ...grpc.CallOption) (*v10.ListGroupMembershipsWithAttributesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListMembersWithAttributes", varargs...)
	ret0, _ := ret[0].(*v10.ListGroupMembershipsWithAttributesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMembersWithAttributes indicates an expected call of ListMembersWithAttributes.
func (mr *MockGroupMembershipServiceMockRecorder) ListMembersWithAttributes(arg0, arg1 any, arg2 ...any) *MockGroupMembershipServiceListMembersWithAttributesCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMembersWithAttributes", reflect.TypeOf((*MockGroupMembershipService)(nil).ListMembersWithAttributes), varargs...)
	return &MockGroupMembershipServiceListMembersWithAttributesCall{Call: call}
}

// MockGroupMembershipServiceListMembersWithAttributesCall wrap *gomock.Call
type MockGroupMembershipServiceListMembersWithAttributesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupMembershipServiceListMembersWithAttributesCall) Return(arg0 *v10.ListGroupMembershipsWithAttributesResponse, arg1 error) *MockGroupMembershipServiceListMembersWithAttributesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupMembershipServiceListMembersWithAttributesCall) Do(f func(context.Context, *v10.ListGroupMembershipsRequest, ...grpc.CallOption) (*v10.ListGroupMembershipsWithAttributesResponse, error)) *MockGroupMembershipServiceListMembersWithAttributesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupMembershipServiceListMembersWithAttributesCall) DoAndReturn(f func(context.Context, *v10.ListGroupMembershipsRequest, ...grpc.CallOption) (*v10.ListGroupMembershipsWithAttributesResponse, error)) *MockGroupMembershipServiceListMembersWithAttributesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockGroupMembershipService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockGroupMembershipServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockGroupMembershipServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockGroupMembershipService)(nil).ListOperations), varargs...)
	return &MockGroupMembershipServiceListOperationsCall{Call: call}
}

// MockGroupMembershipServiceListOperationsCall wrap *gomock.Call
type MockGroupMembershipServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGroupMembershipServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockGroupMembershipServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGroupMembershipServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockGroupMembershipServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGroupMembershipServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockGroupMembershipServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
