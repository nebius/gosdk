// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/iam/v1/access_permit_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/iam/v1/access_permit_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/iam/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAccessPermitService is a mock of AccessPermitService interface.
type MockAccessPermitService struct {
	ctrl     *gomock.Controller
	recorder *MockAccessPermitServiceMockRecorder
}

// MockAccessPermitServiceMockRecorder is the mock recorder for MockAccessPermitService.
type MockAccessPermitServiceMockRecorder struct {
	mock *MockAccessPermitService
}

// NewMockAccessPermitService creates a new mock instance.
func NewMockAccessPermitService(ctrl *gomock.Controller) *MockAccessPermitService {
	mock := &MockAccessPermitService{ctrl: ctrl}
	mock.recorder = &MockAccessPermitServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessPermitService) EXPECT() *MockAccessPermitServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccessPermitService) Create(arg0 context.Context, arg1 *v10.CreateAccessPermitRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccessPermitServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockAccessPermitServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccessPermitService)(nil).Create), varargs...)
	return &MockAccessPermitServiceCreateCall{Call: call}
}

// MockAccessPermitServiceCreateCall wrap *gomock.Call
type MockAccessPermitServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessPermitServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockAccessPermitServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessPermitServiceCreateCall) Do(f func(context.Context, *v10.CreateAccessPermitRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessPermitServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessPermitServiceCreateCall) DoAndReturn(f func(context.Context, *v10.CreateAccessPermitRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessPermitServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockAccessPermitService) Delete(arg0 context.Context, arg1 *v10.DeleteAccessPermitRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAccessPermitServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockAccessPermitServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccessPermitService)(nil).Delete), varargs...)
	return &MockAccessPermitServiceDeleteCall{Call: call}
}

// MockAccessPermitServiceDeleteCall wrap *gomock.Call
type MockAccessPermitServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessPermitServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockAccessPermitServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessPermitServiceDeleteCall) Do(f func(context.Context, *v10.DeleteAccessPermitRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessPermitServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessPermitServiceDeleteCall) DoAndReturn(f func(context.Context, *v10.DeleteAccessPermitRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessPermitServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockAccessPermitService) Filter(arg0 context.Context, arg1 *v10.ListAccessPermitRequest, arg2 ...grpc.CallOption) iter.Seq2[*v10.AccessPermit, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v10.AccessPermit, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockAccessPermitServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockAccessPermitServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockAccessPermitService)(nil).Filter), varargs...)
	return &MockAccessPermitServiceFilterCall{Call: call}
}

// MockAccessPermitServiceFilterCall wrap *gomock.Call
type MockAccessPermitServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessPermitServiceFilterCall) Return(arg0 iter.Seq2[*v10.AccessPermit, error]) *MockAccessPermitServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessPermitServiceFilterCall) Do(f func(context.Context, *v10.ListAccessPermitRequest, ...grpc.CallOption) iter.Seq2[*v10.AccessPermit, error]) *MockAccessPermitServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessPermitServiceFilterCall) DoAndReturn(f func(context.Context, *v10.ListAccessPermitRequest, ...grpc.CallOption) iter.Seq2[*v10.AccessPermit, error]) *MockAccessPermitServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockAccessPermitService) Get(arg0 context.Context, arg1 *v10.GetAccessPermitRequest, arg2 ...grpc.CallOption) (*v10.AccessPermit, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.AccessPermit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccessPermitServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockAccessPermitServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccessPermitService)(nil).Get), varargs...)
	return &MockAccessPermitServiceGetCall{Call: call}
}

// MockAccessPermitServiceGetCall wrap *gomock.Call
type MockAccessPermitServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessPermitServiceGetCall) Return(arg0 *v10.AccessPermit, arg1 error) *MockAccessPermitServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessPermitServiceGetCall) Do(f func(context.Context, *v10.GetAccessPermitRequest, ...grpc.CallOption) (*v10.AccessPermit, error)) *MockAccessPermitServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessPermitServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetAccessPermitRequest, ...grpc.CallOption) (*v10.AccessPermit, error)) *MockAccessPermitServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockAccessPermitService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockAccessPermitServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockAccessPermitServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockAccessPermitService)(nil).GetOperation), varargs...)
	return &MockAccessPermitServiceGetOperationCall{Call: call}
}

// MockAccessPermitServiceGetOperationCall wrap *gomock.Call
type MockAccessPermitServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessPermitServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockAccessPermitServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessPermitServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessPermitServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessPermitServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessPermitServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockAccessPermitService) List(arg0 context.Context, arg1 *v10.ListAccessPermitRequest, arg2 ...grpc.CallOption) (*v10.ListAccessPermitResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v10.ListAccessPermitResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAccessPermitServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockAccessPermitServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccessPermitService)(nil).List), varargs...)
	return &MockAccessPermitServiceListCall{Call: call}
}

// MockAccessPermitServiceListCall wrap *gomock.Call
type MockAccessPermitServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessPermitServiceListCall) Return(arg0 *v10.ListAccessPermitResponse, arg1 error) *MockAccessPermitServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessPermitServiceListCall) Do(f func(context.Context, *v10.ListAccessPermitRequest, ...grpc.CallOption) (*v10.ListAccessPermitResponse, error)) *MockAccessPermitServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessPermitServiceListCall) DoAndReturn(f func(context.Context, *v10.ListAccessPermitRequest, ...grpc.CallOption) (*v10.ListAccessPermitResponse, error)) *MockAccessPermitServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockAccessPermitService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockAccessPermitServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockAccessPermitServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockAccessPermitService)(nil).ListOperations), varargs...)
	return &MockAccessPermitServiceListOperationsCall{Call: call}
}

// MockAccessPermitServiceListOperationsCall wrap *gomock.Call
type MockAccessPermitServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessPermitServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockAccessPermitServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessPermitServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockAccessPermitServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessPermitServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockAccessPermitServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
