// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/iam/v1/federated_credentials_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/iam/v1/federated_credentials_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/iam/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFederatedCredentialsService is a mock of FederatedCredentialsService interface.
type MockFederatedCredentialsService struct {
	ctrl     *gomock.Controller
	recorder *MockFederatedCredentialsServiceMockRecorder
}

// MockFederatedCredentialsServiceMockRecorder is the mock recorder for MockFederatedCredentialsService.
type MockFederatedCredentialsServiceMockRecorder struct {
	mock *MockFederatedCredentialsService
}

// NewMockFederatedCredentialsService creates a new mock instance.
func NewMockFederatedCredentialsService(ctrl *gomock.Controller) *MockFederatedCredentialsService {
	mock := &MockFederatedCredentialsService{ctrl: ctrl}
	mock.recorder = &MockFederatedCredentialsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFederatedCredentialsService) EXPECT() *MockFederatedCredentialsServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFederatedCredentialsService) Create(arg0 context.Context, arg1 *v10.CreateFederatedCredentialsRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFederatedCredentialsServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockFederatedCredentialsServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFederatedCredentialsService)(nil).Create), varargs...)
	return &MockFederatedCredentialsServiceCreateCall{Call: call}
}

// MockFederatedCredentialsServiceCreateCall wrap *gomock.Call
type MockFederatedCredentialsServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederatedCredentialsServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockFederatedCredentialsServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederatedCredentialsServiceCreateCall) Do(f func(context.Context, *v10.CreateFederatedCredentialsRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederatedCredentialsServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederatedCredentialsServiceCreateCall) DoAndReturn(f func(context.Context, *v10.CreateFederatedCredentialsRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederatedCredentialsServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockFederatedCredentialsService) Delete(arg0 context.Context, arg1 *v10.DeleteFederatedCredentialsRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockFederatedCredentialsServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockFederatedCredentialsServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFederatedCredentialsService)(nil).Delete), varargs...)
	return &MockFederatedCredentialsServiceDeleteCall{Call: call}
}

// MockFederatedCredentialsServiceDeleteCall wrap *gomock.Call
type MockFederatedCredentialsServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederatedCredentialsServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockFederatedCredentialsServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederatedCredentialsServiceDeleteCall) Do(f func(context.Context, *v10.DeleteFederatedCredentialsRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederatedCredentialsServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederatedCredentialsServiceDeleteCall) DoAndReturn(f func(context.Context, *v10.DeleteFederatedCredentialsRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederatedCredentialsServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockFederatedCredentialsService) Filter(arg0 context.Context, arg1 *v10.ListFederatedCredentialsRequest, arg2 ...grpc.CallOption) iter.Seq2[*v10.FederatedCredentials, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v10.FederatedCredentials, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockFederatedCredentialsServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockFederatedCredentialsServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockFederatedCredentialsService)(nil).Filter), varargs...)
	return &MockFederatedCredentialsServiceFilterCall{Call: call}
}

// MockFederatedCredentialsServiceFilterCall wrap *gomock.Call
type MockFederatedCredentialsServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederatedCredentialsServiceFilterCall) Return(arg0 iter.Seq2[*v10.FederatedCredentials, error]) *MockFederatedCredentialsServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederatedCredentialsServiceFilterCall) Do(f func(context.Context, *v10.ListFederatedCredentialsRequest, ...grpc.CallOption) iter.Seq2[*v10.FederatedCredentials, error]) *MockFederatedCredentialsServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederatedCredentialsServiceFilterCall) DoAndReturn(f func(context.Context, *v10.ListFederatedCredentialsRequest, ...grpc.CallOption) iter.Seq2[*v10.FederatedCredentials, error]) *MockFederatedCredentialsServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockFederatedCredentialsService) Get(arg0 context.Context, arg1 *v10.GetFederatedCredentialsRequest, arg2 ...grpc.CallOption) (*v10.FederatedCredentials, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.FederatedCredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockFederatedCredentialsServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockFederatedCredentialsServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockFederatedCredentialsService)(nil).Get), varargs...)
	return &MockFederatedCredentialsServiceGetCall{Call: call}
}

// MockFederatedCredentialsServiceGetCall wrap *gomock.Call
type MockFederatedCredentialsServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederatedCredentialsServiceGetCall) Return(arg0 *v10.FederatedCredentials, arg1 error) *MockFederatedCredentialsServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederatedCredentialsServiceGetCall) Do(f func(context.Context, *v10.GetFederatedCredentialsRequest, ...grpc.CallOption) (*v10.FederatedCredentials, error)) *MockFederatedCredentialsServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederatedCredentialsServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetFederatedCredentialsRequest, ...grpc.CallOption) (*v10.FederatedCredentials, error)) *MockFederatedCredentialsServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockFederatedCredentialsService) GetByName(arg0 context.Context, arg1 *v10.GetByNameFederatedCredentialsRequest, arg2 ...grpc.CallOption) (*v10.FederatedCredentials, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v10.FederatedCredentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockFederatedCredentialsServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockFederatedCredentialsServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockFederatedCredentialsService)(nil).GetByName), varargs...)
	return &MockFederatedCredentialsServiceGetByNameCall{Call: call}
}

// MockFederatedCredentialsServiceGetByNameCall wrap *gomock.Call
type MockFederatedCredentialsServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederatedCredentialsServiceGetByNameCall) Return(arg0 *v10.FederatedCredentials, arg1 error) *MockFederatedCredentialsServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederatedCredentialsServiceGetByNameCall) Do(f func(context.Context, *v10.GetByNameFederatedCredentialsRequest, ...grpc.CallOption) (*v10.FederatedCredentials, error)) *MockFederatedCredentialsServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederatedCredentialsServiceGetByNameCall) DoAndReturn(f func(context.Context, *v10.GetByNameFederatedCredentialsRequest, ...grpc.CallOption) (*v10.FederatedCredentials, error)) *MockFederatedCredentialsServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockFederatedCredentialsService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockFederatedCredentialsServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockFederatedCredentialsServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockFederatedCredentialsService)(nil).GetOperation), varargs...)
	return &MockFederatedCredentialsServiceGetOperationCall{Call: call}
}

// MockFederatedCredentialsServiceGetOperationCall wrap *gomock.Call
type MockFederatedCredentialsServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederatedCredentialsServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockFederatedCredentialsServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederatedCredentialsServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederatedCredentialsServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederatedCredentialsServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederatedCredentialsServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockFederatedCredentialsService) List(arg0 context.Context, arg1 *v10.ListFederatedCredentialsRequest, arg2 ...grpc.CallOption) (*v10.ListFederatedCredentialsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v10.ListFederatedCredentialsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockFederatedCredentialsServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockFederatedCredentialsServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockFederatedCredentialsService)(nil).List), varargs...)
	return &MockFederatedCredentialsServiceListCall{Call: call}
}

// MockFederatedCredentialsServiceListCall wrap *gomock.Call
type MockFederatedCredentialsServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederatedCredentialsServiceListCall) Return(arg0 *v10.ListFederatedCredentialsResponse, arg1 error) *MockFederatedCredentialsServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederatedCredentialsServiceListCall) Do(f func(context.Context, *v10.ListFederatedCredentialsRequest, ...grpc.CallOption) (*v10.ListFederatedCredentialsResponse, error)) *MockFederatedCredentialsServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederatedCredentialsServiceListCall) DoAndReturn(f func(context.Context, *v10.ListFederatedCredentialsRequest, ...grpc.CallOption) (*v10.ListFederatedCredentialsResponse, error)) *MockFederatedCredentialsServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockFederatedCredentialsService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockFederatedCredentialsServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockFederatedCredentialsServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockFederatedCredentialsService)(nil).ListOperations), varargs...)
	return &MockFederatedCredentialsServiceListOperationsCall{Call: call}
}

// MockFederatedCredentialsServiceListOperationsCall wrap *gomock.Call
type MockFederatedCredentialsServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederatedCredentialsServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockFederatedCredentialsServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederatedCredentialsServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockFederatedCredentialsServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederatedCredentialsServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockFederatedCredentialsServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockFederatedCredentialsService) Update(arg0 context.Context, arg1 *v10.UpdateFederatedCredentialsRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFederatedCredentialsServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockFederatedCredentialsServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFederatedCredentialsService)(nil).Update), varargs...)
	return &MockFederatedCredentialsServiceUpdateCall{Call: call}
}

// MockFederatedCredentialsServiceUpdateCall wrap *gomock.Call
type MockFederatedCredentialsServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFederatedCredentialsServiceUpdateCall) Return(arg0 operations.Operation, arg1 error) *MockFederatedCredentialsServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFederatedCredentialsServiceUpdateCall) Do(f func(context.Context, *v10.UpdateFederatedCredentialsRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederatedCredentialsServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFederatedCredentialsServiceUpdateCall) DoAndReturn(f func(context.Context, *v10.UpdateFederatedCredentialsRequest, ...grpc.CallOption) (operations.Operation, error)) *MockFederatedCredentialsServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
