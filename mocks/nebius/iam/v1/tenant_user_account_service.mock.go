// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/iam/v1/tenant_user_account_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/iam/v1/tenant_user_account_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/iam/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTenantUserAccountService is a mock of TenantUserAccountService interface.
type MockTenantUserAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockTenantUserAccountServiceMockRecorder
}

// MockTenantUserAccountServiceMockRecorder is the mock recorder for MockTenantUserAccountService.
type MockTenantUserAccountServiceMockRecorder struct {
	mock *MockTenantUserAccountService
}

// NewMockTenantUserAccountService creates a new mock instance.
func NewMockTenantUserAccountService(ctrl *gomock.Controller) *MockTenantUserAccountService {
	mock := &MockTenantUserAccountService{ctrl: ctrl}
	mock.recorder = &MockTenantUserAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTenantUserAccountService) EXPECT() *MockTenantUserAccountServiceMockRecorder {
	return m.recorder
}

// Block mocks base method.
func (m *MockTenantUserAccountService) Block(arg0 context.Context, arg1 *v10.BlockTenantUserAccountRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Block", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Block indicates an expected call of Block.
func (mr *MockTenantUserAccountServiceMockRecorder) Block(arg0, arg1 any, arg2 ...any) *MockTenantUserAccountServiceBlockCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockTenantUserAccountService)(nil).Block), varargs...)
	return &MockTenantUserAccountServiceBlockCall{Call: call}
}

// MockTenantUserAccountServiceBlockCall wrap *gomock.Call
type MockTenantUserAccountServiceBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTenantUserAccountServiceBlockCall) Return(arg0 operations.Operation, arg1 error) *MockTenantUserAccountServiceBlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTenantUserAccountServiceBlockCall) Do(f func(context.Context, *v10.BlockTenantUserAccountRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTenantUserAccountServiceBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTenantUserAccountServiceBlockCall) DoAndReturn(f func(context.Context, *v10.BlockTenantUserAccountRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTenantUserAccountServiceBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockTenantUserAccountService) Filter(arg0 context.Context, arg1 *v10.ListTenantUserAccountsRequest, arg2 ...grpc.CallOption) iter.Seq2[*v10.TenantUserAccount, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v10.TenantUserAccount, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockTenantUserAccountServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockTenantUserAccountServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockTenantUserAccountService)(nil).Filter), varargs...)
	return &MockTenantUserAccountServiceFilterCall{Call: call}
}

// MockTenantUserAccountServiceFilterCall wrap *gomock.Call
type MockTenantUserAccountServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTenantUserAccountServiceFilterCall) Return(arg0 iter.Seq2[*v10.TenantUserAccount, error]) *MockTenantUserAccountServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTenantUserAccountServiceFilterCall) Do(f func(context.Context, *v10.ListTenantUserAccountsRequest, ...grpc.CallOption) iter.Seq2[*v10.TenantUserAccount, error]) *MockTenantUserAccountServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTenantUserAccountServiceFilterCall) DoAndReturn(f func(context.Context, *v10.ListTenantUserAccountsRequest, ...grpc.CallOption) iter.Seq2[*v10.TenantUserAccount, error]) *MockTenantUserAccountServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockTenantUserAccountService) Get(arg0 context.Context, arg1 *v10.GetTenantUserAccountRequest, arg2 ...grpc.CallOption) (*v10.TenantUserAccount, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.TenantUserAccount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTenantUserAccountServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockTenantUserAccountServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTenantUserAccountService)(nil).Get), varargs...)
	return &MockTenantUserAccountServiceGetCall{Call: call}
}

// MockTenantUserAccountServiceGetCall wrap *gomock.Call
type MockTenantUserAccountServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTenantUserAccountServiceGetCall) Return(arg0 *v10.TenantUserAccount, arg1 error) *MockTenantUserAccountServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTenantUserAccountServiceGetCall) Do(f func(context.Context, *v10.GetTenantUserAccountRequest, ...grpc.CallOption) (*v10.TenantUserAccount, error)) *MockTenantUserAccountServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTenantUserAccountServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetTenantUserAccountRequest, ...grpc.CallOption) (*v10.TenantUserAccount, error)) *MockTenantUserAccountServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockTenantUserAccountService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockTenantUserAccountServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockTenantUserAccountServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockTenantUserAccountService)(nil).GetOperation), varargs...)
	return &MockTenantUserAccountServiceGetOperationCall{Call: call}
}

// MockTenantUserAccountServiceGetOperationCall wrap *gomock.Call
type MockTenantUserAccountServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTenantUserAccountServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockTenantUserAccountServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTenantUserAccountServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTenantUserAccountServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTenantUserAccountServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTenantUserAccountServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockTenantUserAccountService) List(arg0 context.Context, arg1 *v10.ListTenantUserAccountsRequest, arg2 ...grpc.CallOption) (*v10.ListTenantUserAccountsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v10.ListTenantUserAccountsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTenantUserAccountServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockTenantUserAccountServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTenantUserAccountService)(nil).List), varargs...)
	return &MockTenantUserAccountServiceListCall{Call: call}
}

// MockTenantUserAccountServiceListCall wrap *gomock.Call
type MockTenantUserAccountServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTenantUserAccountServiceListCall) Return(arg0 *v10.ListTenantUserAccountsResponse, arg1 error) *MockTenantUserAccountServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTenantUserAccountServiceListCall) Do(f func(context.Context, *v10.ListTenantUserAccountsRequest, ...grpc.CallOption) (*v10.ListTenantUserAccountsResponse, error)) *MockTenantUserAccountServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTenantUserAccountServiceListCall) DoAndReturn(f func(context.Context, *v10.ListTenantUserAccountsRequest, ...grpc.CallOption) (*v10.ListTenantUserAccountsResponse, error)) *MockTenantUserAccountServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockTenantUserAccountService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockTenantUserAccountServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockTenantUserAccountServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockTenantUserAccountService)(nil).ListOperations), varargs...)
	return &MockTenantUserAccountServiceListOperationsCall{Call: call}
}

// MockTenantUserAccountServiceListOperationsCall wrap *gomock.Call
type MockTenantUserAccountServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTenantUserAccountServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockTenantUserAccountServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTenantUserAccountServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockTenantUserAccountServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTenantUserAccountServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockTenantUserAccountServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unblock mocks base method.
func (m *MockTenantUserAccountService) Unblock(arg0 context.Context, arg1 *v10.UnblockTenantUserAccountRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Unblock", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unblock indicates an expected call of Unblock.
func (mr *MockTenantUserAccountServiceMockRecorder) Unblock(arg0, arg1 any, arg2 ...any) *MockTenantUserAccountServiceUnblockCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unblock", reflect.TypeOf((*MockTenantUserAccountService)(nil).Unblock), varargs...)
	return &MockTenantUserAccountServiceUnblockCall{Call: call}
}

// MockTenantUserAccountServiceUnblockCall wrap *gomock.Call
type MockTenantUserAccountServiceUnblockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTenantUserAccountServiceUnblockCall) Return(arg0 operations.Operation, arg1 error) *MockTenantUserAccountServiceUnblockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTenantUserAccountServiceUnblockCall) Do(f func(context.Context, *v10.UnblockTenantUserAccountRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTenantUserAccountServiceUnblockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTenantUserAccountServiceUnblockCall) DoAndReturn(f func(context.Context, *v10.UnblockTenantUserAccountRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTenantUserAccountServiceUnblockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
