// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/iam/v1/static_key_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/iam/v1/static_key_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/iam/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockStaticKeyService is a mock of StaticKeyService interface.
type MockStaticKeyService struct {
	ctrl     *gomock.Controller
	recorder *MockStaticKeyServiceMockRecorder
}

// MockStaticKeyServiceMockRecorder is the mock recorder for MockStaticKeyService.
type MockStaticKeyServiceMockRecorder struct {
	mock *MockStaticKeyService
}

// NewMockStaticKeyService creates a new mock instance.
func NewMockStaticKeyService(ctrl *gomock.Controller) *MockStaticKeyService {
	mock := &MockStaticKeyService{ctrl: ctrl}
	mock.recorder = &MockStaticKeyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStaticKeyService) EXPECT() *MockStaticKeyServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockStaticKeyService) Delete(arg0 context.Context, arg1 *v10.DeleteStaticKeyRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockStaticKeyServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockStaticKeyServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStaticKeyService)(nil).Delete), varargs...)
	return &MockStaticKeyServiceDeleteCall{Call: call}
}

// MockStaticKeyServiceDeleteCall wrap *gomock.Call
type MockStaticKeyServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStaticKeyServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockStaticKeyServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStaticKeyServiceDeleteCall) Do(f func(context.Context, *v10.DeleteStaticKeyRequest, ...grpc.CallOption) (operations.Operation, error)) *MockStaticKeyServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStaticKeyServiceDeleteCall) DoAndReturn(f func(context.Context, *v10.DeleteStaticKeyRequest, ...grpc.CallOption) (operations.Operation, error)) *MockStaticKeyServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockStaticKeyService) Filter(arg0 context.Context, arg1 *v10.ListStaticKeysRequest, arg2 ...grpc.CallOption) iter.Seq2[*v10.StaticKey, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v10.StaticKey, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockStaticKeyServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockStaticKeyServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockStaticKeyService)(nil).Filter), varargs...)
	return &MockStaticKeyServiceFilterCall{Call: call}
}

// MockStaticKeyServiceFilterCall wrap *gomock.Call
type MockStaticKeyServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStaticKeyServiceFilterCall) Return(arg0 iter.Seq2[*v10.StaticKey, error]) *MockStaticKeyServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStaticKeyServiceFilterCall) Do(f func(context.Context, *v10.ListStaticKeysRequest, ...grpc.CallOption) iter.Seq2[*v10.StaticKey, error]) *MockStaticKeyServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStaticKeyServiceFilterCall) DoAndReturn(f func(context.Context, *v10.ListStaticKeysRequest, ...grpc.CallOption) iter.Seq2[*v10.StaticKey, error]) *MockStaticKeyServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Find mocks base method.
func (m *MockStaticKeyService) Find(arg0 context.Context, arg1 *v10.FindStaticKeyRequest, arg2 ...grpc.CallOption) (*v10.FindStaticKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].(*v10.FindStaticKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockStaticKeyServiceMockRecorder) Find(arg0, arg1 any, arg2 ...any) *MockStaticKeyServiceFindCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockStaticKeyService)(nil).Find), varargs...)
	return &MockStaticKeyServiceFindCall{Call: call}
}

// MockStaticKeyServiceFindCall wrap *gomock.Call
type MockStaticKeyServiceFindCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStaticKeyServiceFindCall) Return(arg0 *v10.FindStaticKeyResponse, arg1 error) *MockStaticKeyServiceFindCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStaticKeyServiceFindCall) Do(f func(context.Context, *v10.FindStaticKeyRequest, ...grpc.CallOption) (*v10.FindStaticKeyResponse, error)) *MockStaticKeyServiceFindCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStaticKeyServiceFindCall) DoAndReturn(f func(context.Context, *v10.FindStaticKeyRequest, ...grpc.CallOption) (*v10.FindStaticKeyResponse, error)) *MockStaticKeyServiceFindCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockStaticKeyService) Get(arg0 context.Context, arg1 *v10.GetStaticKeyRequest, arg2 ...grpc.CallOption) (*v10.StaticKey, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.StaticKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockStaticKeyServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockStaticKeyServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockStaticKeyService)(nil).Get), varargs...)
	return &MockStaticKeyServiceGetCall{Call: call}
}

// MockStaticKeyServiceGetCall wrap *gomock.Call
type MockStaticKeyServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStaticKeyServiceGetCall) Return(arg0 *v10.StaticKey, arg1 error) *MockStaticKeyServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStaticKeyServiceGetCall) Do(f func(context.Context, *v10.GetStaticKeyRequest, ...grpc.CallOption) (*v10.StaticKey, error)) *MockStaticKeyServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStaticKeyServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetStaticKeyRequest, ...grpc.CallOption) (*v10.StaticKey, error)) *MockStaticKeyServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockStaticKeyService) GetByName(arg0 context.Context, arg1 *v10.GetStaticKeyByNameRequest, arg2 ...grpc.CallOption) (*v10.StaticKey, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v10.StaticKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockStaticKeyServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockStaticKeyServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockStaticKeyService)(nil).GetByName), varargs...)
	return &MockStaticKeyServiceGetByNameCall{Call: call}
}

// MockStaticKeyServiceGetByNameCall wrap *gomock.Call
type MockStaticKeyServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStaticKeyServiceGetByNameCall) Return(arg0 *v10.StaticKey, arg1 error) *MockStaticKeyServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStaticKeyServiceGetByNameCall) Do(f func(context.Context, *v10.GetStaticKeyByNameRequest, ...grpc.CallOption) (*v10.StaticKey, error)) *MockStaticKeyServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStaticKeyServiceGetByNameCall) DoAndReturn(f func(context.Context, *v10.GetStaticKeyByNameRequest, ...grpc.CallOption) (*v10.StaticKey, error)) *MockStaticKeyServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockStaticKeyService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockStaticKeyServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockStaticKeyServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockStaticKeyService)(nil).GetOperation), varargs...)
	return &MockStaticKeyServiceGetOperationCall{Call: call}
}

// MockStaticKeyServiceGetOperationCall wrap *gomock.Call
type MockStaticKeyServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStaticKeyServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockStaticKeyServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStaticKeyServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockStaticKeyServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStaticKeyServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockStaticKeyServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Issue mocks base method.
func (m *MockStaticKeyService) Issue(arg0 context.Context, arg1 *v10.IssueStaticKeyRequest, arg2 ...grpc.CallOption) (*v10.IssueStaticKeyResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Issue", varargs...)
	ret0, _ := ret[0].(*v10.IssueStaticKeyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Issue indicates an expected call of Issue.
func (mr *MockStaticKeyServiceMockRecorder) Issue(arg0, arg1 any, arg2 ...any) *MockStaticKeyServiceIssueCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockStaticKeyService)(nil).Issue), varargs...)
	return &MockStaticKeyServiceIssueCall{Call: call}
}

// MockStaticKeyServiceIssueCall wrap *gomock.Call
type MockStaticKeyServiceIssueCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStaticKeyServiceIssueCall) Return(arg0 *v10.IssueStaticKeyResponse, arg1 error) *MockStaticKeyServiceIssueCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStaticKeyServiceIssueCall) Do(f func(context.Context, *v10.IssueStaticKeyRequest, ...grpc.CallOption) (*v10.IssueStaticKeyResponse, error)) *MockStaticKeyServiceIssueCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStaticKeyServiceIssueCall) DoAndReturn(f func(context.Context, *v10.IssueStaticKeyRequest, ...grpc.CallOption) (*v10.IssueStaticKeyResponse, error)) *MockStaticKeyServiceIssueCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockStaticKeyService) List(arg0 context.Context, arg1 *v10.ListStaticKeysRequest, arg2 ...grpc.CallOption) (*v10.ListStaticKeysResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v10.ListStaticKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStaticKeyServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockStaticKeyServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStaticKeyService)(nil).List), varargs...)
	return &MockStaticKeyServiceListCall{Call: call}
}

// MockStaticKeyServiceListCall wrap *gomock.Call
type MockStaticKeyServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStaticKeyServiceListCall) Return(arg0 *v10.ListStaticKeysResponse, arg1 error) *MockStaticKeyServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStaticKeyServiceListCall) Do(f func(context.Context, *v10.ListStaticKeysRequest, ...grpc.CallOption) (*v10.ListStaticKeysResponse, error)) *MockStaticKeyServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStaticKeyServiceListCall) DoAndReturn(f func(context.Context, *v10.ListStaticKeysRequest, ...grpc.CallOption) (*v10.ListStaticKeysResponse, error)) *MockStaticKeyServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockStaticKeyService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockStaticKeyServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockStaticKeyServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockStaticKeyService)(nil).ListOperations), varargs...)
	return &MockStaticKeyServiceListOperationsCall{Call: call}
}

// MockStaticKeyServiceListOperationsCall wrap *gomock.Call
type MockStaticKeyServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStaticKeyServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockStaticKeyServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStaticKeyServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockStaticKeyServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStaticKeyServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockStaticKeyServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Revoke mocks base method.
func (m *MockStaticKeyService) Revoke(arg0 context.Context, arg1 *v10.RevokeStaticKeyRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Revoke", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Revoke indicates an expected call of Revoke.
func (mr *MockStaticKeyServiceMockRecorder) Revoke(arg0, arg1 any, arg2 ...any) *MockStaticKeyServiceRevokeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockStaticKeyService)(nil).Revoke), varargs...)
	return &MockStaticKeyServiceRevokeCall{Call: call}
}

// MockStaticKeyServiceRevokeCall wrap *gomock.Call
type MockStaticKeyServiceRevokeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStaticKeyServiceRevokeCall) Return(arg0 operations.Operation, arg1 error) *MockStaticKeyServiceRevokeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStaticKeyServiceRevokeCall) Do(f func(context.Context, *v10.RevokeStaticKeyRequest, ...grpc.CallOption) (operations.Operation, error)) *MockStaticKeyServiceRevokeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStaticKeyServiceRevokeCall) DoAndReturn(f func(context.Context, *v10.RevokeStaticKeyRequest, ...grpc.CallOption) (operations.Operation, error)) *MockStaticKeyServiceRevokeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
