// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/iam/v1/token_exchange_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/iam/v1/token_exchange_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	v1 "github.com/nebius/gosdk/proto/nebius/iam/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTokenExchangeService is a mock of TokenExchangeService interface.
type MockTokenExchangeService struct {
	ctrl     *gomock.Controller
	recorder *MockTokenExchangeServiceMockRecorder
}

// MockTokenExchangeServiceMockRecorder is the mock recorder for MockTokenExchangeService.
type MockTokenExchangeServiceMockRecorder struct {
	mock *MockTokenExchangeService
}

// NewMockTokenExchangeService creates a new mock instance.
func NewMockTokenExchangeService(ctrl *gomock.Controller) *MockTokenExchangeService {
	mock := &MockTokenExchangeService{ctrl: ctrl}
	mock.recorder = &MockTokenExchangeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenExchangeService) EXPECT() *MockTokenExchangeServiceMockRecorder {
	return m.recorder
}

// Exchange mocks base method.
func (m *MockTokenExchangeService) Exchange(arg0 context.Context, arg1 *v1.ExchangeTokenRequest, arg2 ...grpc.CallOption) (*v1.CreateTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exchange", varargs...)
	ret0, _ := ret[0].(*v1.CreateTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exchange indicates an expected call of Exchange.
func (mr *MockTokenExchangeServiceMockRecorder) Exchange(arg0, arg1 any, arg2 ...any) *MockTokenExchangeServiceExchangeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exchange", reflect.TypeOf((*MockTokenExchangeService)(nil).Exchange), varargs...)
	return &MockTokenExchangeServiceExchangeCall{Call: call}
}

// MockTokenExchangeServiceExchangeCall wrap *gomock.Call
type MockTokenExchangeServiceExchangeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTokenExchangeServiceExchangeCall) Return(arg0 *v1.CreateTokenResponse, arg1 error) *MockTokenExchangeServiceExchangeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTokenExchangeServiceExchangeCall) Do(f func(context.Context, *v1.ExchangeTokenRequest, ...grpc.CallOption) (*v1.CreateTokenResponse, error)) *MockTokenExchangeServiceExchangeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTokenExchangeServiceExchangeCall) DoAndReturn(f func(context.Context, *v1.ExchangeTokenRequest, ...grpc.CallOption) (*v1.CreateTokenResponse, error)) *MockTokenExchangeServiceExchangeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
