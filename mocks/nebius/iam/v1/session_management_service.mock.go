// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/iam/v1/session_management_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/iam/v1/session_management_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	v1 "github.com/nebius/gosdk/proto/nebius/iam/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSessionManagementService is a mock of SessionManagementService interface.
type MockSessionManagementService struct {
	ctrl     *gomock.Controller
	recorder *MockSessionManagementServiceMockRecorder
}

// MockSessionManagementServiceMockRecorder is the mock recorder for MockSessionManagementService.
type MockSessionManagementServiceMockRecorder struct {
	mock *MockSessionManagementService
}

// NewMockSessionManagementService creates a new mock instance.
func NewMockSessionManagementService(ctrl *gomock.Controller) *MockSessionManagementService {
	mock := &MockSessionManagementService{ctrl: ctrl}
	mock.recorder = &MockSessionManagementServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionManagementService) EXPECT() *MockSessionManagementServiceMockRecorder {
	return m.recorder
}

// Revoke mocks base method.
func (m *MockSessionManagementService) Revoke(arg0 context.Context, arg1 *v1.RevokeSessionRequest, arg2 ...grpc.CallOption) (*v1.RevokeSessionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Revoke", varargs...)
	ret0, _ := ret[0].(*v1.RevokeSessionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Revoke indicates an expected call of Revoke.
func (mr *MockSessionManagementServiceMockRecorder) Revoke(arg0, arg1 any, arg2 ...any) *MockSessionManagementServiceRevokeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockSessionManagementService)(nil).Revoke), varargs...)
	return &MockSessionManagementServiceRevokeCall{Call: call}
}

// MockSessionManagementServiceRevokeCall wrap *gomock.Call
type MockSessionManagementServiceRevokeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionManagementServiceRevokeCall) Return(arg0 *v1.RevokeSessionResponse, arg1 error) *MockSessionManagementServiceRevokeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionManagementServiceRevokeCall) Do(f func(context.Context, *v1.RevokeSessionRequest, ...grpc.CallOption) (*v1.RevokeSessionResponse, error)) *MockSessionManagementServiceRevokeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionManagementServiceRevokeCall) DoAndReturn(f func(context.Context, *v1.RevokeSessionRequest, ...grpc.CallOption) (*v1.RevokeSessionResponse, error)) *MockSessionManagementServiceRevokeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
