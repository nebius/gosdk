// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/iam/v2/access_key_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/iam/v2/access_key_service.sdk.go -package v2 -typed
//

// Package v2 is a generated GoMock package.
package v2

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v2 "github.com/nebius/gosdk/proto/nebius/iam/v2"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAccessKeyService is a mock of AccessKeyService interface.
type MockAccessKeyService struct {
	ctrl     *gomock.Controller
	recorder *MockAccessKeyServiceMockRecorder
}

// MockAccessKeyServiceMockRecorder is the mock recorder for MockAccessKeyService.
type MockAccessKeyServiceMockRecorder struct {
	mock *MockAccessKeyService
}

// NewMockAccessKeyService creates a new mock instance.
func NewMockAccessKeyService(ctrl *gomock.Controller) *MockAccessKeyService {
	mock := &MockAccessKeyService{ctrl: ctrl}
	mock.recorder = &MockAccessKeyServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessKeyService) EXPECT() *MockAccessKeyServiceMockRecorder {
	return m.recorder
}

// Activate mocks base method.
func (m *MockAccessKeyService) Activate(arg0 context.Context, arg1 *v2.ActivateAccessKeyRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Activate", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Activate indicates an expected call of Activate.
func (mr *MockAccessKeyServiceMockRecorder) Activate(arg0, arg1 any, arg2 ...any) *MockAccessKeyServiceActivateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Activate", reflect.TypeOf((*MockAccessKeyService)(nil).Activate), varargs...)
	return &MockAccessKeyServiceActivateCall{Call: call}
}

// MockAccessKeyServiceActivateCall wrap *gomock.Call
type MockAccessKeyServiceActivateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessKeyServiceActivateCall) Return(arg0 operations.Operation, arg1 error) *MockAccessKeyServiceActivateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessKeyServiceActivateCall) Do(f func(context.Context, *v2.ActivateAccessKeyRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceActivateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessKeyServiceActivateCall) DoAndReturn(f func(context.Context, *v2.ActivateAccessKeyRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceActivateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ActivateByAwsId mocks base method.
func (m *MockAccessKeyService) ActivateByAwsId(arg0 context.Context, arg1 *v2.ActivateAccessKeyByAwsIdRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ActivateByAwsId", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActivateByAwsId indicates an expected call of ActivateByAwsId.
func (mr *MockAccessKeyServiceMockRecorder) ActivateByAwsId(arg0, arg1 any, arg2 ...any) *MockAccessKeyServiceActivateByAwsIdCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateByAwsId", reflect.TypeOf((*MockAccessKeyService)(nil).ActivateByAwsId), varargs...)
	return &MockAccessKeyServiceActivateByAwsIdCall{Call: call}
}

// MockAccessKeyServiceActivateByAwsIdCall wrap *gomock.Call
type MockAccessKeyServiceActivateByAwsIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessKeyServiceActivateByAwsIdCall) Return(arg0 operations.Operation, arg1 error) *MockAccessKeyServiceActivateByAwsIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessKeyServiceActivateByAwsIdCall) Do(f func(context.Context, *v2.ActivateAccessKeyByAwsIdRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceActivateByAwsIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessKeyServiceActivateByAwsIdCall) DoAndReturn(f func(context.Context, *v2.ActivateAccessKeyByAwsIdRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceActivateByAwsIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockAccessKeyService) Create(arg0 context.Context, arg1 *v2.CreateAccessKeyRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccessKeyServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockAccessKeyServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccessKeyService)(nil).Create), varargs...)
	return &MockAccessKeyServiceCreateCall{Call: call}
}

// MockAccessKeyServiceCreateCall wrap *gomock.Call
type MockAccessKeyServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessKeyServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockAccessKeyServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessKeyServiceCreateCall) Do(f func(context.Context, *v2.CreateAccessKeyRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessKeyServiceCreateCall) DoAndReturn(f func(context.Context, *v2.CreateAccessKeyRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Deactivate mocks base method.
func (m *MockAccessKeyService) Deactivate(arg0 context.Context, arg1 *v2.DeactivateAccessKeyRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Deactivate", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deactivate indicates an expected call of Deactivate.
func (mr *MockAccessKeyServiceMockRecorder) Deactivate(arg0, arg1 any, arg2 ...any) *MockAccessKeyServiceDeactivateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deactivate", reflect.TypeOf((*MockAccessKeyService)(nil).Deactivate), varargs...)
	return &MockAccessKeyServiceDeactivateCall{Call: call}
}

// MockAccessKeyServiceDeactivateCall wrap *gomock.Call
type MockAccessKeyServiceDeactivateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessKeyServiceDeactivateCall) Return(arg0 operations.Operation, arg1 error) *MockAccessKeyServiceDeactivateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessKeyServiceDeactivateCall) Do(f func(context.Context, *v2.DeactivateAccessKeyRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceDeactivateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessKeyServiceDeactivateCall) DoAndReturn(f func(context.Context, *v2.DeactivateAccessKeyRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceDeactivateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeactivateByAwsId mocks base method.
func (m *MockAccessKeyService) DeactivateByAwsId(arg0 context.Context, arg1 *v2.DeactivateAccessKeyByAwsIdRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeactivateByAwsId", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeactivateByAwsId indicates an expected call of DeactivateByAwsId.
func (mr *MockAccessKeyServiceMockRecorder) DeactivateByAwsId(arg0, arg1 any, arg2 ...any) *MockAccessKeyServiceDeactivateByAwsIdCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateByAwsId", reflect.TypeOf((*MockAccessKeyService)(nil).DeactivateByAwsId), varargs...)
	return &MockAccessKeyServiceDeactivateByAwsIdCall{Call: call}
}

// MockAccessKeyServiceDeactivateByAwsIdCall wrap *gomock.Call
type MockAccessKeyServiceDeactivateByAwsIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessKeyServiceDeactivateByAwsIdCall) Return(arg0 operations.Operation, arg1 error) *MockAccessKeyServiceDeactivateByAwsIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessKeyServiceDeactivateByAwsIdCall) Do(f func(context.Context, *v2.DeactivateAccessKeyByAwsIdRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceDeactivateByAwsIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessKeyServiceDeactivateByAwsIdCall) DoAndReturn(f func(context.Context, *v2.DeactivateAccessKeyByAwsIdRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceDeactivateByAwsIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockAccessKeyService) Delete(arg0 context.Context, arg1 *v2.DeleteAccessKeyRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockAccessKeyServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockAccessKeyServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccessKeyService)(nil).Delete), varargs...)
	return &MockAccessKeyServiceDeleteCall{Call: call}
}

// MockAccessKeyServiceDeleteCall wrap *gomock.Call
type MockAccessKeyServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessKeyServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockAccessKeyServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessKeyServiceDeleteCall) Do(f func(context.Context, *v2.DeleteAccessKeyRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessKeyServiceDeleteCall) DoAndReturn(f func(context.Context, *v2.DeleteAccessKeyRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteByAwsId mocks base method.
func (m *MockAccessKeyService) DeleteByAwsId(arg0 context.Context, arg1 *v2.DeleteAccessKeyByAwsIdRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteByAwsId", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteByAwsId indicates an expected call of DeleteByAwsId.
func (mr *MockAccessKeyServiceMockRecorder) DeleteByAwsId(arg0, arg1 any, arg2 ...any) *MockAccessKeyServiceDeleteByAwsIdCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByAwsId", reflect.TypeOf((*MockAccessKeyService)(nil).DeleteByAwsId), varargs...)
	return &MockAccessKeyServiceDeleteByAwsIdCall{Call: call}
}

// MockAccessKeyServiceDeleteByAwsIdCall wrap *gomock.Call
type MockAccessKeyServiceDeleteByAwsIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessKeyServiceDeleteByAwsIdCall) Return(arg0 operations.Operation, arg1 error) *MockAccessKeyServiceDeleteByAwsIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessKeyServiceDeleteByAwsIdCall) Do(f func(context.Context, *v2.DeleteAccessKeyByAwsIdRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceDeleteByAwsIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessKeyServiceDeleteByAwsIdCall) DoAndReturn(f func(context.Context, *v2.DeleteAccessKeyByAwsIdRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceDeleteByAwsIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockAccessKeyService) Filter(arg0 context.Context, arg1 *v2.ListAccessKeysRequest, arg2 ...grpc.CallOption) iter.Seq2[*v2.AccessKey, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v2.AccessKey, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockAccessKeyServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockAccessKeyServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockAccessKeyService)(nil).Filter), varargs...)
	return &MockAccessKeyServiceFilterCall{Call: call}
}

// MockAccessKeyServiceFilterCall wrap *gomock.Call
type MockAccessKeyServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessKeyServiceFilterCall) Return(arg0 iter.Seq2[*v2.AccessKey, error]) *MockAccessKeyServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessKeyServiceFilterCall) Do(f func(context.Context, *v2.ListAccessKeysRequest, ...grpc.CallOption) iter.Seq2[*v2.AccessKey, error]) *MockAccessKeyServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessKeyServiceFilterCall) DoAndReturn(f func(context.Context, *v2.ListAccessKeysRequest, ...grpc.CallOption) iter.Seq2[*v2.AccessKey, error]) *MockAccessKeyServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockAccessKeyService) Get(arg0 context.Context, arg1 *v2.GetAccessKeyRequest, arg2 ...grpc.CallOption) (*v2.AccessKey, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v2.AccessKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAccessKeyServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockAccessKeyServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAccessKeyService)(nil).Get), varargs...)
	return &MockAccessKeyServiceGetCall{Call: call}
}

// MockAccessKeyServiceGetCall wrap *gomock.Call
type MockAccessKeyServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessKeyServiceGetCall) Return(arg0 *v2.AccessKey, arg1 error) *MockAccessKeyServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessKeyServiceGetCall) Do(f func(context.Context, *v2.GetAccessKeyRequest, ...grpc.CallOption) (*v2.AccessKey, error)) *MockAccessKeyServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessKeyServiceGetCall) DoAndReturn(f func(context.Context, *v2.GetAccessKeyRequest, ...grpc.CallOption) (*v2.AccessKey, error)) *MockAccessKeyServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByAwsId mocks base method.
func (m *MockAccessKeyService) GetByAwsId(arg0 context.Context, arg1 *v2.GetAccessKeyByAwsIdRequest, arg2 ...grpc.CallOption) (*v2.AccessKey, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByAwsId", varargs...)
	ret0, _ := ret[0].(*v2.AccessKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByAwsId indicates an expected call of GetByAwsId.
func (mr *MockAccessKeyServiceMockRecorder) GetByAwsId(arg0, arg1 any, arg2 ...any) *MockAccessKeyServiceGetByAwsIdCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByAwsId", reflect.TypeOf((*MockAccessKeyService)(nil).GetByAwsId), varargs...)
	return &MockAccessKeyServiceGetByAwsIdCall{Call: call}
}

// MockAccessKeyServiceGetByAwsIdCall wrap *gomock.Call
type MockAccessKeyServiceGetByAwsIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessKeyServiceGetByAwsIdCall) Return(arg0 *v2.AccessKey, arg1 error) *MockAccessKeyServiceGetByAwsIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessKeyServiceGetByAwsIdCall) Do(f func(context.Context, *v2.GetAccessKeyByAwsIdRequest, ...grpc.CallOption) (*v2.AccessKey, error)) *MockAccessKeyServiceGetByAwsIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessKeyServiceGetByAwsIdCall) DoAndReturn(f func(context.Context, *v2.GetAccessKeyByAwsIdRequest, ...grpc.CallOption) (*v2.AccessKey, error)) *MockAccessKeyServiceGetByAwsIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockAccessKeyService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockAccessKeyServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockAccessKeyServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockAccessKeyService)(nil).GetOperation), varargs...)
	return &MockAccessKeyServiceGetOperationCall{Call: call}
}

// MockAccessKeyServiceGetOperationCall wrap *gomock.Call
type MockAccessKeyServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessKeyServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockAccessKeyServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessKeyServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessKeyServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockAccessKeyService) List(arg0 context.Context, arg1 *v2.ListAccessKeysRequest, arg2 ...grpc.CallOption) (*v2.ListAccessKeysResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v2.ListAccessKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAccessKeyServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockAccessKeyServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAccessKeyService)(nil).List), varargs...)
	return &MockAccessKeyServiceListCall{Call: call}
}

// MockAccessKeyServiceListCall wrap *gomock.Call
type MockAccessKeyServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessKeyServiceListCall) Return(arg0 *v2.ListAccessKeysResponse, arg1 error) *MockAccessKeyServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessKeyServiceListCall) Do(f func(context.Context, *v2.ListAccessKeysRequest, ...grpc.CallOption) (*v2.ListAccessKeysResponse, error)) *MockAccessKeyServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessKeyServiceListCall) DoAndReturn(f func(context.Context, *v2.ListAccessKeysRequest, ...grpc.CallOption) (*v2.ListAccessKeysResponse, error)) *MockAccessKeyServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListByAccount mocks base method.
func (m *MockAccessKeyService) ListByAccount(arg0 context.Context, arg1 *v2.ListAccessKeysByAccountRequest, arg2 ...grpc.CallOption) (*v2.ListAccessKeysResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListByAccount", varargs...)
	ret0, _ := ret[0].(*v2.ListAccessKeysResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByAccount indicates an expected call of ListByAccount.
func (mr *MockAccessKeyServiceMockRecorder) ListByAccount(arg0, arg1 any, arg2 ...any) *MockAccessKeyServiceListByAccountCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByAccount", reflect.TypeOf((*MockAccessKeyService)(nil).ListByAccount), varargs...)
	return &MockAccessKeyServiceListByAccountCall{Call: call}
}

// MockAccessKeyServiceListByAccountCall wrap *gomock.Call
type MockAccessKeyServiceListByAccountCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessKeyServiceListByAccountCall) Return(arg0 *v2.ListAccessKeysResponse, arg1 error) *MockAccessKeyServiceListByAccountCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessKeyServiceListByAccountCall) Do(f func(context.Context, *v2.ListAccessKeysByAccountRequest, ...grpc.CallOption) (*v2.ListAccessKeysResponse, error)) *MockAccessKeyServiceListByAccountCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessKeyServiceListByAccountCall) DoAndReturn(f func(context.Context, *v2.ListAccessKeysByAccountRequest, ...grpc.CallOption) (*v2.ListAccessKeysResponse, error)) *MockAccessKeyServiceListByAccountCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockAccessKeyService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockAccessKeyServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockAccessKeyServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockAccessKeyService)(nil).ListOperations), varargs...)
	return &MockAccessKeyServiceListOperationsCall{Call: call}
}

// MockAccessKeyServiceListOperationsCall wrap *gomock.Call
type MockAccessKeyServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessKeyServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockAccessKeyServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessKeyServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockAccessKeyServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessKeyServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockAccessKeyServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockAccessKeyService) Update(arg0 context.Context, arg1 *v2.UpdateAccessKeyRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAccessKeyServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockAccessKeyServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccessKeyService)(nil).Update), varargs...)
	return &MockAccessKeyServiceUpdateCall{Call: call}
}

// MockAccessKeyServiceUpdateCall wrap *gomock.Call
type MockAccessKeyServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessKeyServiceUpdateCall) Return(arg0 operations.Operation, arg1 error) *MockAccessKeyServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessKeyServiceUpdateCall) Do(f func(context.Context, *v2.UpdateAccessKeyRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessKeyServiceUpdateCall) DoAndReturn(f func(context.Context, *v2.UpdateAccessKeyRequest, ...grpc.CallOption) (operations.Operation, error)) *MockAccessKeyServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
