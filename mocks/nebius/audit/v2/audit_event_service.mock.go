// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/audit/v2/audit_event_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/audit/v2/audit_event_service.sdk.go -package v2 -typed
//

// Package v2 is a generated GoMock package.
package v2

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	v2 "github.com/nebius/gosdk/proto/nebius/audit/v2"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockAuditEventService is a mock of AuditEventService interface.
type MockAuditEventService struct {
	ctrl     *gomock.Controller
	recorder *MockAuditEventServiceMockRecorder
}

// MockAuditEventServiceMockRecorder is the mock recorder for MockAuditEventService.
type MockAuditEventServiceMockRecorder struct {
	mock *MockAuditEventService
}

// NewMockAuditEventService creates a new mock instance.
func NewMockAuditEventService(ctrl *gomock.Controller) *MockAuditEventService {
	mock := &MockAuditEventService{ctrl: ctrl}
	mock.recorder = &MockAuditEventServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuditEventService) EXPECT() *MockAuditEventServiceMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockAuditEventService) Filter(arg0 context.Context, arg1 *v2.ListAuditEventRequest, arg2 ...grpc.CallOption) iter.Seq2[*v2.AuditEvent, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v2.AuditEvent, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockAuditEventServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockAuditEventServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockAuditEventService)(nil).Filter), varargs...)
	return &MockAuditEventServiceFilterCall{Call: call}
}

// MockAuditEventServiceFilterCall wrap *gomock.Call
type MockAuditEventServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuditEventServiceFilterCall) Return(arg0 iter.Seq2[*v2.AuditEvent, error]) *MockAuditEventServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuditEventServiceFilterCall) Do(f func(context.Context, *v2.ListAuditEventRequest, ...grpc.CallOption) iter.Seq2[*v2.AuditEvent, error]) *MockAuditEventServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuditEventServiceFilterCall) DoAndReturn(f func(context.Context, *v2.ListAuditEventRequest, ...grpc.CallOption) iter.Seq2[*v2.AuditEvent, error]) *MockAuditEventServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockAuditEventService) List(arg0 context.Context, arg1 *v2.ListAuditEventRequest, arg2 ...grpc.CallOption) (*v2.ListAuditEventResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v2.ListAuditEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAuditEventServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockAuditEventServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAuditEventService)(nil).List), varargs...)
	return &MockAuditEventServiceListCall{Call: call}
}

// MockAuditEventServiceListCall wrap *gomock.Call
type MockAuditEventServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAuditEventServiceListCall) Return(arg0 *v2.ListAuditEventResponse, arg1 error) *MockAuditEventServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAuditEventServiceListCall) Do(f func(context.Context, *v2.ListAuditEventRequest, ...grpc.CallOption) (*v2.ListAuditEventResponse, error)) *MockAuditEventServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAuditEventServiceListCall) DoAndReturn(f func(context.Context, *v2.ListAuditEventRequest, ...grpc.CallOption) (*v2.ListAuditEventResponse, error)) *MockAuditEventServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
