// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/registry/v1/registry_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/registry/v1/registry_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/registry/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockRegistryService is a mock of RegistryService interface.
type MockRegistryService struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryServiceMockRecorder
}

// MockRegistryServiceMockRecorder is the mock recorder for MockRegistryService.
type MockRegistryServiceMockRecorder struct {
	mock *MockRegistryService
}

// NewMockRegistryService creates a new mock instance.
func NewMockRegistryService(ctrl *gomock.Controller) *MockRegistryService {
	mock := &MockRegistryService{ctrl: ctrl}
	mock.recorder = &MockRegistryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistryService) EXPECT() *MockRegistryServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRegistryService) Create(arg0 context.Context, arg1 *v10.CreateRegistryRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRegistryServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockRegistryServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRegistryService)(nil).Create), varargs...)
	return &MockRegistryServiceCreateCall{Call: call}
}

// MockRegistryServiceCreateCall wrap *gomock.Call
type MockRegistryServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRegistryServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockRegistryServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRegistryServiceCreateCall) Do(f func(context.Context, *v10.CreateRegistryRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRegistryServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRegistryServiceCreateCall) DoAndReturn(f func(context.Context, *v10.CreateRegistryRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRegistryServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockRegistryService) Delete(arg0 context.Context, arg1 *v10.DeleteRegistryRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRegistryServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockRegistryServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRegistryService)(nil).Delete), varargs...)
	return &MockRegistryServiceDeleteCall{Call: call}
}

// MockRegistryServiceDeleteCall wrap *gomock.Call
type MockRegistryServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRegistryServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockRegistryServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRegistryServiceDeleteCall) Do(f func(context.Context, *v10.DeleteRegistryRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRegistryServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRegistryServiceDeleteCall) DoAndReturn(f func(context.Context, *v10.DeleteRegistryRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRegistryServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockRegistryService) Filter(arg0 context.Context, arg1 *v10.ListRegistriesRequest, arg2 ...grpc.CallOption) iter.Seq2[*v10.Registry, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v10.Registry, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockRegistryServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockRegistryServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockRegistryService)(nil).Filter), varargs...)
	return &MockRegistryServiceFilterCall{Call: call}
}

// MockRegistryServiceFilterCall wrap *gomock.Call
type MockRegistryServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRegistryServiceFilterCall) Return(arg0 iter.Seq2[*v10.Registry, error]) *MockRegistryServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRegistryServiceFilterCall) Do(f func(context.Context, *v10.ListRegistriesRequest, ...grpc.CallOption) iter.Seq2[*v10.Registry, error]) *MockRegistryServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRegistryServiceFilterCall) DoAndReturn(f func(context.Context, *v10.ListRegistriesRequest, ...grpc.CallOption) iter.Seq2[*v10.Registry, error]) *MockRegistryServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockRegistryService) Get(arg0 context.Context, arg1 *v10.GetRegistryRequest, arg2 ...grpc.CallOption) (*v10.Registry, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.Registry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRegistryServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockRegistryServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRegistryService)(nil).Get), varargs...)
	return &MockRegistryServiceGetCall{Call: call}
}

// MockRegistryServiceGetCall wrap *gomock.Call
type MockRegistryServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRegistryServiceGetCall) Return(arg0 *v10.Registry, arg1 error) *MockRegistryServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRegistryServiceGetCall) Do(f func(context.Context, *v10.GetRegistryRequest, ...grpc.CallOption) (*v10.Registry, error)) *MockRegistryServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRegistryServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetRegistryRequest, ...grpc.CallOption) (*v10.Registry, error)) *MockRegistryServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockRegistryService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockRegistryServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockRegistryServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockRegistryService)(nil).GetOperation), varargs...)
	return &MockRegistryServiceGetOperationCall{Call: call}
}

// MockRegistryServiceGetOperationCall wrap *gomock.Call
type MockRegistryServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRegistryServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockRegistryServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRegistryServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRegistryServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRegistryServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRegistryServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockRegistryService) List(arg0 context.Context, arg1 *v10.ListRegistriesRequest, arg2 ...grpc.CallOption) (*v10.ListRegistriesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v10.ListRegistriesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRegistryServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockRegistryServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRegistryService)(nil).List), varargs...)
	return &MockRegistryServiceListCall{Call: call}
}

// MockRegistryServiceListCall wrap *gomock.Call
type MockRegistryServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRegistryServiceListCall) Return(arg0 *v10.ListRegistriesResponse, arg1 error) *MockRegistryServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRegistryServiceListCall) Do(f func(context.Context, *v10.ListRegistriesRequest, ...grpc.CallOption) (*v10.ListRegistriesResponse, error)) *MockRegistryServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRegistryServiceListCall) DoAndReturn(f func(context.Context, *v10.ListRegistriesRequest, ...grpc.CallOption) (*v10.ListRegistriesResponse, error)) *MockRegistryServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockRegistryService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockRegistryServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockRegistryServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockRegistryService)(nil).ListOperations), varargs...)
	return &MockRegistryServiceListOperationsCall{Call: call}
}

// MockRegistryServiceListOperationsCall wrap *gomock.Call
type MockRegistryServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRegistryServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockRegistryServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRegistryServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockRegistryServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRegistryServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockRegistryServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockRegistryService) Update(arg0 context.Context, arg1 *v10.UpdateRegistryRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRegistryServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockRegistryServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRegistryService)(nil).Update), varargs...)
	return &MockRegistryServiceUpdateCall{Call: call}
}

// MockRegistryServiceUpdateCall wrap *gomock.Call
type MockRegistryServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRegistryServiceUpdateCall) Return(arg0 operations.Operation, arg1 error) *MockRegistryServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRegistryServiceUpdateCall) Do(f func(context.Context, *v10.UpdateRegistryRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRegistryServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRegistryServiceUpdateCall) DoAndReturn(f func(context.Context, *v10.UpdateRegistryRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRegistryServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
