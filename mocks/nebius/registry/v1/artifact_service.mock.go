// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/registry/v1/artifact_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/registry/v1/artifact_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/registry/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockArtifactService is a mock of ArtifactService interface.
type MockArtifactService struct {
	ctrl     *gomock.Controller
	recorder *MockArtifactServiceMockRecorder
}

// MockArtifactServiceMockRecorder is the mock recorder for MockArtifactService.
type MockArtifactServiceMockRecorder struct {
	mock *MockArtifactService
}

// NewMockArtifactService creates a new mock instance.
func NewMockArtifactService(ctrl *gomock.Controller) *MockArtifactService {
	mock := &MockArtifactService{ctrl: ctrl}
	mock.recorder = &MockArtifactServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockArtifactService) EXPECT() *MockArtifactServiceMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockArtifactService) Delete(arg0 context.Context, arg1 *v10.DeleteArtifactRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockArtifactServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockArtifactServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockArtifactService)(nil).Delete), varargs...)
	return &MockArtifactServiceDeleteCall{Call: call}
}

// MockArtifactServiceDeleteCall wrap *gomock.Call
type MockArtifactServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockArtifactServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockArtifactServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockArtifactServiceDeleteCall) Do(f func(context.Context, *v10.DeleteArtifactRequest, ...grpc.CallOption) (operations.Operation, error)) *MockArtifactServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockArtifactServiceDeleteCall) DoAndReturn(f func(context.Context, *v10.DeleteArtifactRequest, ...grpc.CallOption) (operations.Operation, error)) *MockArtifactServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockArtifactService) Filter(arg0 context.Context, arg1 *v10.ListArtifactsRequest, arg2 ...grpc.CallOption) iter.Seq2[*v10.Artifact, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v10.Artifact, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockArtifactServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockArtifactServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockArtifactService)(nil).Filter), varargs...)
	return &MockArtifactServiceFilterCall{Call: call}
}

// MockArtifactServiceFilterCall wrap *gomock.Call
type MockArtifactServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockArtifactServiceFilterCall) Return(arg0 iter.Seq2[*v10.Artifact, error]) *MockArtifactServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockArtifactServiceFilterCall) Do(f func(context.Context, *v10.ListArtifactsRequest, ...grpc.CallOption) iter.Seq2[*v10.Artifact, error]) *MockArtifactServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockArtifactServiceFilterCall) DoAndReturn(f func(context.Context, *v10.ListArtifactsRequest, ...grpc.CallOption) iter.Seq2[*v10.Artifact, error]) *MockArtifactServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockArtifactService) Get(arg0 context.Context, arg1 *v10.GetArtifactRequest, arg2 ...grpc.CallOption) (*v10.Artifact, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.Artifact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockArtifactServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockArtifactServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockArtifactService)(nil).Get), varargs...)
	return &MockArtifactServiceGetCall{Call: call}
}

// MockArtifactServiceGetCall wrap *gomock.Call
type MockArtifactServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockArtifactServiceGetCall) Return(arg0 *v10.Artifact, arg1 error) *MockArtifactServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockArtifactServiceGetCall) Do(f func(context.Context, *v10.GetArtifactRequest, ...grpc.CallOption) (*v10.Artifact, error)) *MockArtifactServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockArtifactServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetArtifactRequest, ...grpc.CallOption) (*v10.Artifact, error)) *MockArtifactServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockArtifactService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockArtifactServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockArtifactServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockArtifactService)(nil).GetOperation), varargs...)
	return &MockArtifactServiceGetOperationCall{Call: call}
}

// MockArtifactServiceGetOperationCall wrap *gomock.Call
type MockArtifactServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockArtifactServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockArtifactServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockArtifactServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockArtifactServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockArtifactServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockArtifactServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockArtifactService) List(arg0 context.Context, arg1 *v10.ListArtifactsRequest, arg2 ...grpc.CallOption) (*v10.ListArtifactsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v10.ListArtifactsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockArtifactServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockArtifactServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockArtifactService)(nil).List), varargs...)
	return &MockArtifactServiceListCall{Call: call}
}

// MockArtifactServiceListCall wrap *gomock.Call
type MockArtifactServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockArtifactServiceListCall) Return(arg0 *v10.ListArtifactsResponse, arg1 error) *MockArtifactServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockArtifactServiceListCall) Do(f func(context.Context, *v10.ListArtifactsRequest, ...grpc.CallOption) (*v10.ListArtifactsResponse, error)) *MockArtifactServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockArtifactServiceListCall) DoAndReturn(f func(context.Context, *v10.ListArtifactsRequest, ...grpc.CallOption) (*v10.ListArtifactsResponse, error)) *MockArtifactServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockArtifactService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockArtifactServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockArtifactServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockArtifactService)(nil).ListOperations), varargs...)
	return &MockArtifactServiceListOperationsCall{Call: call}
}

// MockArtifactServiceListOperationsCall wrap *gomock.Call
type MockArtifactServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockArtifactServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockArtifactServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockArtifactServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockArtifactServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockArtifactServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockArtifactServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
