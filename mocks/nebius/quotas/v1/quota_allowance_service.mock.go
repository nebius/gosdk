// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/quotas/v1/quota_allowance_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/quotas/v1/quota_allowance_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	v1 "github.com/nebius/gosdk/proto/nebius/quotas/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockQuotaAllowanceService is a mock of QuotaAllowanceService interface.
type MockQuotaAllowanceService struct {
	ctrl     *gomock.Controller
	recorder *MockQuotaAllowanceServiceMockRecorder
}

// MockQuotaAllowanceServiceMockRecorder is the mock recorder for MockQuotaAllowanceService.
type MockQuotaAllowanceServiceMockRecorder struct {
	mock *MockQuotaAllowanceService
}

// NewMockQuotaAllowanceService creates a new mock instance.
func NewMockQuotaAllowanceService(ctrl *gomock.Controller) *MockQuotaAllowanceService {
	mock := &MockQuotaAllowanceService{ctrl: ctrl}
	mock.recorder = &MockQuotaAllowanceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuotaAllowanceService) EXPECT() *MockQuotaAllowanceServiceMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockQuotaAllowanceService) Filter(arg0 context.Context, arg1 *v1.ListQuotaAllowancesRequest, arg2 ...grpc.CallOption) iter.Seq2[*v1.QuotaAllowance, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v1.QuotaAllowance, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockQuotaAllowanceServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockQuotaAllowanceServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockQuotaAllowanceService)(nil).Filter), varargs...)
	return &MockQuotaAllowanceServiceFilterCall{Call: call}
}

// MockQuotaAllowanceServiceFilterCall wrap *gomock.Call
type MockQuotaAllowanceServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQuotaAllowanceServiceFilterCall) Return(arg0 iter.Seq2[*v1.QuotaAllowance, error]) *MockQuotaAllowanceServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQuotaAllowanceServiceFilterCall) Do(f func(context.Context, *v1.ListQuotaAllowancesRequest, ...grpc.CallOption) iter.Seq2[*v1.QuotaAllowance, error]) *MockQuotaAllowanceServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQuotaAllowanceServiceFilterCall) DoAndReturn(f func(context.Context, *v1.ListQuotaAllowancesRequest, ...grpc.CallOption) iter.Seq2[*v1.QuotaAllowance, error]) *MockQuotaAllowanceServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockQuotaAllowanceService) Get(arg0 context.Context, arg1 *v1.GetQuotaAllowanceRequest, arg2 ...grpc.CallOption) (*v1.QuotaAllowance, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1.QuotaAllowance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockQuotaAllowanceServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockQuotaAllowanceServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockQuotaAllowanceService)(nil).Get), varargs...)
	return &MockQuotaAllowanceServiceGetCall{Call: call}
}

// MockQuotaAllowanceServiceGetCall wrap *gomock.Call
type MockQuotaAllowanceServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQuotaAllowanceServiceGetCall) Return(arg0 *v1.QuotaAllowance, arg1 error) *MockQuotaAllowanceServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQuotaAllowanceServiceGetCall) Do(f func(context.Context, *v1.GetQuotaAllowanceRequest, ...grpc.CallOption) (*v1.QuotaAllowance, error)) *MockQuotaAllowanceServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQuotaAllowanceServiceGetCall) DoAndReturn(f func(context.Context, *v1.GetQuotaAllowanceRequest, ...grpc.CallOption) (*v1.QuotaAllowance, error)) *MockQuotaAllowanceServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockQuotaAllowanceService) GetByName(arg0 context.Context, arg1 *v1.GetByNameRequest, arg2 ...grpc.CallOption) (*v1.QuotaAllowance, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v1.QuotaAllowance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockQuotaAllowanceServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockQuotaAllowanceServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockQuotaAllowanceService)(nil).GetByName), varargs...)
	return &MockQuotaAllowanceServiceGetByNameCall{Call: call}
}

// MockQuotaAllowanceServiceGetByNameCall wrap *gomock.Call
type MockQuotaAllowanceServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQuotaAllowanceServiceGetByNameCall) Return(arg0 *v1.QuotaAllowance, arg1 error) *MockQuotaAllowanceServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQuotaAllowanceServiceGetByNameCall) Do(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v1.QuotaAllowance, error)) *MockQuotaAllowanceServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQuotaAllowanceServiceGetByNameCall) DoAndReturn(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v1.QuotaAllowance, error)) *MockQuotaAllowanceServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockQuotaAllowanceService) List(arg0 context.Context, arg1 *v1.ListQuotaAllowancesRequest, arg2 ...grpc.CallOption) (*v1.ListQuotaAllowancesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1.ListQuotaAllowancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockQuotaAllowanceServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockQuotaAllowanceServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockQuotaAllowanceService)(nil).List), varargs...)
	return &MockQuotaAllowanceServiceListCall{Call: call}
}

// MockQuotaAllowanceServiceListCall wrap *gomock.Call
type MockQuotaAllowanceServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockQuotaAllowanceServiceListCall) Return(arg0 *v1.ListQuotaAllowancesResponse, arg1 error) *MockQuotaAllowanceServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockQuotaAllowanceServiceListCall) Do(f func(context.Context, *v1.ListQuotaAllowancesRequest, ...grpc.CallOption) (*v1.ListQuotaAllowancesResponse, error)) *MockQuotaAllowanceServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockQuotaAllowanceServiceListCall) DoAndReturn(f func(context.Context, *v1.ListQuotaAllowancesRequest, ...grpc.CallOption) (*v1.ListQuotaAllowancesResponse, error)) *MockQuotaAllowanceServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
