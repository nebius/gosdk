// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/storage/v1alpha1/transfer_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/storage/v1alpha1/transfer_service.sdk.go -package v1alpha1 -typed
//

// Package v1alpha1 is a generated GoMock package.
package v1alpha1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v1alpha1 "github.com/nebius/gosdk/proto/nebius/storage/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTransferService is a mock of TransferService interface.
type MockTransferService struct {
	ctrl     *gomock.Controller
	recorder *MockTransferServiceMockRecorder
}

// MockTransferServiceMockRecorder is the mock recorder for MockTransferService.
type MockTransferServiceMockRecorder struct {
	mock *MockTransferService
}

// NewMockTransferService creates a new mock instance.
func NewMockTransferService(ctrl *gomock.Controller) *MockTransferService {
	mock := &MockTransferService{ctrl: ctrl}
	mock.recorder = &MockTransferServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransferService) EXPECT() *MockTransferServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTransferService) Create(arg0 context.Context, arg1 *v1alpha1.CreateTransferRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTransferServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockTransferServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTransferService)(nil).Create), varargs...)
	return &MockTransferServiceCreateCall{Call: call}
}

// MockTransferServiceCreateCall wrap *gomock.Call
type MockTransferServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockTransferServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferServiceCreateCall) Do(f func(context.Context, *v1alpha1.CreateTransferRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTransferServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferServiceCreateCall) DoAndReturn(f func(context.Context, *v1alpha1.CreateTransferRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTransferServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockTransferService) Delete(arg0 context.Context, arg1 *v1alpha1.DeleteTransferRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockTransferServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockTransferServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTransferService)(nil).Delete), varargs...)
	return &MockTransferServiceDeleteCall{Call: call}
}

// MockTransferServiceDeleteCall wrap *gomock.Call
type MockTransferServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockTransferServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferServiceDeleteCall) Do(f func(context.Context, *v1alpha1.DeleteTransferRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTransferServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferServiceDeleteCall) DoAndReturn(f func(context.Context, *v1alpha1.DeleteTransferRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTransferServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockTransferService) Filter(arg0 context.Context, arg1 *v1alpha1.ListTransfersRequest, arg2 ...grpc.CallOption) iter.Seq2[*v1alpha1.Transfer, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v1alpha1.Transfer, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockTransferServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockTransferServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockTransferService)(nil).Filter), varargs...)
	return &MockTransferServiceFilterCall{Call: call}
}

// MockTransferServiceFilterCall wrap *gomock.Call
type MockTransferServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferServiceFilterCall) Return(arg0 iter.Seq2[*v1alpha1.Transfer, error]) *MockTransferServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferServiceFilterCall) Do(f func(context.Context, *v1alpha1.ListTransfersRequest, ...grpc.CallOption) iter.Seq2[*v1alpha1.Transfer, error]) *MockTransferServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferServiceFilterCall) DoAndReturn(f func(context.Context, *v1alpha1.ListTransfersRequest, ...grpc.CallOption) iter.Seq2[*v1alpha1.Transfer, error]) *MockTransferServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockTransferService) Get(arg0 context.Context, arg1 *v1alpha1.GetTransferRequest, arg2 ...grpc.CallOption) (*v1alpha1.Transfer, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTransferServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockTransferServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTransferService)(nil).Get), varargs...)
	return &MockTransferServiceGetCall{Call: call}
}

// MockTransferServiceGetCall wrap *gomock.Call
type MockTransferServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferServiceGetCall) Return(arg0 *v1alpha1.Transfer, arg1 error) *MockTransferServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferServiceGetCall) Do(f func(context.Context, *v1alpha1.GetTransferRequest, ...grpc.CallOption) (*v1alpha1.Transfer, error)) *MockTransferServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferServiceGetCall) DoAndReturn(f func(context.Context, *v1alpha1.GetTransferRequest, ...grpc.CallOption) (*v1alpha1.Transfer, error)) *MockTransferServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockTransferService) GetByName(arg0 context.Context, arg1 *v1.GetByNameRequest, arg2 ...grpc.CallOption) (*v1alpha1.Transfer, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Transfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockTransferServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockTransferServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockTransferService)(nil).GetByName), varargs...)
	return &MockTransferServiceGetByNameCall{Call: call}
}

// MockTransferServiceGetByNameCall wrap *gomock.Call
type MockTransferServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferServiceGetByNameCall) Return(arg0 *v1alpha1.Transfer, arg1 error) *MockTransferServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferServiceGetByNameCall) Do(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v1alpha1.Transfer, error)) *MockTransferServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferServiceGetByNameCall) DoAndReturn(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v1alpha1.Transfer, error)) *MockTransferServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetIterationHistory mocks base method.
func (m *MockTransferService) GetIterationHistory(arg0 context.Context, arg1 *v1alpha1.GetIterationHistoryRequest, arg2 ...grpc.CallOption) (*v1alpha1.GetIterationHistoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIterationHistory", varargs...)
	ret0, _ := ret[0].(*v1alpha1.GetIterationHistoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIterationHistory indicates an expected call of GetIterationHistory.
func (mr *MockTransferServiceMockRecorder) GetIterationHistory(arg0, arg1 any, arg2 ...any) *MockTransferServiceGetIterationHistoryCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIterationHistory", reflect.TypeOf((*MockTransferService)(nil).GetIterationHistory), varargs...)
	return &MockTransferServiceGetIterationHistoryCall{Call: call}
}

// MockTransferServiceGetIterationHistoryCall wrap *gomock.Call
type MockTransferServiceGetIterationHistoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferServiceGetIterationHistoryCall) Return(arg0 *v1alpha1.GetIterationHistoryResponse, arg1 error) *MockTransferServiceGetIterationHistoryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferServiceGetIterationHistoryCall) Do(f func(context.Context, *v1alpha1.GetIterationHistoryRequest, ...grpc.CallOption) (*v1alpha1.GetIterationHistoryResponse, error)) *MockTransferServiceGetIterationHistoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferServiceGetIterationHistoryCall) DoAndReturn(f func(context.Context, *v1alpha1.GetIterationHistoryRequest, ...grpc.CallOption) (*v1alpha1.GetIterationHistoryResponse, error)) *MockTransferServiceGetIterationHistoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockTransferService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockTransferServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockTransferServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockTransferService)(nil).GetOperation), varargs...)
	return &MockTransferServiceGetOperationCall{Call: call}
}

// MockTransferServiceGetOperationCall wrap *gomock.Call
type MockTransferServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockTransferServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTransferServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTransferServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockTransferService) List(arg0 context.Context, arg1 *v1alpha1.ListTransfersRequest, arg2 ...grpc.CallOption) (*v1alpha1.ListTransfersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListTransfersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTransferServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockTransferServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTransferService)(nil).List), varargs...)
	return &MockTransferServiceListCall{Call: call}
}

// MockTransferServiceListCall wrap *gomock.Call
type MockTransferServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferServiceListCall) Return(arg0 *v1alpha1.ListTransfersResponse, arg1 error) *MockTransferServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferServiceListCall) Do(f func(context.Context, *v1alpha1.ListTransfersRequest, ...grpc.CallOption) (*v1alpha1.ListTransfersResponse, error)) *MockTransferServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferServiceListCall) DoAndReturn(f func(context.Context, *v1alpha1.ListTransfersRequest, ...grpc.CallOption) (*v1alpha1.ListTransfersResponse, error)) *MockTransferServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockTransferService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockTransferServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockTransferServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockTransferService)(nil).ListOperations), varargs...)
	return &MockTransferServiceListOperationsCall{Call: call}
}

// MockTransferServiceListOperationsCall wrap *gomock.Call
type MockTransferServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockTransferServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockTransferServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockTransferServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Resume mocks base method.
func (m *MockTransferService) Resume(arg0 context.Context, arg1 *v1alpha1.ResumeTransferRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Resume", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resume indicates an expected call of Resume.
func (mr *MockTransferServiceMockRecorder) Resume(arg0, arg1 any, arg2 ...any) *MockTransferServiceResumeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resume", reflect.TypeOf((*MockTransferService)(nil).Resume), varargs...)
	return &MockTransferServiceResumeCall{Call: call}
}

// MockTransferServiceResumeCall wrap *gomock.Call
type MockTransferServiceResumeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferServiceResumeCall) Return(arg0 operations.Operation, arg1 error) *MockTransferServiceResumeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferServiceResumeCall) Do(f func(context.Context, *v1alpha1.ResumeTransferRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTransferServiceResumeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferServiceResumeCall) DoAndReturn(f func(context.Context, *v1alpha1.ResumeTransferRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTransferServiceResumeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stop mocks base method.
func (m *MockTransferService) Stop(arg0 context.Context, arg1 *v1alpha1.StopTransferRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stop", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockTransferServiceMockRecorder) Stop(arg0, arg1 any, arg2 ...any) *MockTransferServiceStopCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockTransferService)(nil).Stop), varargs...)
	return &MockTransferServiceStopCall{Call: call}
}

// MockTransferServiceStopCall wrap *gomock.Call
type MockTransferServiceStopCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferServiceStopCall) Return(arg0 operations.Operation, arg1 error) *MockTransferServiceStopCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferServiceStopCall) Do(f func(context.Context, *v1alpha1.StopTransferRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTransferServiceStopCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferServiceStopCall) DoAndReturn(f func(context.Context, *v1alpha1.StopTransferRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTransferServiceStopCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockTransferService) Update(arg0 context.Context, arg1 *v1alpha1.UpdateTransferRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTransferServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockTransferServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTransferService)(nil).Update), varargs...)
	return &MockTransferServiceUpdateCall{Call: call}
}

// MockTransferServiceUpdateCall wrap *gomock.Call
type MockTransferServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTransferServiceUpdateCall) Return(arg0 operations.Operation, arg1 error) *MockTransferServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTransferServiceUpdateCall) Do(f func(context.Context, *v1alpha1.UpdateTransferRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTransferServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTransferServiceUpdateCall) DoAndReturn(f func(context.Context, *v1alpha1.UpdateTransferRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTransferServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
