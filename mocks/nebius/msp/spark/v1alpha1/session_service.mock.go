// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/msp/spark/v1alpha1/session_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/msp/spark/v1alpha1/session_service.sdk.go -package v1alpha1 -typed
//

// Package v1alpha1 is a generated GoMock package.
package v1alpha1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v1alpha1 "github.com/nebius/gosdk/proto/nebius/msp/spark/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSessionService is a mock of SessionService interface.
type MockSessionService struct {
	ctrl     *gomock.Controller
	recorder *MockSessionServiceMockRecorder
}

// MockSessionServiceMockRecorder is the mock recorder for MockSessionService.
type MockSessionServiceMockRecorder struct {
	mock *MockSessionService
}

// NewMockSessionService creates a new mock instance.
func NewMockSessionService(ctrl *gomock.Controller) *MockSessionService {
	mock := &MockSessionService{ctrl: ctrl}
	mock.recorder = &MockSessionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionService) EXPECT() *MockSessionServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSessionService) Create(arg0 context.Context, arg1 *v1alpha1.CreateSessionRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessionServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockSessionServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionService)(nil).Create), varargs...)
	return &MockSessionServiceCreateCall{Call: call}
}

// MockSessionServiceCreateCall wrap *gomock.Call
type MockSessionServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockSessionServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionServiceCreateCall) Do(f func(context.Context, *v1alpha1.CreateSessionRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSessionServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionServiceCreateCall) DoAndReturn(f func(context.Context, *v1alpha1.CreateSessionRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSessionServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockSessionService) Delete(arg0 context.Context, arg1 *v1alpha1.DeleteSessionRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSessionServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockSessionServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionService)(nil).Delete), varargs...)
	return &MockSessionServiceDeleteCall{Call: call}
}

// MockSessionServiceDeleteCall wrap *gomock.Call
type MockSessionServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockSessionServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionServiceDeleteCall) Do(f func(context.Context, *v1alpha1.DeleteSessionRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSessionServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionServiceDeleteCall) DoAndReturn(f func(context.Context, *v1alpha1.DeleteSessionRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSessionServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockSessionService) Filter(arg0 context.Context, arg1 *v1alpha1.ListSessionsRequest, arg2 ...grpc.CallOption) iter.Seq2[*v1alpha1.Session, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v1alpha1.Session, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockSessionServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockSessionServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockSessionService)(nil).Filter), varargs...)
	return &MockSessionServiceFilterCall{Call: call}
}

// MockSessionServiceFilterCall wrap *gomock.Call
type MockSessionServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionServiceFilterCall) Return(arg0 iter.Seq2[*v1alpha1.Session, error]) *MockSessionServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionServiceFilterCall) Do(f func(context.Context, *v1alpha1.ListSessionsRequest, ...grpc.CallOption) iter.Seq2[*v1alpha1.Session, error]) *MockSessionServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionServiceFilterCall) DoAndReturn(f func(context.Context, *v1alpha1.ListSessionsRequest, ...grpc.CallOption) iter.Seq2[*v1alpha1.Session, error]) *MockSessionServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockSessionService) Get(arg0 context.Context, arg1 *v1alpha1.GetSessionRequest, arg2 ...grpc.CallOption) (*v1alpha1.Session, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSessionServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockSessionServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSessionService)(nil).Get), varargs...)
	return &MockSessionServiceGetCall{Call: call}
}

// MockSessionServiceGetCall wrap *gomock.Call
type MockSessionServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionServiceGetCall) Return(arg0 *v1alpha1.Session, arg1 error) *MockSessionServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionServiceGetCall) Do(f func(context.Context, *v1alpha1.GetSessionRequest, ...grpc.CallOption) (*v1alpha1.Session, error)) *MockSessionServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionServiceGetCall) DoAndReturn(f func(context.Context, *v1alpha1.GetSessionRequest, ...grpc.CallOption) (*v1alpha1.Session, error)) *MockSessionServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockSessionService) GetByName(arg0 context.Context, arg1 *v1alpha1.GetSessionByNameRequest, arg2 ...grpc.CallOption) (*v1alpha1.Session, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockSessionServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockSessionServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockSessionService)(nil).GetByName), varargs...)
	return &MockSessionServiceGetByNameCall{Call: call}
}

// MockSessionServiceGetByNameCall wrap *gomock.Call
type MockSessionServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionServiceGetByNameCall) Return(arg0 *v1alpha1.Session, arg1 error) *MockSessionServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionServiceGetByNameCall) Do(f func(context.Context, *v1alpha1.GetSessionByNameRequest, ...grpc.CallOption) (*v1alpha1.Session, error)) *MockSessionServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionServiceGetByNameCall) DoAndReturn(f func(context.Context, *v1alpha1.GetSessionByNameRequest, ...grpc.CallOption) (*v1alpha1.Session, error)) *MockSessionServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockSessionService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockSessionServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockSessionServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockSessionService)(nil).GetOperation), varargs...)
	return &MockSessionServiceGetOperationCall{Call: call}
}

// MockSessionServiceGetOperationCall wrap *gomock.Call
type MockSessionServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockSessionServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSessionServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSessionServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockSessionService) List(arg0 context.Context, arg1 *v1alpha1.ListSessionsRequest, arg2 ...grpc.CallOption) (*v1alpha1.ListSessionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListSessionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSessionServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockSessionServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSessionService)(nil).List), varargs...)
	return &MockSessionServiceListCall{Call: call}
}

// MockSessionServiceListCall wrap *gomock.Call
type MockSessionServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionServiceListCall) Return(arg0 *v1alpha1.ListSessionsResponse, arg1 error) *MockSessionServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionServiceListCall) Do(f func(context.Context, *v1alpha1.ListSessionsRequest, ...grpc.CallOption) (*v1alpha1.ListSessionsResponse, error)) *MockSessionServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionServiceListCall) DoAndReturn(f func(context.Context, *v1alpha1.ListSessionsRequest, ...grpc.CallOption) (*v1alpha1.ListSessionsResponse, error)) *MockSessionServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockSessionService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockSessionServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockSessionServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockSessionService)(nil).ListOperations), varargs...)
	return &MockSessionServiceListOperationsCall{Call: call}
}

// MockSessionServiceListOperationsCall wrap *gomock.Call
type MockSessionServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSessionServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockSessionServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSessionServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockSessionServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSessionServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockSessionServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
