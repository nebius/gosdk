// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/msp/spark/v1alpha1/job_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/msp/spark/v1alpha1/job_service.sdk.go -package v1alpha1 -typed
//

// Package v1alpha1 is a generated GoMock package.
package v1alpha1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v1alpha1 "github.com/nebius/gosdk/proto/nebius/msp/spark/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockJobService is a mock of JobService interface.
type MockJobService struct {
	ctrl     *gomock.Controller
	recorder *MockJobServiceMockRecorder
}

// MockJobServiceMockRecorder is the mock recorder for MockJobService.
type MockJobServiceMockRecorder struct {
	mock *MockJobService
}

// NewMockJobService creates a new mock instance.
func NewMockJobService(ctrl *gomock.Controller) *MockJobService {
	mock := &MockJobService{ctrl: ctrl}
	mock.recorder = &MockJobServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobService) EXPECT() *MockJobServiceMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockJobService) Cancel(arg0 context.Context, arg1 *v1alpha1.CancelJobRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Cancel", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel.
func (mr *MockJobServiceMockRecorder) Cancel(arg0, arg1 any, arg2 ...any) *MockJobServiceCancelCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockJobService)(nil).Cancel), varargs...)
	return &MockJobServiceCancelCall{Call: call}
}

// MockJobServiceCancelCall wrap *gomock.Call
type MockJobServiceCancelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobServiceCancelCall) Return(arg0 operations.Operation, arg1 error) *MockJobServiceCancelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobServiceCancelCall) Do(f func(context.Context, *v1alpha1.CancelJobRequest, ...grpc.CallOption) (operations.Operation, error)) *MockJobServiceCancelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobServiceCancelCall) DoAndReturn(f func(context.Context, *v1alpha1.CancelJobRequest, ...grpc.CallOption) (operations.Operation, error)) *MockJobServiceCancelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockJobService) Create(arg0 context.Context, arg1 *v1alpha1.CreateJobRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockJobServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockJobServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockJobService)(nil).Create), varargs...)
	return &MockJobServiceCreateCall{Call: call}
}

// MockJobServiceCreateCall wrap *gomock.Call
type MockJobServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockJobServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobServiceCreateCall) Do(f func(context.Context, *v1alpha1.CreateJobRequest, ...grpc.CallOption) (operations.Operation, error)) *MockJobServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobServiceCreateCall) DoAndReturn(f func(context.Context, *v1alpha1.CreateJobRequest, ...grpc.CallOption) (operations.Operation, error)) *MockJobServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockJobService) Filter(arg0 context.Context, arg1 *v1alpha1.ListJobsRequest, arg2 ...grpc.CallOption) iter.Seq2[*v1alpha1.Job, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v1alpha1.Job, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockJobServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockJobServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockJobService)(nil).Filter), varargs...)
	return &MockJobServiceFilterCall{Call: call}
}

// MockJobServiceFilterCall wrap *gomock.Call
type MockJobServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobServiceFilterCall) Return(arg0 iter.Seq2[*v1alpha1.Job, error]) *MockJobServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobServiceFilterCall) Do(f func(context.Context, *v1alpha1.ListJobsRequest, ...grpc.CallOption) iter.Seq2[*v1alpha1.Job, error]) *MockJobServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobServiceFilterCall) DoAndReturn(f func(context.Context, *v1alpha1.ListJobsRequest, ...grpc.CallOption) iter.Seq2[*v1alpha1.Job, error]) *MockJobServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockJobService) Get(arg0 context.Context, arg1 *v1alpha1.GetJobRequest, arg2 ...grpc.CallOption) (*v1alpha1.Job, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockJobServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockJobServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockJobService)(nil).Get), varargs...)
	return &MockJobServiceGetCall{Call: call}
}

// MockJobServiceGetCall wrap *gomock.Call
type MockJobServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobServiceGetCall) Return(arg0 *v1alpha1.Job, arg1 error) *MockJobServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobServiceGetCall) Do(f func(context.Context, *v1alpha1.GetJobRequest, ...grpc.CallOption) (*v1alpha1.Job, error)) *MockJobServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobServiceGetCall) DoAndReturn(f func(context.Context, *v1alpha1.GetJobRequest, ...grpc.CallOption) (*v1alpha1.Job, error)) *MockJobServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockJobService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockJobServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockJobServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockJobService)(nil).GetOperation), varargs...)
	return &MockJobServiceGetOperationCall{Call: call}
}

// MockJobServiceGetOperationCall wrap *gomock.Call
type MockJobServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockJobServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockJobServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockJobServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockJobService) List(arg0 context.Context, arg1 *v1alpha1.ListJobsRequest, arg2 ...grpc.CallOption) (*v1alpha1.ListJobsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListJobsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockJobServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockJobServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockJobService)(nil).List), varargs...)
	return &MockJobServiceListCall{Call: call}
}

// MockJobServiceListCall wrap *gomock.Call
type MockJobServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobServiceListCall) Return(arg0 *v1alpha1.ListJobsResponse, arg1 error) *MockJobServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobServiceListCall) Do(f func(context.Context, *v1alpha1.ListJobsRequest, ...grpc.CallOption) (*v1alpha1.ListJobsResponse, error)) *MockJobServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobServiceListCall) DoAndReturn(f func(context.Context, *v1alpha1.ListJobsRequest, ...grpc.CallOption) (*v1alpha1.ListJobsResponse, error)) *MockJobServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockJobService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockJobServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockJobServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockJobService)(nil).ListOperations), varargs...)
	return &MockJobServiceListOperationsCall{Call: call}
}

// MockJobServiceListOperationsCall wrap *gomock.Call
type MockJobServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockJobServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockJobServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockJobServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockJobServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockJobServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockJobServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
