// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/msp/serverless/v1alpha1/endpoint_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/msp/serverless/v1alpha1/endpoint_service.sdk.go -package v1alpha1 -typed
//

// Package v1alpha1 is a generated GoMock package.
package v1alpha1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v1alpha1 "github.com/nebius/gosdk/proto/nebius/msp/serverless/v1alpha1"
	v1alpha10 "github.com/nebius/gosdk/proto/nebius/msp/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockEndpointService is a mock of EndpointService interface.
type MockEndpointService struct {
	ctrl     *gomock.Controller
	recorder *MockEndpointServiceMockRecorder
}

// MockEndpointServiceMockRecorder is the mock recorder for MockEndpointService.
type MockEndpointServiceMockRecorder struct {
	mock *MockEndpointService
}

// NewMockEndpointService creates a new mock instance.
func NewMockEndpointService(ctrl *gomock.Controller) *MockEndpointService {
	mock := &MockEndpointService{ctrl: ctrl}
	mock.recorder = &MockEndpointServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEndpointService) EXPECT() *MockEndpointServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEndpointService) Create(arg0 context.Context, arg1 *v1alpha1.CreateEndpointRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockEndpointServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockEndpointServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEndpointService)(nil).Create), varargs...)
	return &MockEndpointServiceCreateCall{Call: call}
}

// MockEndpointServiceCreateCall wrap *gomock.Call
type MockEndpointServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEndpointServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockEndpointServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEndpointServiceCreateCall) Do(f func(context.Context, *v1alpha1.CreateEndpointRequest, ...grpc.CallOption) (operations.Operation, error)) *MockEndpointServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEndpointServiceCreateCall) DoAndReturn(f func(context.Context, *v1alpha1.CreateEndpointRequest, ...grpc.CallOption) (operations.Operation, error)) *MockEndpointServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockEndpointService) Delete(arg0 context.Context, arg1 *v1alpha10.DeleteRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockEndpointServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockEndpointServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockEndpointService)(nil).Delete), varargs...)
	return &MockEndpointServiceDeleteCall{Call: call}
}

// MockEndpointServiceDeleteCall wrap *gomock.Call
type MockEndpointServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEndpointServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockEndpointServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEndpointServiceDeleteCall) Do(f func(context.Context, *v1alpha10.DeleteRequest, ...grpc.CallOption) (operations.Operation, error)) *MockEndpointServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEndpointServiceDeleteCall) DoAndReturn(f func(context.Context, *v1alpha10.DeleteRequest, ...grpc.CallOption) (operations.Operation, error)) *MockEndpointServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockEndpointService) Filter(arg0 context.Context, arg1 *v1alpha10.ListRequest, arg2 ...grpc.CallOption) iter.Seq2[*v1alpha1.Endpoint, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v1alpha1.Endpoint, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockEndpointServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockEndpointServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockEndpointService)(nil).Filter), varargs...)
	return &MockEndpointServiceFilterCall{Call: call}
}

// MockEndpointServiceFilterCall wrap *gomock.Call
type MockEndpointServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEndpointServiceFilterCall) Return(arg0 iter.Seq2[*v1alpha1.Endpoint, error]) *MockEndpointServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEndpointServiceFilterCall) Do(f func(context.Context, *v1alpha10.ListRequest, ...grpc.CallOption) iter.Seq2[*v1alpha1.Endpoint, error]) *MockEndpointServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEndpointServiceFilterCall) DoAndReturn(f func(context.Context, *v1alpha10.ListRequest, ...grpc.CallOption) iter.Seq2[*v1alpha1.Endpoint, error]) *MockEndpointServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockEndpointService) Get(arg0 context.Context, arg1 *v1alpha10.GetRequest, arg2 ...grpc.CallOption) (*v1alpha1.Endpoint, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEndpointServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockEndpointServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEndpointService)(nil).Get), varargs...)
	return &MockEndpointServiceGetCall{Call: call}
}

// MockEndpointServiceGetCall wrap *gomock.Call
type MockEndpointServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEndpointServiceGetCall) Return(arg0 *v1alpha1.Endpoint, arg1 error) *MockEndpointServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEndpointServiceGetCall) Do(f func(context.Context, *v1alpha10.GetRequest, ...grpc.CallOption) (*v1alpha1.Endpoint, error)) *MockEndpointServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEndpointServiceGetCall) DoAndReturn(f func(context.Context, *v1alpha10.GetRequest, ...grpc.CallOption) (*v1alpha1.Endpoint, error)) *MockEndpointServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockEndpointService) GetByName(arg0 context.Context, arg1 *v1alpha10.GetByNameRequest, arg2 ...grpc.CallOption) (*v1alpha1.Endpoint, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockEndpointServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockEndpointServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockEndpointService)(nil).GetByName), varargs...)
	return &MockEndpointServiceGetByNameCall{Call: call}
}

// MockEndpointServiceGetByNameCall wrap *gomock.Call
type MockEndpointServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEndpointServiceGetByNameCall) Return(arg0 *v1alpha1.Endpoint, arg1 error) *MockEndpointServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEndpointServiceGetByNameCall) Do(f func(context.Context, *v1alpha10.GetByNameRequest, ...grpc.CallOption) (*v1alpha1.Endpoint, error)) *MockEndpointServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEndpointServiceGetByNameCall) DoAndReturn(f func(context.Context, *v1alpha10.GetByNameRequest, ...grpc.CallOption) (*v1alpha1.Endpoint, error)) *MockEndpointServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockEndpointService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockEndpointServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockEndpointServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockEndpointService)(nil).GetOperation), varargs...)
	return &MockEndpointServiceGetOperationCall{Call: call}
}

// MockEndpointServiceGetOperationCall wrap *gomock.Call
type MockEndpointServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEndpointServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockEndpointServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEndpointServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockEndpointServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEndpointServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockEndpointServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockEndpointService) List(arg0 context.Context, arg1 *v1alpha10.ListRequest, arg2 ...grpc.CallOption) (*v1alpha1.ListEndpointsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListEndpointsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockEndpointServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockEndpointServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockEndpointService)(nil).List), varargs...)
	return &MockEndpointServiceListCall{Call: call}
}

// MockEndpointServiceListCall wrap *gomock.Call
type MockEndpointServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEndpointServiceListCall) Return(arg0 *v1alpha1.ListEndpointsResponse, arg1 error) *MockEndpointServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEndpointServiceListCall) Do(f func(context.Context, *v1alpha10.ListRequest, ...grpc.CallOption) (*v1alpha1.ListEndpointsResponse, error)) *MockEndpointServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEndpointServiceListCall) DoAndReturn(f func(context.Context, *v1alpha10.ListRequest, ...grpc.CallOption) (*v1alpha1.ListEndpointsResponse, error)) *MockEndpointServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockEndpointService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockEndpointServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockEndpointServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockEndpointService)(nil).ListOperations), varargs...)
	return &MockEndpointServiceListOperationsCall{Call: call}
}

// MockEndpointServiceListOperationsCall wrap *gomock.Call
type MockEndpointServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEndpointServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockEndpointServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEndpointServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockEndpointServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEndpointServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockEndpointServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Start mocks base method.
func (m *MockEndpointService) Start(arg0 context.Context, arg1 *v1alpha10.StartRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockEndpointServiceMockRecorder) Start(arg0, arg1 any, arg2 ...any) *MockEndpointServiceStartCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockEndpointService)(nil).Start), varargs...)
	return &MockEndpointServiceStartCall{Call: call}
}

// MockEndpointServiceStartCall wrap *gomock.Call
type MockEndpointServiceStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEndpointServiceStartCall) Return(arg0 operations.Operation, arg1 error) *MockEndpointServiceStartCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEndpointServiceStartCall) Do(f func(context.Context, *v1alpha10.StartRequest, ...grpc.CallOption) (operations.Operation, error)) *MockEndpointServiceStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEndpointServiceStartCall) DoAndReturn(f func(context.Context, *v1alpha10.StartRequest, ...grpc.CallOption) (operations.Operation, error)) *MockEndpointServiceStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stop mocks base method.
func (m *MockEndpointService) Stop(arg0 context.Context, arg1 *v1alpha10.StopRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stop", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockEndpointServiceMockRecorder) Stop(arg0, arg1 any, arg2 ...any) *MockEndpointServiceStopCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockEndpointService)(nil).Stop), varargs...)
	return &MockEndpointServiceStopCall{Call: call}
}

// MockEndpointServiceStopCall wrap *gomock.Call
type MockEndpointServiceStopCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockEndpointServiceStopCall) Return(arg0 operations.Operation, arg1 error) *MockEndpointServiceStopCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockEndpointServiceStopCall) Do(f func(context.Context, *v1alpha10.StopRequest, ...grpc.CallOption) (operations.Operation, error)) *MockEndpointServiceStopCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockEndpointServiceStopCall) DoAndReturn(f func(context.Context, *v1alpha10.StopRequest, ...grpc.CallOption) (operations.Operation, error)) *MockEndpointServiceStopCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
