// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/msp/v1alpha1/resource/preset_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/msp/v1alpha1/resource/preset_service.sdk.go -package resource -typed
//

// Package resource is a generated GoMock package.
package resource

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	resource "github.com/nebius/gosdk/proto/nebius/msp/v1alpha1/resource"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPresetService is a mock of PresetService interface.
type MockPresetService struct {
	ctrl     *gomock.Controller
	recorder *MockPresetServiceMockRecorder
}

// MockPresetServiceMockRecorder is the mock recorder for MockPresetService.
type MockPresetServiceMockRecorder struct {
	mock *MockPresetService
}

// NewMockPresetService creates a new mock instance.
func NewMockPresetService(ctrl *gomock.Controller) *MockPresetService {
	mock := &MockPresetService{ctrl: ctrl}
	mock.recorder = &MockPresetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPresetService) EXPECT() *MockPresetServiceMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockPresetService) Filter(arg0 context.Context, arg1 *resource.ListPresetsRequest, arg2 ...grpc.CallOption) iter.Seq2[*resource.Preset, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*resource.Preset, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockPresetServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockPresetServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockPresetService)(nil).Filter), varargs...)
	return &MockPresetServiceFilterCall{Call: call}
}

// MockPresetServiceFilterCall wrap *gomock.Call
type MockPresetServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPresetServiceFilterCall) Return(arg0 iter.Seq2[*resource.Preset, error]) *MockPresetServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPresetServiceFilterCall) Do(f func(context.Context, *resource.ListPresetsRequest, ...grpc.CallOption) iter.Seq2[*resource.Preset, error]) *MockPresetServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPresetServiceFilterCall) DoAndReturn(f func(context.Context, *resource.ListPresetsRequest, ...grpc.CallOption) iter.Seq2[*resource.Preset, error]) *MockPresetServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockPresetService) List(arg0 context.Context, arg1 *resource.ListPresetsRequest, arg2 ...grpc.CallOption) (*resource.ListPresetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*resource.ListPresetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPresetServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockPresetServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPresetService)(nil).List), varargs...)
	return &MockPresetServiceListCall{Call: call}
}

// MockPresetServiceListCall wrap *gomock.Call
type MockPresetServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPresetServiceListCall) Return(arg0 *resource.ListPresetsResponse, arg1 error) *MockPresetServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPresetServiceListCall) Do(f func(context.Context, *resource.ListPresetsRequest, ...grpc.CallOption) (*resource.ListPresetsResponse, error)) *MockPresetServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPresetServiceListCall) DoAndReturn(f func(context.Context, *resource.ListPresetsRequest, ...grpc.CallOption) (*resource.ListPresetsResponse, error)) *MockPresetServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
