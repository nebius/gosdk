// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/msp/postgresql/v1alpha1/cluster_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/msp/postgresql/v1alpha1/cluster_service.sdk.go -package v1alpha1 -typed
//

// Package v1alpha1 is a generated GoMock package.
package v1alpha1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	alphaops "github.com/nebius/gosdk/operations/alphaops"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v1alpha1 "github.com/nebius/gosdk/proto/nebius/common/v1alpha1"
	v1alpha10 "github.com/nebius/gosdk/proto/nebius/msp/postgresql/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockClusterService is a mock of ClusterService interface.
type MockClusterService struct {
	ctrl     *gomock.Controller
	recorder *MockClusterServiceMockRecorder
}

// MockClusterServiceMockRecorder is the mock recorder for MockClusterService.
type MockClusterServiceMockRecorder struct {
	mock *MockClusterService
}

// NewMockClusterService creates a new mock instance.
func NewMockClusterService(ctrl *gomock.Controller) *MockClusterService {
	mock := &MockClusterService{ctrl: ctrl}
	mock.recorder = &MockClusterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClusterService) EXPECT() *MockClusterServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockClusterService) Create(arg0 context.Context, arg1 *v1alpha10.CreateClusterRequest, arg2 ...grpc.CallOption) (*alphaops.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*alphaops.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockClusterServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockClusterServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockClusterService)(nil).Create), varargs...)
	return &MockClusterServiceCreateCall{Call: call}
}

// MockClusterServiceCreateCall wrap *gomock.Call
type MockClusterServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterServiceCreateCall) Return(arg0 *alphaops.Operation, arg1 error) *MockClusterServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterServiceCreateCall) Do(f func(context.Context, *v1alpha10.CreateClusterRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockClusterServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterServiceCreateCall) DoAndReturn(f func(context.Context, *v1alpha10.CreateClusterRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockClusterServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockClusterService) Delete(arg0 context.Context, arg1 *v1alpha10.DeleteClusterRequest, arg2 ...grpc.CallOption) (*alphaops.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*alphaops.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockClusterServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockClusterServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockClusterService)(nil).Delete), varargs...)
	return &MockClusterServiceDeleteCall{Call: call}
}

// MockClusterServiceDeleteCall wrap *gomock.Call
type MockClusterServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterServiceDeleteCall) Return(arg0 *alphaops.Operation, arg1 error) *MockClusterServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterServiceDeleteCall) Do(f func(context.Context, *v1alpha10.DeleteClusterRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockClusterServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterServiceDeleteCall) DoAndReturn(f func(context.Context, *v1alpha10.DeleteClusterRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockClusterServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockClusterService) Filter(arg0 context.Context, arg1 *v1alpha10.ListClustersRequest, arg2 ...grpc.CallOption) iter.Seq2[*v1alpha10.Cluster, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v1alpha10.Cluster, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockClusterServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockClusterServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockClusterService)(nil).Filter), varargs...)
	return &MockClusterServiceFilterCall{Call: call}
}

// MockClusterServiceFilterCall wrap *gomock.Call
type MockClusterServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterServiceFilterCall) Return(arg0 iter.Seq2[*v1alpha10.Cluster, error]) *MockClusterServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterServiceFilterCall) Do(f func(context.Context, *v1alpha10.ListClustersRequest, ...grpc.CallOption) iter.Seq2[*v1alpha10.Cluster, error]) *MockClusterServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterServiceFilterCall) DoAndReturn(f func(context.Context, *v1alpha10.ListClustersRequest, ...grpc.CallOption) iter.Seq2[*v1alpha10.Cluster, error]) *MockClusterServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockClusterService) Get(arg0 context.Context, arg1 *v1alpha10.GetClusterRequest, arg2 ...grpc.CallOption) (*v1alpha10.Cluster, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1alpha10.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClusterServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockClusterServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClusterService)(nil).Get), varargs...)
	return &MockClusterServiceGetCall{Call: call}
}

// MockClusterServiceGetCall wrap *gomock.Call
type MockClusterServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterServiceGetCall) Return(arg0 *v1alpha10.Cluster, arg1 error) *MockClusterServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterServiceGetCall) Do(f func(context.Context, *v1alpha10.GetClusterRequest, ...grpc.CallOption) (*v1alpha10.Cluster, error)) *MockClusterServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterServiceGetCall) DoAndReturn(f func(context.Context, *v1alpha10.GetClusterRequest, ...grpc.CallOption) (*v1alpha10.Cluster, error)) *MockClusterServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockClusterService) GetByName(arg0 context.Context, arg1 *v1.GetByNameRequest, arg2 ...grpc.CallOption) (*v1alpha10.Cluster, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v1alpha10.Cluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockClusterServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockClusterServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockClusterService)(nil).GetByName), varargs...)
	return &MockClusterServiceGetByNameCall{Call: call}
}

// MockClusterServiceGetByNameCall wrap *gomock.Call
type MockClusterServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterServiceGetByNameCall) Return(arg0 *v1alpha10.Cluster, arg1 error) *MockClusterServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterServiceGetByNameCall) Do(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v1alpha10.Cluster, error)) *MockClusterServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterServiceGetByNameCall) DoAndReturn(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v1alpha10.Cluster, error)) *MockClusterServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockClusterService) GetOperation(arg0 context.Context, arg1 *v1alpha1.GetOperationRequest, arg2 ...grpc.CallOption) (*alphaops.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(*alphaops.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockClusterServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockClusterServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockClusterService)(nil).GetOperation), varargs...)
	return &MockClusterServiceGetOperationCall{Call: call}
}

// MockClusterServiceGetOperationCall wrap *gomock.Call
type MockClusterServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterServiceGetOperationCall) Return(arg0 *alphaops.Operation, arg1 error) *MockClusterServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterServiceGetOperationCall) Do(f func(context.Context, *v1alpha1.GetOperationRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockClusterServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1alpha1.GetOperationRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockClusterServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockClusterService) List(arg0 context.Context, arg1 *v1alpha10.ListClustersRequest, arg2 ...grpc.CallOption) (*v1alpha10.ListClustersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1alpha10.ListClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClusterServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockClusterServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClusterService)(nil).List), varargs...)
	return &MockClusterServiceListCall{Call: call}
}

// MockClusterServiceListCall wrap *gomock.Call
type MockClusterServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterServiceListCall) Return(arg0 *v1alpha10.ListClustersResponse, arg1 error) *MockClusterServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterServiceListCall) Do(f func(context.Context, *v1alpha10.ListClustersRequest, ...grpc.CallOption) (*v1alpha10.ListClustersResponse, error)) *MockClusterServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterServiceListCall) DoAndReturn(f func(context.Context, *v1alpha10.ListClustersRequest, ...grpc.CallOption) (*v1alpha10.ListClustersResponse, error)) *MockClusterServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockClusterService) ListOperations(arg0 context.Context, arg1 *v1alpha1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1alpha1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockClusterServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockClusterServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockClusterService)(nil).ListOperations), varargs...)
	return &MockClusterServiceListOperationsCall{Call: call}
}

// MockClusterServiceListOperationsCall wrap *gomock.Call
type MockClusterServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterServiceListOperationsCall) Return(arg0 *v1alpha1.ListOperationsResponse, arg1 error) *MockClusterServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterServiceListOperationsCall) Do(f func(context.Context, *v1alpha1.ListOperationsRequest, ...grpc.CallOption) (*v1alpha1.ListOperationsResponse, error)) *MockClusterServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1alpha1.ListOperationsRequest, ...grpc.CallOption) (*v1alpha1.ListOperationsResponse, error)) *MockClusterServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockClusterService) Update(arg0 context.Context, arg1 *v1alpha10.UpdateClusterRequest, arg2 ...grpc.CallOption) (*alphaops.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*alphaops.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockClusterServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockClusterServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClusterService)(nil).Update), varargs...)
	return &MockClusterServiceUpdateCall{Call: call}
}

// MockClusterServiceUpdateCall wrap *gomock.Call
type MockClusterServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockClusterServiceUpdateCall) Return(arg0 *alphaops.Operation, arg1 error) *MockClusterServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockClusterServiceUpdateCall) Do(f func(context.Context, *v1alpha10.UpdateClusterRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockClusterServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockClusterServiceUpdateCall) DoAndReturn(f func(context.Context, *v1alpha10.UpdateClusterRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockClusterServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
