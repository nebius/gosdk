// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/billing/v1alpha1/calculator_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/billing/v1alpha1/calculator_service.sdk.go -package v1alpha1 -typed
//

// Package v1alpha1 is a generated GoMock package.
package v1alpha1

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/nebius/gosdk/proto/nebius/billing/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockCalculatorService is a mock of CalculatorService interface.
type MockCalculatorService struct {
	ctrl     *gomock.Controller
	recorder *MockCalculatorServiceMockRecorder
}

// MockCalculatorServiceMockRecorder is the mock recorder for MockCalculatorService.
type MockCalculatorServiceMockRecorder struct {
	mock *MockCalculatorService
}

// NewMockCalculatorService creates a new mock instance.
func NewMockCalculatorService(ctrl *gomock.Controller) *MockCalculatorService {
	mock := &MockCalculatorService{ctrl: ctrl}
	mock.recorder = &MockCalculatorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCalculatorService) EXPECT() *MockCalculatorServiceMockRecorder {
	return m.recorder
}

// Estimate mocks base method.
func (m *MockCalculatorService) Estimate(arg0 context.Context, arg1 *v1alpha1.EstimateRequest, arg2 ...grpc.CallOption) (*v1alpha1.EstimateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Estimate", varargs...)
	ret0, _ := ret[0].(*v1alpha1.EstimateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Estimate indicates an expected call of Estimate.
func (mr *MockCalculatorServiceMockRecorder) Estimate(arg0, arg1 any, arg2 ...any) *MockCalculatorServiceEstimateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Estimate", reflect.TypeOf((*MockCalculatorService)(nil).Estimate), varargs...)
	return &MockCalculatorServiceEstimateCall{Call: call}
}

// MockCalculatorServiceEstimateCall wrap *gomock.Call
type MockCalculatorServiceEstimateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCalculatorServiceEstimateCall) Return(arg0 *v1alpha1.EstimateResponse, arg1 error) *MockCalculatorServiceEstimateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCalculatorServiceEstimateCall) Do(f func(context.Context, *v1alpha1.EstimateRequest, ...grpc.CallOption) (*v1alpha1.EstimateResponse, error)) *MockCalculatorServiceEstimateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCalculatorServiceEstimateCall) DoAndReturn(f func(context.Context, *v1alpha1.EstimateRequest, ...grpc.CallOption) (*v1alpha1.EstimateResponse, error)) *MockCalculatorServiceEstimateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EstimateBatch mocks base method.
func (m *MockCalculatorService) EstimateBatch(arg0 context.Context, arg1 *v1alpha1.EstimateBatchRequest, arg2 ...grpc.CallOption) (*v1alpha1.EstimateBatchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "EstimateBatch", varargs...)
	ret0, _ := ret[0].(*v1alpha1.EstimateBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateBatch indicates an expected call of EstimateBatch.
func (mr *MockCalculatorServiceMockRecorder) EstimateBatch(arg0, arg1 any, arg2 ...any) *MockCalculatorServiceEstimateBatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateBatch", reflect.TypeOf((*MockCalculatorService)(nil).EstimateBatch), varargs...)
	return &MockCalculatorServiceEstimateBatchCall{Call: call}
}

// MockCalculatorServiceEstimateBatchCall wrap *gomock.Call
type MockCalculatorServiceEstimateBatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCalculatorServiceEstimateBatchCall) Return(arg0 *v1alpha1.EstimateBatchResponse, arg1 error) *MockCalculatorServiceEstimateBatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCalculatorServiceEstimateBatchCall) Do(f func(context.Context, *v1alpha1.EstimateBatchRequest, ...grpc.CallOption) (*v1alpha1.EstimateBatchResponse, error)) *MockCalculatorServiceEstimateBatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCalculatorServiceEstimateBatchCall) DoAndReturn(f func(context.Context, *v1alpha1.EstimateBatchRequest, ...grpc.CallOption) (*v1alpha1.EstimateBatchResponse, error)) *MockCalculatorServiceEstimateBatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
