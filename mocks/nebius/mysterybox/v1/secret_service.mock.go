// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/mysterybox/v1/secret_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/mysterybox/v1/secret_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/mysterybox/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSecretService is a mock of SecretService interface.
type MockSecretService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretServiceMockRecorder
}

// MockSecretServiceMockRecorder is the mock recorder for MockSecretService.
type MockSecretServiceMockRecorder struct {
	mock *MockSecretService
}

// NewMockSecretService creates a new mock instance.
func NewMockSecretService(ctrl *gomock.Controller) *MockSecretService {
	mock := &MockSecretService{ctrl: ctrl}
	mock.recorder = &MockSecretServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretService) EXPECT() *MockSecretServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSecretService) Create(arg0 context.Context, arg1 *v10.CreateSecretRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSecretServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockSecretServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSecretService)(nil).Create), varargs...)
	return &MockSecretServiceCreateCall{Call: call}
}

// MockSecretServiceCreateCall wrap *gomock.Call
type MockSecretServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockSecretServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceCreateCall) Do(f func(context.Context, *v10.CreateSecretRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceCreateCall) DoAndReturn(f func(context.Context, *v10.CreateSecretRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockSecretService) Delete(arg0 context.Context, arg1 *v10.DeleteSecretRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSecretServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockSecretServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecretService)(nil).Delete), varargs...)
	return &MockSecretServiceDeleteCall{Call: call}
}

// MockSecretServiceDeleteCall wrap *gomock.Call
type MockSecretServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockSecretServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceDeleteCall) Do(f func(context.Context, *v10.DeleteSecretRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceDeleteCall) DoAndReturn(f func(context.Context, *v10.DeleteSecretRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockSecretService) Filter(arg0 context.Context, arg1 *v10.ListSecretsRequest, arg2 ...grpc.CallOption) iter.Seq2[*v10.Secret, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v10.Secret, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockSecretServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockSecretServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockSecretService)(nil).Filter), varargs...)
	return &MockSecretServiceFilterCall{Call: call}
}

// MockSecretServiceFilterCall wrap *gomock.Call
type MockSecretServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceFilterCall) Return(arg0 iter.Seq2[*v10.Secret, error]) *MockSecretServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceFilterCall) Do(f func(context.Context, *v10.ListSecretsRequest, ...grpc.CallOption) iter.Seq2[*v10.Secret, error]) *MockSecretServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceFilterCall) DoAndReturn(f func(context.Context, *v10.ListSecretsRequest, ...grpc.CallOption) iter.Seq2[*v10.Secret, error]) *MockSecretServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockSecretService) Get(arg0 context.Context, arg1 *v10.GetSecretRequest, arg2 ...grpc.CallOption) (*v10.Secret, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockSecretServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecretService)(nil).Get), varargs...)
	return &MockSecretServiceGetCall{Call: call}
}

// MockSecretServiceGetCall wrap *gomock.Call
type MockSecretServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceGetCall) Return(arg0 *v10.Secret, arg1 error) *MockSecretServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceGetCall) Do(f func(context.Context, *v10.GetSecretRequest, ...grpc.CallOption) (*v10.Secret, error)) *MockSecretServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetSecretRequest, ...grpc.CallOption) (*v10.Secret, error)) *MockSecretServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockSecretService) GetByName(arg0 context.Context, arg1 *v10.GetSecretByNameRequest, arg2 ...grpc.CallOption) (*v10.Secret, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v10.Secret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockSecretServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockSecretServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockSecretService)(nil).GetByName), varargs...)
	return &MockSecretServiceGetByNameCall{Call: call}
}

// MockSecretServiceGetByNameCall wrap *gomock.Call
type MockSecretServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceGetByNameCall) Return(arg0 *v10.Secret, arg1 error) *MockSecretServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceGetByNameCall) Do(f func(context.Context, *v10.GetSecretByNameRequest, ...grpc.CallOption) (*v10.Secret, error)) *MockSecretServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceGetByNameCall) DoAndReturn(f func(context.Context, *v10.GetSecretByNameRequest, ...grpc.CallOption) (*v10.Secret, error)) *MockSecretServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockSecretService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockSecretServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockSecretServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockSecretService)(nil).GetOperation), varargs...)
	return &MockSecretServiceGetOperationCall{Call: call}
}

// MockSecretServiceGetOperationCall wrap *gomock.Call
type MockSecretServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockSecretServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockSecretService) List(arg0 context.Context, arg1 *v10.ListSecretsRequest, arg2 ...grpc.CallOption) (*v10.ListSecretsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v10.ListSecretsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSecretServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockSecretServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecretService)(nil).List), varargs...)
	return &MockSecretServiceListCall{Call: call}
}

// MockSecretServiceListCall wrap *gomock.Call
type MockSecretServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceListCall) Return(arg0 *v10.ListSecretsResponse, arg1 error) *MockSecretServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceListCall) Do(f func(context.Context, *v10.ListSecretsRequest, ...grpc.CallOption) (*v10.ListSecretsResponse, error)) *MockSecretServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceListCall) DoAndReturn(f func(context.Context, *v10.ListSecretsRequest, ...grpc.CallOption) (*v10.ListSecretsResponse, error)) *MockSecretServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockSecretService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockSecretServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockSecretServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockSecretService)(nil).ListOperations), varargs...)
	return &MockSecretServiceListOperationsCall{Call: call}
}

// MockSecretServiceListOperationsCall wrap *gomock.Call
type MockSecretServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockSecretServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockSecretServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockSecretServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Undelete mocks base method.
func (m *MockSecretService) Undelete(arg0 context.Context, arg1 *v10.UndeleteSecretRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Undelete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Undelete indicates an expected call of Undelete.
func (mr *MockSecretServiceMockRecorder) Undelete(arg0, arg1 any, arg2 ...any) *MockSecretServiceUndeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Undelete", reflect.TypeOf((*MockSecretService)(nil).Undelete), varargs...)
	return &MockSecretServiceUndeleteCall{Call: call}
}

// MockSecretServiceUndeleteCall wrap *gomock.Call
type MockSecretServiceUndeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceUndeleteCall) Return(arg0 operations.Operation, arg1 error) *MockSecretServiceUndeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceUndeleteCall) Do(f func(context.Context, *v10.UndeleteSecretRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretServiceUndeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceUndeleteCall) DoAndReturn(f func(context.Context, *v10.UndeleteSecretRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretServiceUndeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockSecretService) Update(arg0 context.Context, arg1 *v10.UpdateSecretRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockSecretServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockSecretServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSecretService)(nil).Update), varargs...)
	return &MockSecretServiceUpdateCall{Call: call}
}

// MockSecretServiceUpdateCall wrap *gomock.Call
type MockSecretServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretServiceUpdateCall) Return(arg0 operations.Operation, arg1 error) *MockSecretServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretServiceUpdateCall) Do(f func(context.Context, *v10.UpdateSecretRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretServiceUpdateCall) DoAndReturn(f func(context.Context, *v10.UpdateSecretRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
