// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/mysterybox/v1/secret_version_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/mysterybox/v1/secret_version_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/mysterybox/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSecretVersionService is a mock of SecretVersionService interface.
type MockSecretVersionService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretVersionServiceMockRecorder
}

// MockSecretVersionServiceMockRecorder is the mock recorder for MockSecretVersionService.
type MockSecretVersionServiceMockRecorder struct {
	mock *MockSecretVersionService
}

// NewMockSecretVersionService creates a new mock instance.
func NewMockSecretVersionService(ctrl *gomock.Controller) *MockSecretVersionService {
	mock := &MockSecretVersionService{ctrl: ctrl}
	mock.recorder = &MockSecretVersionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretVersionService) EXPECT() *MockSecretVersionServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSecretVersionService) Create(arg0 context.Context, arg1 *v10.CreateSecretVersionRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSecretVersionServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockSecretVersionServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSecretVersionService)(nil).Create), varargs...)
	return &MockSecretVersionServiceCreateCall{Call: call}
}

// MockSecretVersionServiceCreateCall wrap *gomock.Call
type MockSecretVersionServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretVersionServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockSecretVersionServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretVersionServiceCreateCall) Do(f func(context.Context, *v10.CreateSecretVersionRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretVersionServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretVersionServiceCreateCall) DoAndReturn(f func(context.Context, *v10.CreateSecretVersionRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretVersionServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockSecretVersionService) Delete(arg0 context.Context, arg1 *v10.DeleteSecretVersionRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSecretVersionServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockSecretVersionServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSecretVersionService)(nil).Delete), varargs...)
	return &MockSecretVersionServiceDeleteCall{Call: call}
}

// MockSecretVersionServiceDeleteCall wrap *gomock.Call
type MockSecretVersionServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretVersionServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockSecretVersionServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretVersionServiceDeleteCall) Do(f func(context.Context, *v10.DeleteSecretVersionRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretVersionServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretVersionServiceDeleteCall) DoAndReturn(f func(context.Context, *v10.DeleteSecretVersionRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretVersionServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockSecretVersionService) Filter(arg0 context.Context, arg1 *v10.ListSecretVersionsRequest, arg2 ...grpc.CallOption) iter.Seq2[*v10.SecretVersion, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v10.SecretVersion, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockSecretVersionServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockSecretVersionServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockSecretVersionService)(nil).Filter), varargs...)
	return &MockSecretVersionServiceFilterCall{Call: call}
}

// MockSecretVersionServiceFilterCall wrap *gomock.Call
type MockSecretVersionServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretVersionServiceFilterCall) Return(arg0 iter.Seq2[*v10.SecretVersion, error]) *MockSecretVersionServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretVersionServiceFilterCall) Do(f func(context.Context, *v10.ListSecretVersionsRequest, ...grpc.CallOption) iter.Seq2[*v10.SecretVersion, error]) *MockSecretVersionServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretVersionServiceFilterCall) DoAndReturn(f func(context.Context, *v10.ListSecretVersionsRequest, ...grpc.CallOption) iter.Seq2[*v10.SecretVersion, error]) *MockSecretVersionServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockSecretVersionService) Get(arg0 context.Context, arg1 *v10.GetSecretVersionRequest, arg2 ...grpc.CallOption) (*v10.SecretVersion, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.SecretVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSecretVersionServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockSecretVersionServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSecretVersionService)(nil).Get), varargs...)
	return &MockSecretVersionServiceGetCall{Call: call}
}

// MockSecretVersionServiceGetCall wrap *gomock.Call
type MockSecretVersionServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretVersionServiceGetCall) Return(arg0 *v10.SecretVersion, arg1 error) *MockSecretVersionServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretVersionServiceGetCall) Do(f func(context.Context, *v10.GetSecretVersionRequest, ...grpc.CallOption) (*v10.SecretVersion, error)) *MockSecretVersionServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretVersionServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetSecretVersionRequest, ...grpc.CallOption) (*v10.SecretVersion, error)) *MockSecretVersionServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockSecretVersionService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockSecretVersionServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockSecretVersionServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockSecretVersionService)(nil).GetOperation), varargs...)
	return &MockSecretVersionServiceGetOperationCall{Call: call}
}

// MockSecretVersionServiceGetOperationCall wrap *gomock.Call
type MockSecretVersionServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretVersionServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockSecretVersionServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretVersionServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretVersionServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretVersionServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretVersionServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockSecretVersionService) List(arg0 context.Context, arg1 *v10.ListSecretVersionsRequest, arg2 ...grpc.CallOption) (*v10.ListSecretVersionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v10.ListSecretVersionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSecretVersionServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockSecretVersionServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSecretVersionService)(nil).List), varargs...)
	return &MockSecretVersionServiceListCall{Call: call}
}

// MockSecretVersionServiceListCall wrap *gomock.Call
type MockSecretVersionServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretVersionServiceListCall) Return(arg0 *v10.ListSecretVersionsResponse, arg1 error) *MockSecretVersionServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretVersionServiceListCall) Do(f func(context.Context, *v10.ListSecretVersionsRequest, ...grpc.CallOption) (*v10.ListSecretVersionsResponse, error)) *MockSecretVersionServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretVersionServiceListCall) DoAndReturn(f func(context.Context, *v10.ListSecretVersionsRequest, ...grpc.CallOption) (*v10.ListSecretVersionsResponse, error)) *MockSecretVersionServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockSecretVersionService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockSecretVersionServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockSecretVersionServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockSecretVersionService)(nil).ListOperations), varargs...)
	return &MockSecretVersionServiceListOperationsCall{Call: call}
}

// MockSecretVersionServiceListOperationsCall wrap *gomock.Call
type MockSecretVersionServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretVersionServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockSecretVersionServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretVersionServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockSecretVersionServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretVersionServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockSecretVersionServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Undelete mocks base method.
func (m *MockSecretVersionService) Undelete(arg0 context.Context, arg1 *v10.UndeleteSecretVersionRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Undelete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Undelete indicates an expected call of Undelete.
func (mr *MockSecretVersionServiceMockRecorder) Undelete(arg0, arg1 any, arg2 ...any) *MockSecretVersionServiceUndeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Undelete", reflect.TypeOf((*MockSecretVersionService)(nil).Undelete), varargs...)
	return &MockSecretVersionServiceUndeleteCall{Call: call}
}

// MockSecretVersionServiceUndeleteCall wrap *gomock.Call
type MockSecretVersionServiceUndeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretVersionServiceUndeleteCall) Return(arg0 operations.Operation, arg1 error) *MockSecretVersionServiceUndeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretVersionServiceUndeleteCall) Do(f func(context.Context, *v10.UndeleteSecretVersionRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretVersionServiceUndeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretVersionServiceUndeleteCall) DoAndReturn(f func(context.Context, *v10.UndeleteSecretVersionRequest, ...grpc.CallOption) (operations.Operation, error)) *MockSecretVersionServiceUndeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
