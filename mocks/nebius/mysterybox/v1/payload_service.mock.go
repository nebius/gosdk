// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/mysterybox/v1/payload_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/mysterybox/v1/payload_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	v1 "github.com/nebius/gosdk/proto/nebius/mysterybox/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPayloadService is a mock of PayloadService interface.
type MockPayloadService struct {
	ctrl     *gomock.Controller
	recorder *MockPayloadServiceMockRecorder
}

// MockPayloadServiceMockRecorder is the mock recorder for MockPayloadService.
type MockPayloadServiceMockRecorder struct {
	mock *MockPayloadService
}

// NewMockPayloadService creates a new mock instance.
func NewMockPayloadService(ctrl *gomock.Controller) *MockPayloadService {
	mock := &MockPayloadService{ctrl: ctrl}
	mock.recorder = &MockPayloadServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayloadService) EXPECT() *MockPayloadServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockPayloadService) Get(arg0 context.Context, arg1 *v1.GetPayloadRequest, arg2 ...grpc.CallOption) (*v1.SecretPayload, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1.SecretPayload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPayloadServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockPayloadServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPayloadService)(nil).Get), varargs...)
	return &MockPayloadServiceGetCall{Call: call}
}

// MockPayloadServiceGetCall wrap *gomock.Call
type MockPayloadServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPayloadServiceGetCall) Return(arg0 *v1.SecretPayload, arg1 error) *MockPayloadServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPayloadServiceGetCall) Do(f func(context.Context, *v1.GetPayloadRequest, ...grpc.CallOption) (*v1.SecretPayload, error)) *MockPayloadServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPayloadServiceGetCall) DoAndReturn(f func(context.Context, *v1.GetPayloadRequest, ...grpc.CallOption) (*v1.SecretPayload, error)) *MockPayloadServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByKey mocks base method.
func (m *MockPayloadService) GetByKey(arg0 context.Context, arg1 *v1.GetPayloadByKeyRequest, arg2 ...grpc.CallOption) (*v1.SecretPayloadEntry, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByKey", varargs...)
	ret0, _ := ret[0].(*v1.SecretPayloadEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByKey indicates an expected call of GetByKey.
func (mr *MockPayloadServiceMockRecorder) GetByKey(arg0, arg1 any, arg2 ...any) *MockPayloadServiceGetByKeyCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByKey", reflect.TypeOf((*MockPayloadService)(nil).GetByKey), varargs...)
	return &MockPayloadServiceGetByKeyCall{Call: call}
}

// MockPayloadServiceGetByKeyCall wrap *gomock.Call
type MockPayloadServiceGetByKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPayloadServiceGetByKeyCall) Return(arg0 *v1.SecretPayloadEntry, arg1 error) *MockPayloadServiceGetByKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPayloadServiceGetByKeyCall) Do(f func(context.Context, *v1.GetPayloadByKeyRequest, ...grpc.CallOption) (*v1.SecretPayloadEntry, error)) *MockPayloadServiceGetByKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPayloadServiceGetByKeyCall) DoAndReturn(f func(context.Context, *v1.GetPayloadByKeyRequest, ...grpc.CallOption) (*v1.SecretPayloadEntry, error)) *MockPayloadServiceGetByKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
