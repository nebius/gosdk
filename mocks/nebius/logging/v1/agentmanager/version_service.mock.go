// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/logging/v1/agentmanager/version_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/logging/v1/agentmanager/version_service.sdk.go -package agentmanager -typed
//

// Package agentmanager is a generated GoMock package.
package agentmanager

import (
	context "context"
	reflect "reflect"

	agentmanager "github.com/nebius/gosdk/proto/nebius/logging/v1/agentmanager"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockVersionService is a mock of VersionService interface.
type MockVersionService struct {
	ctrl     *gomock.Controller
	recorder *MockVersionServiceMockRecorder
}

// MockVersionServiceMockRecorder is the mock recorder for MockVersionService.
type MockVersionServiceMockRecorder struct {
	mock *MockVersionService
}

// NewMockVersionService creates a new mock instance.
func NewMockVersionService(ctrl *gomock.Controller) *MockVersionService {
	mock := &MockVersionService{ctrl: ctrl}
	mock.recorder = &MockVersionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVersionService) EXPECT() *MockVersionServiceMockRecorder {
	return m.recorder
}

// GetVersion mocks base method.
func (m *MockVersionService) GetVersion(arg0 context.Context, arg1 *agentmanager.GetVersionRequest, arg2 ...grpc.CallOption) (*agentmanager.GetVersionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVersion", varargs...)
	ret0, _ := ret[0].(*agentmanager.GetVersionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVersion indicates an expected call of GetVersion.
func (mr *MockVersionServiceMockRecorder) GetVersion(arg0, arg1 any, arg2 ...any) *MockVersionServiceGetVersionCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVersion", reflect.TypeOf((*MockVersionService)(nil).GetVersion), varargs...)
	return &MockVersionServiceGetVersionCall{Call: call}
}

// MockVersionServiceGetVersionCall wrap *gomock.Call
type MockVersionServiceGetVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockVersionServiceGetVersionCall) Return(arg0 *agentmanager.GetVersionResponse, arg1 error) *MockVersionServiceGetVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockVersionServiceGetVersionCall) Do(f func(context.Context, *agentmanager.GetVersionRequest, ...grpc.CallOption) (*agentmanager.GetVersionResponse, error)) *MockVersionServiceGetVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockVersionServiceGetVersionCall) DoAndReturn(f func(context.Context, *agentmanager.GetVersionRequest, ...grpc.CallOption) (*agentmanager.GetVersionResponse, error)) *MockVersionServiceGetVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
