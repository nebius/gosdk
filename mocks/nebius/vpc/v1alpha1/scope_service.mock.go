// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/vpc/v1alpha1/scope_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/vpc/v1alpha1/scope_service.sdk.go -package v1alpha1 -typed
//

// Package v1alpha1 is a generated GoMock package.
package v1alpha1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	v1alpha1 "github.com/nebius/gosdk/proto/nebius/vpc/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockScopeService is a mock of ScopeService interface.
type MockScopeService struct {
	ctrl     *gomock.Controller
	recorder *MockScopeServiceMockRecorder
}

// MockScopeServiceMockRecorder is the mock recorder for MockScopeService.
type MockScopeServiceMockRecorder struct {
	mock *MockScopeService
}

// NewMockScopeService creates a new mock instance.
func NewMockScopeService(ctrl *gomock.Controller) *MockScopeService {
	mock := &MockScopeService{ctrl: ctrl}
	mock.recorder = &MockScopeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScopeService) EXPECT() *MockScopeServiceMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockScopeService) Filter(arg0 context.Context, arg1 *v1alpha1.ListScopesRequest, arg2 ...grpc.CallOption) iter.Seq2[*v1alpha1.Scope, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v1alpha1.Scope, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockScopeServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockScopeServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockScopeService)(nil).Filter), varargs...)
	return &MockScopeServiceFilterCall{Call: call}
}

// MockScopeServiceFilterCall wrap *gomock.Call
type MockScopeServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScopeServiceFilterCall) Return(arg0 iter.Seq2[*v1alpha1.Scope, error]) *MockScopeServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScopeServiceFilterCall) Do(f func(context.Context, *v1alpha1.ListScopesRequest, ...grpc.CallOption) iter.Seq2[*v1alpha1.Scope, error]) *MockScopeServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScopeServiceFilterCall) DoAndReturn(f func(context.Context, *v1alpha1.ListScopesRequest, ...grpc.CallOption) iter.Seq2[*v1alpha1.Scope, error]) *MockScopeServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockScopeService) Get(arg0 context.Context, arg1 *v1alpha1.GetScopeRequest, arg2 ...grpc.CallOption) (*v1alpha1.Scope, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockScopeServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockScopeServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockScopeService)(nil).Get), varargs...)
	return &MockScopeServiceGetCall{Call: call}
}

// MockScopeServiceGetCall wrap *gomock.Call
type MockScopeServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScopeServiceGetCall) Return(arg0 *v1alpha1.Scope, arg1 error) *MockScopeServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScopeServiceGetCall) Do(f func(context.Context, *v1alpha1.GetScopeRequest, ...grpc.CallOption) (*v1alpha1.Scope, error)) *MockScopeServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScopeServiceGetCall) DoAndReturn(f func(context.Context, *v1alpha1.GetScopeRequest, ...grpc.CallOption) (*v1alpha1.Scope, error)) *MockScopeServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockScopeService) GetByName(arg0 context.Context, arg1 *v1alpha1.GetScopeByNameRequest, arg2 ...grpc.CallOption) (*v1alpha1.Scope, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Scope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockScopeServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockScopeServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockScopeService)(nil).GetByName), varargs...)
	return &MockScopeServiceGetByNameCall{Call: call}
}

// MockScopeServiceGetByNameCall wrap *gomock.Call
type MockScopeServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScopeServiceGetByNameCall) Return(arg0 *v1alpha1.Scope, arg1 error) *MockScopeServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScopeServiceGetByNameCall) Do(f func(context.Context, *v1alpha1.GetScopeByNameRequest, ...grpc.CallOption) (*v1alpha1.Scope, error)) *MockScopeServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScopeServiceGetByNameCall) DoAndReturn(f func(context.Context, *v1alpha1.GetScopeByNameRequest, ...grpc.CallOption) (*v1alpha1.Scope, error)) *MockScopeServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockScopeService) List(arg0 context.Context, arg1 *v1alpha1.ListScopesRequest, arg2 ...grpc.CallOption) (*v1alpha1.ListScopesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListScopesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockScopeServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockScopeServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockScopeService)(nil).List), varargs...)
	return &MockScopeServiceListCall{Call: call}
}

// MockScopeServiceListCall wrap *gomock.Call
type MockScopeServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockScopeServiceListCall) Return(arg0 *v1alpha1.ListScopesResponse, arg1 error) *MockScopeServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockScopeServiceListCall) Do(f func(context.Context, *v1alpha1.ListScopesRequest, ...grpc.CallOption) (*v1alpha1.ListScopesResponse, error)) *MockScopeServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockScopeServiceListCall) DoAndReturn(f func(context.Context, *v1alpha1.ListScopesRequest, ...grpc.CallOption) (*v1alpha1.ListScopesResponse, error)) *MockScopeServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
