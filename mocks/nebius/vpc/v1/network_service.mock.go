// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/vpc/v1/network_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/vpc/v1/network_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	v1 "github.com/nebius/gosdk/proto/nebius/vpc/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockNetworkService is a mock of NetworkService interface.
type MockNetworkService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceMockRecorder
}

// MockNetworkServiceMockRecorder is the mock recorder for MockNetworkService.
type MockNetworkServiceMockRecorder struct {
	mock *MockNetworkService
}

// NewMockNetworkService creates a new mock instance.
func NewMockNetworkService(ctrl *gomock.Controller) *MockNetworkService {
	mock := &MockNetworkService{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetworkService) EXPECT() *MockNetworkServiceMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockNetworkService) Filter(arg0 context.Context, arg1 *v1.ListNetworksRequest, arg2 ...grpc.CallOption) iter.Seq2[*v1.Network, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v1.Network, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockNetworkServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockNetworkServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockNetworkService)(nil).Filter), varargs...)
	return &MockNetworkServiceFilterCall{Call: call}
}

// MockNetworkServiceFilterCall wrap *gomock.Call
type MockNetworkServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceFilterCall) Return(arg0 iter.Seq2[*v1.Network, error]) *MockNetworkServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceFilterCall) Do(f func(context.Context, *v1.ListNetworksRequest, ...grpc.CallOption) iter.Seq2[*v1.Network, error]) *MockNetworkServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceFilterCall) DoAndReturn(f func(context.Context, *v1.ListNetworksRequest, ...grpc.CallOption) iter.Seq2[*v1.Network, error]) *MockNetworkServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockNetworkService) Get(arg0 context.Context, arg1 *v1.GetNetworkRequest, arg2 ...grpc.CallOption) (*v1.Network, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNetworkServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockNetworkServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNetworkService)(nil).Get), varargs...)
	return &MockNetworkServiceGetCall{Call: call}
}

// MockNetworkServiceGetCall wrap *gomock.Call
type MockNetworkServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetCall) Return(arg0 *v1.Network, arg1 error) *MockNetworkServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetCall) Do(f func(context.Context, *v1.GetNetworkRequest, ...grpc.CallOption) (*v1.Network, error)) *MockNetworkServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetCall) DoAndReturn(f func(context.Context, *v1.GetNetworkRequest, ...grpc.CallOption) (*v1.Network, error)) *MockNetworkServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockNetworkService) GetByName(arg0 context.Context, arg1 *v1.GetNetworkByNameRequest, arg2 ...grpc.CallOption) (*v1.Network, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v1.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockNetworkServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockNetworkServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockNetworkService)(nil).GetByName), varargs...)
	return &MockNetworkServiceGetByNameCall{Call: call}
}

// MockNetworkServiceGetByNameCall wrap *gomock.Call
type MockNetworkServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceGetByNameCall) Return(arg0 *v1.Network, arg1 error) *MockNetworkServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceGetByNameCall) Do(f func(context.Context, *v1.GetNetworkByNameRequest, ...grpc.CallOption) (*v1.Network, error)) *MockNetworkServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceGetByNameCall) DoAndReturn(f func(context.Context, *v1.GetNetworkByNameRequest, ...grpc.CallOption) (*v1.Network, error)) *MockNetworkServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockNetworkService) List(arg0 context.Context, arg1 *v1.ListNetworksRequest, arg2 ...grpc.CallOption) (*v1.ListNetworksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1.ListNetworksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNetworkServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockNetworkServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNetworkService)(nil).List), varargs...)
	return &MockNetworkServiceListCall{Call: call}
}

// MockNetworkServiceListCall wrap *gomock.Call
type MockNetworkServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNetworkServiceListCall) Return(arg0 *v1.ListNetworksResponse, arg1 error) *MockNetworkServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNetworkServiceListCall) Do(f func(context.Context, *v1.ListNetworksRequest, ...grpc.CallOption) (*v1.ListNetworksResponse, error)) *MockNetworkServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNetworkServiceListCall) DoAndReturn(f func(context.Context, *v1.ListNetworksRequest, ...grpc.CallOption) (*v1.ListNetworksResponse, error)) *MockNetworkServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
