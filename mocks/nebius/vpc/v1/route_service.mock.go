// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/vpc/v1/route_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/vpc/v1/route_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/vpc/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockRouteService is a mock of RouteService interface.
type MockRouteService struct {
	ctrl     *gomock.Controller
	recorder *MockRouteServiceMockRecorder
}

// MockRouteServiceMockRecorder is the mock recorder for MockRouteService.
type MockRouteServiceMockRecorder struct {
	mock *MockRouteService
}

// NewMockRouteService creates a new mock instance.
func NewMockRouteService(ctrl *gomock.Controller) *MockRouteService {
	mock := &MockRouteService{ctrl: ctrl}
	mock.recorder = &MockRouteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteService) EXPECT() *MockRouteServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRouteService) Create(arg0 context.Context, arg1 *v10.CreateRouteRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRouteServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockRouteServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRouteService)(nil).Create), varargs...)
	return &MockRouteServiceCreateCall{Call: call}
}

// MockRouteServiceCreateCall wrap *gomock.Call
type MockRouteServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockRouteServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteServiceCreateCall) Do(f func(context.Context, *v10.CreateRouteRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRouteServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteServiceCreateCall) DoAndReturn(f func(context.Context, *v10.CreateRouteRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRouteServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockRouteService) Delete(arg0 context.Context, arg1 *v10.DeleteRouteRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRouteServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockRouteServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouteService)(nil).Delete), varargs...)
	return &MockRouteServiceDeleteCall{Call: call}
}

// MockRouteServiceDeleteCall wrap *gomock.Call
type MockRouteServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockRouteServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteServiceDeleteCall) Do(f func(context.Context, *v10.DeleteRouteRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRouteServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteServiceDeleteCall) DoAndReturn(f func(context.Context, *v10.DeleteRouteRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRouteServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockRouteService) Filter(arg0 context.Context, arg1 *v10.ListRoutesRequest, arg2 ...grpc.CallOption) iter.Seq2[*v10.Route, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v10.Route, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockRouteServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockRouteServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockRouteService)(nil).Filter), varargs...)
	return &MockRouteServiceFilterCall{Call: call}
}

// MockRouteServiceFilterCall wrap *gomock.Call
type MockRouteServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteServiceFilterCall) Return(arg0 iter.Seq2[*v10.Route, error]) *MockRouteServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteServiceFilterCall) Do(f func(context.Context, *v10.ListRoutesRequest, ...grpc.CallOption) iter.Seq2[*v10.Route, error]) *MockRouteServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteServiceFilterCall) DoAndReturn(f func(context.Context, *v10.ListRoutesRequest, ...grpc.CallOption) iter.Seq2[*v10.Route, error]) *MockRouteServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockRouteService) Get(arg0 context.Context, arg1 *v10.GetRouteRequest, arg2 ...grpc.CallOption) (*v10.Route, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRouteServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockRouteServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRouteService)(nil).Get), varargs...)
	return &MockRouteServiceGetCall{Call: call}
}

// MockRouteServiceGetCall wrap *gomock.Call
type MockRouteServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteServiceGetCall) Return(arg0 *v10.Route, arg1 error) *MockRouteServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteServiceGetCall) Do(f func(context.Context, *v10.GetRouteRequest, ...grpc.CallOption) (*v10.Route, error)) *MockRouteServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetRouteRequest, ...grpc.CallOption) (*v10.Route, error)) *MockRouteServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockRouteService) GetByName(arg0 context.Context, arg1 *v10.GetRouteByNameRequest, arg2 ...grpc.CallOption) (*v10.Route, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v10.Route)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockRouteServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockRouteServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockRouteService)(nil).GetByName), varargs...)
	return &MockRouteServiceGetByNameCall{Call: call}
}

// MockRouteServiceGetByNameCall wrap *gomock.Call
type MockRouteServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteServiceGetByNameCall) Return(arg0 *v10.Route, arg1 error) *MockRouteServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteServiceGetByNameCall) Do(f func(context.Context, *v10.GetRouteByNameRequest, ...grpc.CallOption) (*v10.Route, error)) *MockRouteServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteServiceGetByNameCall) DoAndReturn(f func(context.Context, *v10.GetRouteByNameRequest, ...grpc.CallOption) (*v10.Route, error)) *MockRouteServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockRouteService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockRouteServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockRouteServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockRouteService)(nil).GetOperation), varargs...)
	return &MockRouteServiceGetOperationCall{Call: call}
}

// MockRouteServiceGetOperationCall wrap *gomock.Call
type MockRouteServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockRouteServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRouteServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRouteServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockRouteService) List(arg0 context.Context, arg1 *v10.ListRoutesRequest, arg2 ...grpc.CallOption) (*v10.ListRoutesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v10.ListRoutesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRouteServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockRouteServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRouteService)(nil).List), varargs...)
	return &MockRouteServiceListCall{Call: call}
}

// MockRouteServiceListCall wrap *gomock.Call
type MockRouteServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteServiceListCall) Return(arg0 *v10.ListRoutesResponse, arg1 error) *MockRouteServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteServiceListCall) Do(f func(context.Context, *v10.ListRoutesRequest, ...grpc.CallOption) (*v10.ListRoutesResponse, error)) *MockRouteServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteServiceListCall) DoAndReturn(f func(context.Context, *v10.ListRoutesRequest, ...grpc.CallOption) (*v10.ListRoutesResponse, error)) *MockRouteServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockRouteService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockRouteServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockRouteServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockRouteService)(nil).ListOperations), varargs...)
	return &MockRouteServiceListOperationsCall{Call: call}
}

// MockRouteServiceListOperationsCall wrap *gomock.Call
type MockRouteServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockRouteServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockRouteServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockRouteServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockRouteService) Update(arg0 context.Context, arg1 *v10.UpdateRouteRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRouteServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockRouteServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRouteService)(nil).Update), varargs...)
	return &MockRouteServiceUpdateCall{Call: call}
}

// MockRouteServiceUpdateCall wrap *gomock.Call
type MockRouteServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteServiceUpdateCall) Return(arg0 operations.Operation, arg1 error) *MockRouteServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteServiceUpdateCall) Do(f func(context.Context, *v10.UpdateRouteRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRouteServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteServiceUpdateCall) DoAndReturn(f func(context.Context, *v10.UpdateRouteRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRouteServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
