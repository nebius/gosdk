// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/vpc/v1/pool_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/vpc/v1/pool_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/vpc/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPoolService is a mock of PoolService interface.
type MockPoolService struct {
	ctrl     *gomock.Controller
	recorder *MockPoolServiceMockRecorder
}

// MockPoolServiceMockRecorder is the mock recorder for MockPoolService.
type MockPoolServiceMockRecorder struct {
	mock *MockPoolService
}

// NewMockPoolService creates a new mock instance.
func NewMockPoolService(ctrl *gomock.Controller) *MockPoolService {
	mock := &MockPoolService{ctrl: ctrl}
	mock.recorder = &MockPoolServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoolService) EXPECT() *MockPoolServiceMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockPoolService) Filter(arg0 context.Context, arg1 *v10.ListPoolsRequest, arg2 ...grpc.CallOption) iter.Seq2[*v10.Pool, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v10.Pool, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockPoolServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockPoolServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockPoolService)(nil).Filter), varargs...)
	return &MockPoolServiceFilterCall{Call: call}
}

// MockPoolServiceFilterCall wrap *gomock.Call
type MockPoolServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolServiceFilterCall) Return(arg0 iter.Seq2[*v10.Pool, error]) *MockPoolServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolServiceFilterCall) Do(f func(context.Context, *v10.ListPoolsRequest, ...grpc.CallOption) iter.Seq2[*v10.Pool, error]) *MockPoolServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolServiceFilterCall) DoAndReturn(f func(context.Context, *v10.ListPoolsRequest, ...grpc.CallOption) iter.Seq2[*v10.Pool, error]) *MockPoolServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockPoolService) Get(arg0 context.Context, arg1 *v10.GetPoolRequest, arg2 ...grpc.CallOption) (*v10.Pool, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPoolServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockPoolServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPoolService)(nil).Get), varargs...)
	return &MockPoolServiceGetCall{Call: call}
}

// MockPoolServiceGetCall wrap *gomock.Call
type MockPoolServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolServiceGetCall) Return(arg0 *v10.Pool, arg1 error) *MockPoolServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolServiceGetCall) Do(f func(context.Context, *v10.GetPoolRequest, ...grpc.CallOption) (*v10.Pool, error)) *MockPoolServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetPoolRequest, ...grpc.CallOption) (*v10.Pool, error)) *MockPoolServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockPoolService) GetByName(arg0 context.Context, arg1 *v10.GetPoolByNameRequest, arg2 ...grpc.CallOption) (*v10.Pool, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v10.Pool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockPoolServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockPoolServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockPoolService)(nil).GetByName), varargs...)
	return &MockPoolServiceGetByNameCall{Call: call}
}

// MockPoolServiceGetByNameCall wrap *gomock.Call
type MockPoolServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolServiceGetByNameCall) Return(arg0 *v10.Pool, arg1 error) *MockPoolServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolServiceGetByNameCall) Do(f func(context.Context, *v10.GetPoolByNameRequest, ...grpc.CallOption) (*v10.Pool, error)) *MockPoolServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolServiceGetByNameCall) DoAndReturn(f func(context.Context, *v10.GetPoolByNameRequest, ...grpc.CallOption) (*v10.Pool, error)) *MockPoolServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockPoolService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockPoolServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockPoolServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockPoolService)(nil).GetOperation), varargs...)
	return &MockPoolServiceGetOperationCall{Call: call}
}

// MockPoolServiceGetOperationCall wrap *gomock.Call
type MockPoolServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockPoolServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockPoolServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockPoolServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockPoolService) List(arg0 context.Context, arg1 *v10.ListPoolsRequest, arg2 ...grpc.CallOption) (*v10.ListPoolsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v10.ListPoolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPoolServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockPoolServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPoolService)(nil).List), varargs...)
	return &MockPoolServiceListCall{Call: call}
}

// MockPoolServiceListCall wrap *gomock.Call
type MockPoolServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolServiceListCall) Return(arg0 *v10.ListPoolsResponse, arg1 error) *MockPoolServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolServiceListCall) Do(f func(context.Context, *v10.ListPoolsRequest, ...grpc.CallOption) (*v10.ListPoolsResponse, error)) *MockPoolServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolServiceListCall) DoAndReturn(f func(context.Context, *v10.ListPoolsRequest, ...grpc.CallOption) (*v10.ListPoolsResponse, error)) *MockPoolServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListBySourcePool mocks base method.
func (m *MockPoolService) ListBySourcePool(arg0 context.Context, arg1 *v10.ListPoolsBySourcePoolRequest, arg2 ...grpc.CallOption) (*v10.ListPoolsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListBySourcePool", varargs...)
	ret0, _ := ret[0].(*v10.ListPoolsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBySourcePool indicates an expected call of ListBySourcePool.
func (mr *MockPoolServiceMockRecorder) ListBySourcePool(arg0, arg1 any, arg2 ...any) *MockPoolServiceListBySourcePoolCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySourcePool", reflect.TypeOf((*MockPoolService)(nil).ListBySourcePool), varargs...)
	return &MockPoolServiceListBySourcePoolCall{Call: call}
}

// MockPoolServiceListBySourcePoolCall wrap *gomock.Call
type MockPoolServiceListBySourcePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolServiceListBySourcePoolCall) Return(arg0 *v10.ListPoolsResponse, arg1 error) *MockPoolServiceListBySourcePoolCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolServiceListBySourcePoolCall) Do(f func(context.Context, *v10.ListPoolsBySourcePoolRequest, ...grpc.CallOption) (*v10.ListPoolsResponse, error)) *MockPoolServiceListBySourcePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolServiceListBySourcePoolCall) DoAndReturn(f func(context.Context, *v10.ListPoolsBySourcePoolRequest, ...grpc.CallOption) (*v10.ListPoolsResponse, error)) *MockPoolServiceListBySourcePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockPoolService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockPoolServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockPoolServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockPoolService)(nil).ListOperations), varargs...)
	return &MockPoolServiceListOperationsCall{Call: call}
}

// MockPoolServiceListOperationsCall wrap *gomock.Call
type MockPoolServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockPoolServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockPoolServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockPoolServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockPoolService) Update(arg0 context.Context, arg1 *v10.UpdatePoolRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPoolServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockPoolServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPoolService)(nil).Update), varargs...)
	return &MockPoolServiceUpdateCall{Call: call}
}

// MockPoolServiceUpdateCall wrap *gomock.Call
type MockPoolServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPoolServiceUpdateCall) Return(arg0 operations.Operation, arg1 error) *MockPoolServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPoolServiceUpdateCall) Do(f func(context.Context, *v10.UpdatePoolRequest, ...grpc.CallOption) (operations.Operation, error)) *MockPoolServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPoolServiceUpdateCall) DoAndReturn(f func(context.Context, *v10.UpdatePoolRequest, ...grpc.CallOption) (operations.Operation, error)) *MockPoolServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
