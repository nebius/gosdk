// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/vpc/v1/subnet_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/vpc/v1/subnet_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	v1 "github.com/nebius/gosdk/proto/nebius/vpc/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSubnetService is a mock of SubnetService interface.
type MockSubnetService struct {
	ctrl     *gomock.Controller
	recorder *MockSubnetServiceMockRecorder
}

// MockSubnetServiceMockRecorder is the mock recorder for MockSubnetService.
type MockSubnetServiceMockRecorder struct {
	mock *MockSubnetService
}

// NewMockSubnetService creates a new mock instance.
func NewMockSubnetService(ctrl *gomock.Controller) *MockSubnetService {
	mock := &MockSubnetService{ctrl: ctrl}
	mock.recorder = &MockSubnetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubnetService) EXPECT() *MockSubnetServiceMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockSubnetService) Filter(arg0 context.Context, arg1 *v1.ListSubnetsRequest, arg2 ...grpc.CallOption) iter.Seq2[*v1.Subnet, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v1.Subnet, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockSubnetServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockSubnetServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockSubnetService)(nil).Filter), varargs...)
	return &MockSubnetServiceFilterCall{Call: call}
}

// MockSubnetServiceFilterCall wrap *gomock.Call
type MockSubnetServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSubnetServiceFilterCall) Return(arg0 iter.Seq2[*v1.Subnet, error]) *MockSubnetServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSubnetServiceFilterCall) Do(f func(context.Context, *v1.ListSubnetsRequest, ...grpc.CallOption) iter.Seq2[*v1.Subnet, error]) *MockSubnetServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSubnetServiceFilterCall) DoAndReturn(f func(context.Context, *v1.ListSubnetsRequest, ...grpc.CallOption) iter.Seq2[*v1.Subnet, error]) *MockSubnetServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockSubnetService) Get(arg0 context.Context, arg1 *v1.GetSubnetRequest, arg2 ...grpc.CallOption) (*v1.Subnet, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSubnetServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockSubnetServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSubnetService)(nil).Get), varargs...)
	return &MockSubnetServiceGetCall{Call: call}
}

// MockSubnetServiceGetCall wrap *gomock.Call
type MockSubnetServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSubnetServiceGetCall) Return(arg0 *v1.Subnet, arg1 error) *MockSubnetServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSubnetServiceGetCall) Do(f func(context.Context, *v1.GetSubnetRequest, ...grpc.CallOption) (*v1.Subnet, error)) *MockSubnetServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSubnetServiceGetCall) DoAndReturn(f func(context.Context, *v1.GetSubnetRequest, ...grpc.CallOption) (*v1.Subnet, error)) *MockSubnetServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockSubnetService) GetByName(arg0 context.Context, arg1 *v1.GetSubnetByNameRequest, arg2 ...grpc.CallOption) (*v1.Subnet, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v1.Subnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockSubnetServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockSubnetServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockSubnetService)(nil).GetByName), varargs...)
	return &MockSubnetServiceGetByNameCall{Call: call}
}

// MockSubnetServiceGetByNameCall wrap *gomock.Call
type MockSubnetServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSubnetServiceGetByNameCall) Return(arg0 *v1.Subnet, arg1 error) *MockSubnetServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSubnetServiceGetByNameCall) Do(f func(context.Context, *v1.GetSubnetByNameRequest, ...grpc.CallOption) (*v1.Subnet, error)) *MockSubnetServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSubnetServiceGetByNameCall) DoAndReturn(f func(context.Context, *v1.GetSubnetByNameRequest, ...grpc.CallOption) (*v1.Subnet, error)) *MockSubnetServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockSubnetService) List(arg0 context.Context, arg1 *v1.ListSubnetsRequest, arg2 ...grpc.CallOption) (*v1.ListSubnetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1.ListSubnetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSubnetServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockSubnetServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSubnetService)(nil).List), varargs...)
	return &MockSubnetServiceListCall{Call: call}
}

// MockSubnetServiceListCall wrap *gomock.Call
type MockSubnetServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSubnetServiceListCall) Return(arg0 *v1.ListSubnetsResponse, arg1 error) *MockSubnetServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSubnetServiceListCall) Do(f func(context.Context, *v1.ListSubnetsRequest, ...grpc.CallOption) (*v1.ListSubnetsResponse, error)) *MockSubnetServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSubnetServiceListCall) DoAndReturn(f func(context.Context, *v1.ListSubnetsRequest, ...grpc.CallOption) (*v1.ListSubnetsResponse, error)) *MockSubnetServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListByNetwork mocks base method.
func (m *MockSubnetService) ListByNetwork(arg0 context.Context, arg1 *v1.ListSubnetsByNetworkRequest, arg2 ...grpc.CallOption) (*v1.ListSubnetsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListByNetwork", varargs...)
	ret0, _ := ret[0].(*v1.ListSubnetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByNetwork indicates an expected call of ListByNetwork.
func (mr *MockSubnetServiceMockRecorder) ListByNetwork(arg0, arg1 any, arg2 ...any) *MockSubnetServiceListByNetworkCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByNetwork", reflect.TypeOf((*MockSubnetService)(nil).ListByNetwork), varargs...)
	return &MockSubnetServiceListByNetworkCall{Call: call}
}

// MockSubnetServiceListByNetworkCall wrap *gomock.Call
type MockSubnetServiceListByNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSubnetServiceListByNetworkCall) Return(arg0 *v1.ListSubnetsResponse, arg1 error) *MockSubnetServiceListByNetworkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSubnetServiceListByNetworkCall) Do(f func(context.Context, *v1.ListSubnetsByNetworkRequest, ...grpc.CallOption) (*v1.ListSubnetsResponse, error)) *MockSubnetServiceListByNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSubnetServiceListByNetworkCall) DoAndReturn(f func(context.Context, *v1.ListSubnetsByNetworkRequest, ...grpc.CallOption) (*v1.ListSubnetsResponse, error)) *MockSubnetServiceListByNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
