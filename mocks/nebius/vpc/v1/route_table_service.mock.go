// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/vpc/v1/route_table_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/vpc/v1/route_table_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/vpc/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockRouteTableService is a mock of RouteTableService interface.
type MockRouteTableService struct {
	ctrl     *gomock.Controller
	recorder *MockRouteTableServiceMockRecorder
}

// MockRouteTableServiceMockRecorder is the mock recorder for MockRouteTableService.
type MockRouteTableServiceMockRecorder struct {
	mock *MockRouteTableService
}

// NewMockRouteTableService creates a new mock instance.
func NewMockRouteTableService(ctrl *gomock.Controller) *MockRouteTableService {
	mock := &MockRouteTableService{ctrl: ctrl}
	mock.recorder = &MockRouteTableServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouteTableService) EXPECT() *MockRouteTableServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRouteTableService) Create(arg0 context.Context, arg1 *v10.CreateRouteTableRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRouteTableServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockRouteTableServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRouteTableService)(nil).Create), varargs...)
	return &MockRouteTableServiceCreateCall{Call: call}
}

// MockRouteTableServiceCreateCall wrap *gomock.Call
type MockRouteTableServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteTableServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockRouteTableServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteTableServiceCreateCall) Do(f func(context.Context, *v10.CreateRouteTableRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRouteTableServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteTableServiceCreateCall) DoAndReturn(f func(context.Context, *v10.CreateRouteTableRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRouteTableServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockRouteTableService) Delete(arg0 context.Context, arg1 *v10.DeleteRouteTableRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockRouteTableServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockRouteTableServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouteTableService)(nil).Delete), varargs...)
	return &MockRouteTableServiceDeleteCall{Call: call}
}

// MockRouteTableServiceDeleteCall wrap *gomock.Call
type MockRouteTableServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteTableServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockRouteTableServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteTableServiceDeleteCall) Do(f func(context.Context, *v10.DeleteRouteTableRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRouteTableServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteTableServiceDeleteCall) DoAndReturn(f func(context.Context, *v10.DeleteRouteTableRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRouteTableServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockRouteTableService) Filter(arg0 context.Context, arg1 *v10.ListRouteTablesRequest, arg2 ...grpc.CallOption) iter.Seq2[*v10.RouteTable, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v10.RouteTable, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockRouteTableServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockRouteTableServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockRouteTableService)(nil).Filter), varargs...)
	return &MockRouteTableServiceFilterCall{Call: call}
}

// MockRouteTableServiceFilterCall wrap *gomock.Call
type MockRouteTableServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteTableServiceFilterCall) Return(arg0 iter.Seq2[*v10.RouteTable, error]) *MockRouteTableServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteTableServiceFilterCall) Do(f func(context.Context, *v10.ListRouteTablesRequest, ...grpc.CallOption) iter.Seq2[*v10.RouteTable, error]) *MockRouteTableServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteTableServiceFilterCall) DoAndReturn(f func(context.Context, *v10.ListRouteTablesRequest, ...grpc.CallOption) iter.Seq2[*v10.RouteTable, error]) *MockRouteTableServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockRouteTableService) Get(arg0 context.Context, arg1 *v10.GetRouteTableRequest, arg2 ...grpc.CallOption) (*v10.RouteTable, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRouteTableServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockRouteTableServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRouteTableService)(nil).Get), varargs...)
	return &MockRouteTableServiceGetCall{Call: call}
}

// MockRouteTableServiceGetCall wrap *gomock.Call
type MockRouteTableServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteTableServiceGetCall) Return(arg0 *v10.RouteTable, arg1 error) *MockRouteTableServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteTableServiceGetCall) Do(f func(context.Context, *v10.GetRouteTableRequest, ...grpc.CallOption) (*v10.RouteTable, error)) *MockRouteTableServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteTableServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetRouteTableRequest, ...grpc.CallOption) (*v10.RouteTable, error)) *MockRouteTableServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockRouteTableService) GetByName(arg0 context.Context, arg1 *v10.GetRouteTableByNameRequest, arg2 ...grpc.CallOption) (*v10.RouteTable, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v10.RouteTable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockRouteTableServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockRouteTableServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockRouteTableService)(nil).GetByName), varargs...)
	return &MockRouteTableServiceGetByNameCall{Call: call}
}

// MockRouteTableServiceGetByNameCall wrap *gomock.Call
type MockRouteTableServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteTableServiceGetByNameCall) Return(arg0 *v10.RouteTable, arg1 error) *MockRouteTableServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteTableServiceGetByNameCall) Do(f func(context.Context, *v10.GetRouteTableByNameRequest, ...grpc.CallOption) (*v10.RouteTable, error)) *MockRouteTableServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteTableServiceGetByNameCall) DoAndReturn(f func(context.Context, *v10.GetRouteTableByNameRequest, ...grpc.CallOption) (*v10.RouteTable, error)) *MockRouteTableServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockRouteTableService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockRouteTableServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockRouteTableServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockRouteTableService)(nil).GetOperation), varargs...)
	return &MockRouteTableServiceGetOperationCall{Call: call}
}

// MockRouteTableServiceGetOperationCall wrap *gomock.Call
type MockRouteTableServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteTableServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockRouteTableServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteTableServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRouteTableServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteTableServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRouteTableServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockRouteTableService) List(arg0 context.Context, arg1 *v10.ListRouteTablesRequest, arg2 ...grpc.CallOption) (*v10.ListRouteTablesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v10.ListRouteTablesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRouteTableServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockRouteTableServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRouteTableService)(nil).List), varargs...)
	return &MockRouteTableServiceListCall{Call: call}
}

// MockRouteTableServiceListCall wrap *gomock.Call
type MockRouteTableServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteTableServiceListCall) Return(arg0 *v10.ListRouteTablesResponse, arg1 error) *MockRouteTableServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteTableServiceListCall) Do(f func(context.Context, *v10.ListRouteTablesRequest, ...grpc.CallOption) (*v10.ListRouteTablesResponse, error)) *MockRouteTableServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteTableServiceListCall) DoAndReturn(f func(context.Context, *v10.ListRouteTablesRequest, ...grpc.CallOption) (*v10.ListRouteTablesResponse, error)) *MockRouteTableServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListByNetwork mocks base method.
func (m *MockRouteTableService) ListByNetwork(arg0 context.Context, arg1 *v10.ListRouteTablesByNetworkRequest, arg2 ...grpc.CallOption) (*v10.ListRouteTablesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListByNetwork", varargs...)
	ret0, _ := ret[0].(*v10.ListRouteTablesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByNetwork indicates an expected call of ListByNetwork.
func (mr *MockRouteTableServiceMockRecorder) ListByNetwork(arg0, arg1 any, arg2 ...any) *MockRouteTableServiceListByNetworkCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByNetwork", reflect.TypeOf((*MockRouteTableService)(nil).ListByNetwork), varargs...)
	return &MockRouteTableServiceListByNetworkCall{Call: call}
}

// MockRouteTableServiceListByNetworkCall wrap *gomock.Call
type MockRouteTableServiceListByNetworkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteTableServiceListByNetworkCall) Return(arg0 *v10.ListRouteTablesResponse, arg1 error) *MockRouteTableServiceListByNetworkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteTableServiceListByNetworkCall) Do(f func(context.Context, *v10.ListRouteTablesByNetworkRequest, ...grpc.CallOption) (*v10.ListRouteTablesResponse, error)) *MockRouteTableServiceListByNetworkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteTableServiceListByNetworkCall) DoAndReturn(f func(context.Context, *v10.ListRouteTablesByNetworkRequest, ...grpc.CallOption) (*v10.ListRouteTablesResponse, error)) *MockRouteTableServiceListByNetworkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockRouteTableService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockRouteTableServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockRouteTableServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockRouteTableService)(nil).ListOperations), varargs...)
	return &MockRouteTableServiceListOperationsCall{Call: call}
}

// MockRouteTableServiceListOperationsCall wrap *gomock.Call
type MockRouteTableServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteTableServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockRouteTableServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteTableServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockRouteTableServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteTableServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockRouteTableServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockRouteTableService) Update(arg0 context.Context, arg1 *v10.UpdateRouteTableRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRouteTableServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockRouteTableServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRouteTableService)(nil).Update), varargs...)
	return &MockRouteTableServiceUpdateCall{Call: call}
}

// MockRouteTableServiceUpdateCall wrap *gomock.Call
type MockRouteTableServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRouteTableServiceUpdateCall) Return(arg0 operations.Operation, arg1 error) *MockRouteTableServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRouteTableServiceUpdateCall) Do(f func(context.Context, *v10.UpdateRouteTableRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRouteTableServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRouteTableServiceUpdateCall) DoAndReturn(f func(context.Context, *v10.UpdateRouteTableRequest, ...grpc.CallOption) (operations.Operation, error)) *MockRouteTableServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
