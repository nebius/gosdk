// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/vpc/v1/target_group_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/vpc/v1/target_group_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/vpc/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTargetGroupService is a mock of TargetGroupService interface.
type MockTargetGroupService struct {
	ctrl     *gomock.Controller
	recorder *MockTargetGroupServiceMockRecorder
}

// MockTargetGroupServiceMockRecorder is the mock recorder for MockTargetGroupService.
type MockTargetGroupServiceMockRecorder struct {
	mock *MockTargetGroupService
}

// NewMockTargetGroupService creates a new mock instance.
func NewMockTargetGroupService(ctrl *gomock.Controller) *MockTargetGroupService {
	mock := &MockTargetGroupService{ctrl: ctrl}
	mock.recorder = &MockTargetGroupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTargetGroupService) EXPECT() *MockTargetGroupServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockTargetGroupService) Get(arg0 context.Context, arg1 *v10.GetTargetGroupRequest, arg2 ...grpc.CallOption) (*v10.TargetGroup, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.TargetGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockTargetGroupServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockTargetGroupServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockTargetGroupService)(nil).Get), varargs...)
	return &MockTargetGroupServiceGetCall{Call: call}
}

// MockTargetGroupServiceGetCall wrap *gomock.Call
type MockTargetGroupServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTargetGroupServiceGetCall) Return(arg0 *v10.TargetGroup, arg1 error) *MockTargetGroupServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTargetGroupServiceGetCall) Do(f func(context.Context, *v10.GetTargetGroupRequest, ...grpc.CallOption) (*v10.TargetGroup, error)) *MockTargetGroupServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTargetGroupServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetTargetGroupRequest, ...grpc.CallOption) (*v10.TargetGroup, error)) *MockTargetGroupServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockTargetGroupService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockTargetGroupServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockTargetGroupServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockTargetGroupService)(nil).GetOperation), varargs...)
	return &MockTargetGroupServiceGetOperationCall{Call: call}
}

// MockTargetGroupServiceGetOperationCall wrap *gomock.Call
type MockTargetGroupServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTargetGroupServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockTargetGroupServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTargetGroupServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTargetGroupServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTargetGroupServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTargetGroupServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockTargetGroupService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockTargetGroupServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockTargetGroupServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockTargetGroupService)(nil).ListOperations), varargs...)
	return &MockTargetGroupServiceListOperationsCall{Call: call}
}

// MockTargetGroupServiceListOperationsCall wrap *gomock.Call
type MockTargetGroupServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTargetGroupServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockTargetGroupServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTargetGroupServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockTargetGroupServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTargetGroupServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockTargetGroupServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockTargetGroupService) Update(arg0 context.Context, arg1 *v10.UpdateTargetGroupRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTargetGroupServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockTargetGroupServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTargetGroupService)(nil).Update), varargs...)
	return &MockTargetGroupServiceUpdateCall{Call: call}
}

// MockTargetGroupServiceUpdateCall wrap *gomock.Call
type MockTargetGroupServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTargetGroupServiceUpdateCall) Return(arg0 operations.Operation, arg1 error) *MockTargetGroupServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTargetGroupServiceUpdateCall) Do(f func(context.Context, *v10.UpdateTargetGroupRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTargetGroupServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTargetGroupServiceUpdateCall) DoAndReturn(f func(context.Context, *v10.UpdateTargetGroupRequest, ...grpc.CallOption) (operations.Operation, error)) *MockTargetGroupServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
