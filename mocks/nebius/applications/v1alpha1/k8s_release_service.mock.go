// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/applications/v1alpha1/k8s_release_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/applications/v1alpha1/k8s_release_service.sdk.go -package v1alpha1 -typed
//

// Package v1alpha1 is a generated GoMock package.
package v1alpha1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1alpha1 "github.com/nebius/gosdk/proto/nebius/applications/v1alpha1"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockK8SReleaseService is a mock of K8SReleaseService interface.
type MockK8SReleaseService struct {
	ctrl     *gomock.Controller
	recorder *MockK8SReleaseServiceMockRecorder
}

// MockK8SReleaseServiceMockRecorder is the mock recorder for MockK8SReleaseService.
type MockK8SReleaseServiceMockRecorder struct {
	mock *MockK8SReleaseService
}

// NewMockK8SReleaseService creates a new mock instance.
func NewMockK8SReleaseService(ctrl *gomock.Controller) *MockK8SReleaseService {
	mock := &MockK8SReleaseService{ctrl: ctrl}
	mock.recorder = &MockK8SReleaseServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockK8SReleaseService) EXPECT() *MockK8SReleaseServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockK8SReleaseService) Create(arg0 context.Context, arg1 *v1alpha1.CreateK8SReleaseRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockK8SReleaseServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockK8SReleaseServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockK8SReleaseService)(nil).Create), varargs...)
	return &MockK8SReleaseServiceCreateCall{Call: call}
}

// MockK8SReleaseServiceCreateCall wrap *gomock.Call
type MockK8SReleaseServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8SReleaseServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockK8SReleaseServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8SReleaseServiceCreateCall) Do(f func(context.Context, *v1alpha1.CreateK8SReleaseRequest, ...grpc.CallOption) (operations.Operation, error)) *MockK8SReleaseServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8SReleaseServiceCreateCall) DoAndReturn(f func(context.Context, *v1alpha1.CreateK8SReleaseRequest, ...grpc.CallOption) (operations.Operation, error)) *MockK8SReleaseServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockK8SReleaseService) Delete(arg0 context.Context, arg1 *v1alpha1.DeleteK8SReleaseRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockK8SReleaseServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockK8SReleaseServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockK8SReleaseService)(nil).Delete), varargs...)
	return &MockK8SReleaseServiceDeleteCall{Call: call}
}

// MockK8SReleaseServiceDeleteCall wrap *gomock.Call
type MockK8SReleaseServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8SReleaseServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockK8SReleaseServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8SReleaseServiceDeleteCall) Do(f func(context.Context, *v1alpha1.DeleteK8SReleaseRequest, ...grpc.CallOption) (operations.Operation, error)) *MockK8SReleaseServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8SReleaseServiceDeleteCall) DoAndReturn(f func(context.Context, *v1alpha1.DeleteK8SReleaseRequest, ...grpc.CallOption) (operations.Operation, error)) *MockK8SReleaseServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockK8SReleaseService) Filter(arg0 context.Context, arg1 *v1alpha1.ListK8SReleasesRequest, arg2 ...grpc.CallOption) iter.Seq2[*v1alpha1.K8SRelease, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v1alpha1.K8SRelease, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockK8SReleaseServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockK8SReleaseServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockK8SReleaseService)(nil).Filter), varargs...)
	return &MockK8SReleaseServiceFilterCall{Call: call}
}

// MockK8SReleaseServiceFilterCall wrap *gomock.Call
type MockK8SReleaseServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8SReleaseServiceFilterCall) Return(arg0 iter.Seq2[*v1alpha1.K8SRelease, error]) *MockK8SReleaseServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8SReleaseServiceFilterCall) Do(f func(context.Context, *v1alpha1.ListK8SReleasesRequest, ...grpc.CallOption) iter.Seq2[*v1alpha1.K8SRelease, error]) *MockK8SReleaseServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8SReleaseServiceFilterCall) DoAndReturn(f func(context.Context, *v1alpha1.ListK8SReleasesRequest, ...grpc.CallOption) iter.Seq2[*v1alpha1.K8SRelease, error]) *MockK8SReleaseServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockK8SReleaseService) Get(arg0 context.Context, arg1 *v1alpha1.GetK8SReleaseRequest, arg2 ...grpc.CallOption) (*v1alpha1.K8SRelease, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1alpha1.K8SRelease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockK8SReleaseServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockK8SReleaseServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockK8SReleaseService)(nil).Get), varargs...)
	return &MockK8SReleaseServiceGetCall{Call: call}
}

// MockK8SReleaseServiceGetCall wrap *gomock.Call
type MockK8SReleaseServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8SReleaseServiceGetCall) Return(arg0 *v1alpha1.K8SRelease, arg1 error) *MockK8SReleaseServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8SReleaseServiceGetCall) Do(f func(context.Context, *v1alpha1.GetK8SReleaseRequest, ...grpc.CallOption) (*v1alpha1.K8SRelease, error)) *MockK8SReleaseServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8SReleaseServiceGetCall) DoAndReturn(f func(context.Context, *v1alpha1.GetK8SReleaseRequest, ...grpc.CallOption) (*v1alpha1.K8SRelease, error)) *MockK8SReleaseServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockK8SReleaseService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockK8SReleaseServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockK8SReleaseServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockK8SReleaseService)(nil).GetOperation), varargs...)
	return &MockK8SReleaseServiceGetOperationCall{Call: call}
}

// MockK8SReleaseServiceGetOperationCall wrap *gomock.Call
type MockK8SReleaseServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8SReleaseServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockK8SReleaseServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8SReleaseServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockK8SReleaseServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8SReleaseServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockK8SReleaseServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockK8SReleaseService) List(arg0 context.Context, arg1 *v1alpha1.ListK8SReleasesRequest, arg2 ...grpc.CallOption) (*v1alpha1.ListK8SReleasesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListK8SReleasesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockK8SReleaseServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockK8SReleaseServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockK8SReleaseService)(nil).List), varargs...)
	return &MockK8SReleaseServiceListCall{Call: call}
}

// MockK8SReleaseServiceListCall wrap *gomock.Call
type MockK8SReleaseServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8SReleaseServiceListCall) Return(arg0 *v1alpha1.ListK8SReleasesResponse, arg1 error) *MockK8SReleaseServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8SReleaseServiceListCall) Do(f func(context.Context, *v1alpha1.ListK8SReleasesRequest, ...grpc.CallOption) (*v1alpha1.ListK8SReleasesResponse, error)) *MockK8SReleaseServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8SReleaseServiceListCall) DoAndReturn(f func(context.Context, *v1alpha1.ListK8SReleasesRequest, ...grpc.CallOption) (*v1alpha1.ListK8SReleasesResponse, error)) *MockK8SReleaseServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockK8SReleaseService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockK8SReleaseServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockK8SReleaseServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockK8SReleaseService)(nil).ListOperations), varargs...)
	return &MockK8SReleaseServiceListOperationsCall{Call: call}
}

// MockK8SReleaseServiceListOperationsCall wrap *gomock.Call
type MockK8SReleaseServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8SReleaseServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockK8SReleaseServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8SReleaseServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockK8SReleaseServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8SReleaseServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockK8SReleaseServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockK8SReleaseService) Update(arg0 context.Context, arg1 *v1alpha1.UpdateK8SReleaseRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockK8SReleaseServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockK8SReleaseServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockK8SReleaseService)(nil).Update), varargs...)
	return &MockK8SReleaseServiceUpdateCall{Call: call}
}

// MockK8SReleaseServiceUpdateCall wrap *gomock.Call
type MockK8SReleaseServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockK8SReleaseServiceUpdateCall) Return(arg0 operations.Operation, arg1 error) *MockK8SReleaseServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockK8SReleaseServiceUpdateCall) Do(f func(context.Context, *v1alpha1.UpdateK8SReleaseRequest, ...grpc.CallOption) (operations.Operation, error)) *MockK8SReleaseServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockK8SReleaseServiceUpdateCall) DoAndReturn(f func(context.Context, *v1alpha1.UpdateK8SReleaseRequest, ...grpc.CallOption) (operations.Operation, error)) *MockK8SReleaseServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
