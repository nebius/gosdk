// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/maintenance/v1alpha1/maintenance_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/maintenance/v1alpha1/maintenance_service.sdk.go -package v1alpha1 -typed
//

// Package v1alpha1 is a generated GoMock package.
package v1alpha1

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/nebius/gosdk/proto/nebius/maintenance/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMaintenanceService is a mock of MaintenanceService interface.
type MockMaintenanceService struct {
	ctrl     *gomock.Controller
	recorder *MockMaintenanceServiceMockRecorder
}

// MockMaintenanceServiceMockRecorder is the mock recorder for MockMaintenanceService.
type MockMaintenanceServiceMockRecorder struct {
	mock *MockMaintenanceService
}

// NewMockMaintenanceService creates a new mock instance.
func NewMockMaintenanceService(ctrl *gomock.Controller) *MockMaintenanceService {
	mock := &MockMaintenanceService{ctrl: ctrl}
	mock.recorder = &MockMaintenanceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMaintenanceService) EXPECT() *MockMaintenanceServiceMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockMaintenanceService) Get(arg0 context.Context, arg1 *v1alpha1.GetMaintenanceRequest, arg2 ...grpc.CallOption) (*v1alpha1.Maintenance, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1alpha1.Maintenance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMaintenanceServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockMaintenanceServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMaintenanceService)(nil).Get), varargs...)
	return &MockMaintenanceServiceGetCall{Call: call}
}

// MockMaintenanceServiceGetCall wrap *gomock.Call
type MockMaintenanceServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMaintenanceServiceGetCall) Return(arg0 *v1alpha1.Maintenance, arg1 error) *MockMaintenanceServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMaintenanceServiceGetCall) Do(f func(context.Context, *v1alpha1.GetMaintenanceRequest, ...grpc.CallOption) (*v1alpha1.Maintenance, error)) *MockMaintenanceServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMaintenanceServiceGetCall) DoAndReturn(f func(context.Context, *v1alpha1.GetMaintenanceRequest, ...grpc.CallOption) (*v1alpha1.Maintenance, error)) *MockMaintenanceServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockMaintenanceService) List(arg0 context.Context, arg1 *v1alpha1.ListMaintenancesRequest, arg2 ...grpc.CallOption) (*v1alpha1.ListMaintenancesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListMaintenancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMaintenanceServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockMaintenanceServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMaintenanceService)(nil).List), varargs...)
	return &MockMaintenanceServiceListCall{Call: call}
}

// MockMaintenanceServiceListCall wrap *gomock.Call
type MockMaintenanceServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMaintenanceServiceListCall) Return(arg0 *v1alpha1.ListMaintenancesResponse, arg1 error) *MockMaintenanceServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMaintenanceServiceListCall) Do(f func(context.Context, *v1alpha1.ListMaintenancesRequest, ...grpc.CallOption) (*v1alpha1.ListMaintenancesResponse, error)) *MockMaintenanceServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMaintenanceServiceListCall) DoAndReturn(f func(context.Context, *v1alpha1.ListMaintenancesRequest, ...grpc.CallOption) (*v1alpha1.ListMaintenancesResponse, error)) *MockMaintenanceServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
