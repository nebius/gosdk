// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/mk8s/v1/node_group_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/mk8s/v1/node_group_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/mk8s/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockNodeGroupService is a mock of NodeGroupService interface.
type MockNodeGroupService struct {
	ctrl     *gomock.Controller
	recorder *MockNodeGroupServiceMockRecorder
}

// MockNodeGroupServiceMockRecorder is the mock recorder for MockNodeGroupService.
type MockNodeGroupServiceMockRecorder struct {
	mock *MockNodeGroupService
}

// NewMockNodeGroupService creates a new mock instance.
func NewMockNodeGroupService(ctrl *gomock.Controller) *MockNodeGroupService {
	mock := &MockNodeGroupService{ctrl: ctrl}
	mock.recorder = &MockNodeGroupServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeGroupService) EXPECT() *MockNodeGroupServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockNodeGroupService) Create(arg0 context.Context, arg1 *v10.CreateNodeGroupRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockNodeGroupServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockNodeGroupServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockNodeGroupService)(nil).Create), varargs...)
	return &MockNodeGroupServiceCreateCall{Call: call}
}

// MockNodeGroupServiceCreateCall wrap *gomock.Call
type MockNodeGroupServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeGroupServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockNodeGroupServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeGroupServiceCreateCall) Do(f func(context.Context, *v10.CreateNodeGroupRequest, ...grpc.CallOption) (operations.Operation, error)) *MockNodeGroupServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeGroupServiceCreateCall) DoAndReturn(f func(context.Context, *v10.CreateNodeGroupRequest, ...grpc.CallOption) (operations.Operation, error)) *MockNodeGroupServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockNodeGroupService) Delete(arg0 context.Context, arg1 *v10.DeleteNodeGroupRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockNodeGroupServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockNodeGroupServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockNodeGroupService)(nil).Delete), varargs...)
	return &MockNodeGroupServiceDeleteCall{Call: call}
}

// MockNodeGroupServiceDeleteCall wrap *gomock.Call
type MockNodeGroupServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeGroupServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockNodeGroupServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeGroupServiceDeleteCall) Do(f func(context.Context, *v10.DeleteNodeGroupRequest, ...grpc.CallOption) (operations.Operation, error)) *MockNodeGroupServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeGroupServiceDeleteCall) DoAndReturn(f func(context.Context, *v10.DeleteNodeGroupRequest, ...grpc.CallOption) (operations.Operation, error)) *MockNodeGroupServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockNodeGroupService) Filter(arg0 context.Context, arg1 *v10.ListNodeGroupsRequest, arg2 ...grpc.CallOption) iter.Seq2[*v10.NodeGroup, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v10.NodeGroup, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockNodeGroupServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockNodeGroupServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockNodeGroupService)(nil).Filter), varargs...)
	return &MockNodeGroupServiceFilterCall{Call: call}
}

// MockNodeGroupServiceFilterCall wrap *gomock.Call
type MockNodeGroupServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeGroupServiceFilterCall) Return(arg0 iter.Seq2[*v10.NodeGroup, error]) *MockNodeGroupServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeGroupServiceFilterCall) Do(f func(context.Context, *v10.ListNodeGroupsRequest, ...grpc.CallOption) iter.Seq2[*v10.NodeGroup, error]) *MockNodeGroupServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeGroupServiceFilterCall) DoAndReturn(f func(context.Context, *v10.ListNodeGroupsRequest, ...grpc.CallOption) iter.Seq2[*v10.NodeGroup, error]) *MockNodeGroupServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockNodeGroupService) Get(arg0 context.Context, arg1 *v10.GetNodeGroupRequest, arg2 ...grpc.CallOption) (*v10.NodeGroup, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.NodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockNodeGroupServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockNodeGroupServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockNodeGroupService)(nil).Get), varargs...)
	return &MockNodeGroupServiceGetCall{Call: call}
}

// MockNodeGroupServiceGetCall wrap *gomock.Call
type MockNodeGroupServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeGroupServiceGetCall) Return(arg0 *v10.NodeGroup, arg1 error) *MockNodeGroupServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeGroupServiceGetCall) Do(f func(context.Context, *v10.GetNodeGroupRequest, ...grpc.CallOption) (*v10.NodeGroup, error)) *MockNodeGroupServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeGroupServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetNodeGroupRequest, ...grpc.CallOption) (*v10.NodeGroup, error)) *MockNodeGroupServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockNodeGroupService) GetByName(arg0 context.Context, arg1 *v1.GetByNameRequest, arg2 ...grpc.CallOption) (*v10.NodeGroup, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v10.NodeGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockNodeGroupServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockNodeGroupServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockNodeGroupService)(nil).GetByName), varargs...)
	return &MockNodeGroupServiceGetByNameCall{Call: call}
}

// MockNodeGroupServiceGetByNameCall wrap *gomock.Call
type MockNodeGroupServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeGroupServiceGetByNameCall) Return(arg0 *v10.NodeGroup, arg1 error) *MockNodeGroupServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeGroupServiceGetByNameCall) Do(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v10.NodeGroup, error)) *MockNodeGroupServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeGroupServiceGetByNameCall) DoAndReturn(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v10.NodeGroup, error)) *MockNodeGroupServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockNodeGroupService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockNodeGroupServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockNodeGroupServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockNodeGroupService)(nil).GetOperation), varargs...)
	return &MockNodeGroupServiceGetOperationCall{Call: call}
}

// MockNodeGroupServiceGetOperationCall wrap *gomock.Call
type MockNodeGroupServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeGroupServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockNodeGroupServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeGroupServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockNodeGroupServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeGroupServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockNodeGroupServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockNodeGroupService) List(arg0 context.Context, arg1 *v10.ListNodeGroupsRequest, arg2 ...grpc.CallOption) (*v10.ListNodeGroupsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v10.ListNodeGroupsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockNodeGroupServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockNodeGroupServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockNodeGroupService)(nil).List), varargs...)
	return &MockNodeGroupServiceListCall{Call: call}
}

// MockNodeGroupServiceListCall wrap *gomock.Call
type MockNodeGroupServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeGroupServiceListCall) Return(arg0 *v10.ListNodeGroupsResponse, arg1 error) *MockNodeGroupServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeGroupServiceListCall) Do(f func(context.Context, *v10.ListNodeGroupsRequest, ...grpc.CallOption) (*v10.ListNodeGroupsResponse, error)) *MockNodeGroupServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeGroupServiceListCall) DoAndReturn(f func(context.Context, *v10.ListNodeGroupsRequest, ...grpc.CallOption) (*v10.ListNodeGroupsResponse, error)) *MockNodeGroupServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockNodeGroupService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockNodeGroupServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockNodeGroupServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockNodeGroupService)(nil).ListOperations), varargs...)
	return &MockNodeGroupServiceListOperationsCall{Call: call}
}

// MockNodeGroupServiceListOperationsCall wrap *gomock.Call
type MockNodeGroupServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeGroupServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockNodeGroupServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeGroupServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockNodeGroupServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeGroupServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockNodeGroupServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockNodeGroupService) Update(arg0 context.Context, arg1 *v10.UpdateNodeGroupRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockNodeGroupServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockNodeGroupServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNodeGroupService)(nil).Update), varargs...)
	return &MockNodeGroupServiceUpdateCall{Call: call}
}

// MockNodeGroupServiceUpdateCall wrap *gomock.Call
type MockNodeGroupServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeGroupServiceUpdateCall) Return(arg0 operations.Operation, arg1 error) *MockNodeGroupServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeGroupServiceUpdateCall) Do(f func(context.Context, *v10.UpdateNodeGroupRequest, ...grpc.CallOption) (operations.Operation, error)) *MockNodeGroupServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeGroupServiceUpdateCall) DoAndReturn(f func(context.Context, *v10.UpdateNodeGroupRequest, ...grpc.CallOption) (operations.Operation, error)) *MockNodeGroupServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Upgrade mocks base method.
func (m *MockNodeGroupService) Upgrade(arg0 context.Context, arg1 *v10.UpgradeNodeGroupRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Upgrade", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upgrade indicates an expected call of Upgrade.
func (mr *MockNodeGroupServiceMockRecorder) Upgrade(arg0, arg1 any, arg2 ...any) *MockNodeGroupServiceUpgradeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upgrade", reflect.TypeOf((*MockNodeGroupService)(nil).Upgrade), varargs...)
	return &MockNodeGroupServiceUpgradeCall{Call: call}
}

// MockNodeGroupServiceUpgradeCall wrap *gomock.Call
type MockNodeGroupServiceUpgradeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNodeGroupServiceUpgradeCall) Return(arg0 operations.Operation, arg1 error) *MockNodeGroupServiceUpgradeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNodeGroupServiceUpgradeCall) Do(f func(context.Context, *v10.UpgradeNodeGroupRequest, ...grpc.CallOption) (operations.Operation, error)) *MockNodeGroupServiceUpgradeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNodeGroupServiceUpgradeCall) DoAndReturn(f func(context.Context, *v10.UpgradeNodeGroupRequest, ...grpc.CallOption) (operations.Operation, error)) *MockNodeGroupServiceUpgradeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
