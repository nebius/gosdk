// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/compute/v1alpha1/instance_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/compute/v1alpha1/instance_service.sdk.go -package v1alpha1 -typed
//

// Package v1alpha1 is a generated GoMock package.
package v1alpha1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	alphaops "github.com/nebius/gosdk/operations/alphaops"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v1alpha1 "github.com/nebius/gosdk/proto/nebius/common/v1alpha1"
	v1alpha10 "github.com/nebius/gosdk/proto/nebius/compute/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockInstanceService is a mock of InstanceService interface.
type MockInstanceService struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceServiceMockRecorder
}

// MockInstanceServiceMockRecorder is the mock recorder for MockInstanceService.
type MockInstanceServiceMockRecorder struct {
	mock *MockInstanceService
}

// NewMockInstanceService creates a new mock instance.
func NewMockInstanceService(ctrl *gomock.Controller) *MockInstanceService {
	mock := &MockInstanceService{ctrl: ctrl}
	mock.recorder = &MockInstanceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceService) EXPECT() *MockInstanceServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockInstanceService) Create(arg0 context.Context, arg1 *v1alpha10.CreateInstanceRequest, arg2 ...grpc.CallOption) (*alphaops.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*alphaops.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockInstanceServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockInstanceServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockInstanceService)(nil).Create), varargs...)
	return &MockInstanceServiceCreateCall{Call: call}
}

// MockInstanceServiceCreateCall wrap *gomock.Call
type MockInstanceServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServiceCreateCall) Return(arg0 *alphaops.Operation, arg1 error) *MockInstanceServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServiceCreateCall) Do(f func(context.Context, *v1alpha10.CreateInstanceRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockInstanceServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServiceCreateCall) DoAndReturn(f func(context.Context, *v1alpha10.CreateInstanceRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockInstanceServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockInstanceService) Delete(arg0 context.Context, arg1 *v1alpha10.DeleteInstanceRequest, arg2 ...grpc.CallOption) (*alphaops.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*alphaops.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockInstanceServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockInstanceServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockInstanceService)(nil).Delete), varargs...)
	return &MockInstanceServiceDeleteCall{Call: call}
}

// MockInstanceServiceDeleteCall wrap *gomock.Call
type MockInstanceServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServiceDeleteCall) Return(arg0 *alphaops.Operation, arg1 error) *MockInstanceServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServiceDeleteCall) Do(f func(context.Context, *v1alpha10.DeleteInstanceRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockInstanceServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServiceDeleteCall) DoAndReturn(f func(context.Context, *v1alpha10.DeleteInstanceRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockInstanceServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockInstanceService) Filter(arg0 context.Context, arg1 *v1alpha10.ListInstancesRequest, arg2 ...grpc.CallOption) iter.Seq2[*v1alpha10.Instance, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v1alpha10.Instance, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockInstanceServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockInstanceServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockInstanceService)(nil).Filter), varargs...)
	return &MockInstanceServiceFilterCall{Call: call}
}

// MockInstanceServiceFilterCall wrap *gomock.Call
type MockInstanceServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServiceFilterCall) Return(arg0 iter.Seq2[*v1alpha10.Instance, error]) *MockInstanceServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServiceFilterCall) Do(f func(context.Context, *v1alpha10.ListInstancesRequest, ...grpc.CallOption) iter.Seq2[*v1alpha10.Instance, error]) *MockInstanceServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServiceFilterCall) DoAndReturn(f func(context.Context, *v1alpha10.ListInstancesRequest, ...grpc.CallOption) iter.Seq2[*v1alpha10.Instance, error]) *MockInstanceServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockInstanceService) Get(arg0 context.Context, arg1 *v1alpha10.GetInstanceRequest, arg2 ...grpc.CallOption) (*v1alpha10.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1alpha10.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockInstanceServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockInstanceServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockInstanceService)(nil).Get), varargs...)
	return &MockInstanceServiceGetCall{Call: call}
}

// MockInstanceServiceGetCall wrap *gomock.Call
type MockInstanceServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServiceGetCall) Return(arg0 *v1alpha10.Instance, arg1 error) *MockInstanceServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServiceGetCall) Do(f func(context.Context, *v1alpha10.GetInstanceRequest, ...grpc.CallOption) (*v1alpha10.Instance, error)) *MockInstanceServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServiceGetCall) DoAndReturn(f func(context.Context, *v1alpha10.GetInstanceRequest, ...grpc.CallOption) (*v1alpha10.Instance, error)) *MockInstanceServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockInstanceService) GetByName(arg0 context.Context, arg1 *v1.GetByNameRequest, arg2 ...grpc.CallOption) (*v1alpha10.Instance, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v1alpha10.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockInstanceServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockInstanceServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockInstanceService)(nil).GetByName), varargs...)
	return &MockInstanceServiceGetByNameCall{Call: call}
}

// MockInstanceServiceGetByNameCall wrap *gomock.Call
type MockInstanceServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServiceGetByNameCall) Return(arg0 *v1alpha10.Instance, arg1 error) *MockInstanceServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServiceGetByNameCall) Do(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v1alpha10.Instance, error)) *MockInstanceServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServiceGetByNameCall) DoAndReturn(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v1alpha10.Instance, error)) *MockInstanceServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockInstanceService) GetOperation(arg0 context.Context, arg1 *v1alpha1.GetOperationRequest, arg2 ...grpc.CallOption) (*alphaops.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(*alphaops.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockInstanceServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockInstanceServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockInstanceService)(nil).GetOperation), varargs...)
	return &MockInstanceServiceGetOperationCall{Call: call}
}

// MockInstanceServiceGetOperationCall wrap *gomock.Call
type MockInstanceServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServiceGetOperationCall) Return(arg0 *alphaops.Operation, arg1 error) *MockInstanceServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServiceGetOperationCall) Do(f func(context.Context, *v1alpha1.GetOperationRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockInstanceServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1alpha1.GetOperationRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockInstanceServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockInstanceService) List(arg0 context.Context, arg1 *v1alpha10.ListInstancesRequest, arg2 ...grpc.CallOption) (*v1alpha10.ListInstancesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1alpha10.ListInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockInstanceServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockInstanceServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockInstanceService)(nil).List), varargs...)
	return &MockInstanceServiceListCall{Call: call}
}

// MockInstanceServiceListCall wrap *gomock.Call
type MockInstanceServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServiceListCall) Return(arg0 *v1alpha10.ListInstancesResponse, arg1 error) *MockInstanceServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServiceListCall) Do(f func(context.Context, *v1alpha10.ListInstancesRequest, ...grpc.CallOption) (*v1alpha10.ListInstancesResponse, error)) *MockInstanceServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServiceListCall) DoAndReturn(f func(context.Context, *v1alpha10.ListInstancesRequest, ...grpc.CallOption) (*v1alpha10.ListInstancesResponse, error)) *MockInstanceServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockInstanceService) ListOperations(arg0 context.Context, arg1 *v1alpha1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1alpha1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockInstanceServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockInstanceServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockInstanceService)(nil).ListOperations), varargs...)
	return &MockInstanceServiceListOperationsCall{Call: call}
}

// MockInstanceServiceListOperationsCall wrap *gomock.Call
type MockInstanceServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServiceListOperationsCall) Return(arg0 *v1alpha1.ListOperationsResponse, arg1 error) *MockInstanceServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServiceListOperationsCall) Do(f func(context.Context, *v1alpha1.ListOperationsRequest, ...grpc.CallOption) (*v1alpha1.ListOperationsResponse, error)) *MockInstanceServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1alpha1.ListOperationsRequest, ...grpc.CallOption) (*v1alpha1.ListOperationsResponse, error)) *MockInstanceServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperationsByParent mocks base method.
func (m *MockInstanceService) ListOperationsByParent(arg0 context.Context, arg1 *v1alpha1.ListOperationsByParentRequest, arg2 ...grpc.CallOption) (*v1alpha1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperationsByParent", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperationsByParent indicates an expected call of ListOperationsByParent.
func (mr *MockInstanceServiceMockRecorder) ListOperationsByParent(arg0, arg1 any, arg2 ...any) *MockInstanceServiceListOperationsByParentCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperationsByParent", reflect.TypeOf((*MockInstanceService)(nil).ListOperationsByParent), varargs...)
	return &MockInstanceServiceListOperationsByParentCall{Call: call}
}

// MockInstanceServiceListOperationsByParentCall wrap *gomock.Call
type MockInstanceServiceListOperationsByParentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServiceListOperationsByParentCall) Return(arg0 *v1alpha1.ListOperationsResponse, arg1 error) *MockInstanceServiceListOperationsByParentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServiceListOperationsByParentCall) Do(f func(context.Context, *v1alpha1.ListOperationsByParentRequest, ...grpc.CallOption) (*v1alpha1.ListOperationsResponse, error)) *MockInstanceServiceListOperationsByParentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServiceListOperationsByParentCall) DoAndReturn(f func(context.Context, *v1alpha1.ListOperationsByParentRequest, ...grpc.CallOption) (*v1alpha1.ListOperationsResponse, error)) *MockInstanceServiceListOperationsByParentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Start mocks base method.
func (m *MockInstanceService) Start(arg0 context.Context, arg1 *v1alpha10.StartInstanceRequest, arg2 ...grpc.CallOption) (*alphaops.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(*alphaops.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockInstanceServiceMockRecorder) Start(arg0, arg1 any, arg2 ...any) *MockInstanceServiceStartCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockInstanceService)(nil).Start), varargs...)
	return &MockInstanceServiceStartCall{Call: call}
}

// MockInstanceServiceStartCall wrap *gomock.Call
type MockInstanceServiceStartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServiceStartCall) Return(arg0 *alphaops.Operation, arg1 error) *MockInstanceServiceStartCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServiceStartCall) Do(f func(context.Context, *v1alpha10.StartInstanceRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockInstanceServiceStartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServiceStartCall) DoAndReturn(f func(context.Context, *v1alpha10.StartInstanceRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockInstanceServiceStartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Stop mocks base method.
func (m *MockInstanceService) Stop(arg0 context.Context, arg1 *v1alpha10.StopInstanceRequest, arg2 ...grpc.CallOption) (*alphaops.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stop", varargs...)
	ret0, _ := ret[0].(*alphaops.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stop indicates an expected call of Stop.
func (mr *MockInstanceServiceMockRecorder) Stop(arg0, arg1 any, arg2 ...any) *MockInstanceServiceStopCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockInstanceService)(nil).Stop), varargs...)
	return &MockInstanceServiceStopCall{Call: call}
}

// MockInstanceServiceStopCall wrap *gomock.Call
type MockInstanceServiceStopCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServiceStopCall) Return(arg0 *alphaops.Operation, arg1 error) *MockInstanceServiceStopCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServiceStopCall) Do(f func(context.Context, *v1alpha10.StopInstanceRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockInstanceServiceStopCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServiceStopCall) DoAndReturn(f func(context.Context, *v1alpha10.StopInstanceRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockInstanceServiceStopCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockInstanceService) Update(arg0 context.Context, arg1 *v1alpha10.UpdateInstanceRequest, arg2 ...grpc.CallOption) (*alphaops.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*alphaops.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockInstanceServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockInstanceServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInstanceService)(nil).Update), varargs...)
	return &MockInstanceServiceUpdateCall{Call: call}
}

// MockInstanceServiceUpdateCall wrap *gomock.Call
type MockInstanceServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockInstanceServiceUpdateCall) Return(arg0 *alphaops.Operation, arg1 error) *MockInstanceServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockInstanceServiceUpdateCall) Do(f func(context.Context, *v1alpha10.UpdateInstanceRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockInstanceServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockInstanceServiceUpdateCall) DoAndReturn(f func(context.Context, *v1alpha10.UpdateInstanceRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockInstanceServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
