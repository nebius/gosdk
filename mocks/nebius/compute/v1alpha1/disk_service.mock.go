// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/compute/v1alpha1/disk_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/compute/v1alpha1/disk_service.sdk.go -package v1alpha1 -typed
//

// Package v1alpha1 is a generated GoMock package.
package v1alpha1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	alphaops "github.com/nebius/gosdk/operations/alphaops"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v1alpha1 "github.com/nebius/gosdk/proto/nebius/common/v1alpha1"
	v1alpha10 "github.com/nebius/gosdk/proto/nebius/compute/v1alpha1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockDiskService is a mock of DiskService interface.
type MockDiskService struct {
	ctrl     *gomock.Controller
	recorder *MockDiskServiceMockRecorder
}

// MockDiskServiceMockRecorder is the mock recorder for MockDiskService.
type MockDiskServiceMockRecorder struct {
	mock *MockDiskService
}

// NewMockDiskService creates a new mock instance.
func NewMockDiskService(ctrl *gomock.Controller) *MockDiskService {
	mock := &MockDiskService{ctrl: ctrl}
	mock.recorder = &MockDiskServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDiskService) EXPECT() *MockDiskServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDiskService) Create(arg0 context.Context, arg1 *v1alpha10.CreateDiskRequest, arg2 ...grpc.CallOption) (*alphaops.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*alphaops.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockDiskServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockDiskServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDiskService)(nil).Create), varargs...)
	return &MockDiskServiceCreateCall{Call: call}
}

// MockDiskServiceCreateCall wrap *gomock.Call
type MockDiskServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiskServiceCreateCall) Return(arg0 *alphaops.Operation, arg1 error) *MockDiskServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiskServiceCreateCall) Do(f func(context.Context, *v1alpha10.CreateDiskRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockDiskServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiskServiceCreateCall) DoAndReturn(f func(context.Context, *v1alpha10.CreateDiskRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockDiskServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockDiskService) Delete(arg0 context.Context, arg1 *v1alpha10.DeleteDiskRequest, arg2 ...grpc.CallOption) (*alphaops.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*alphaops.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDiskServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockDiskServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDiskService)(nil).Delete), varargs...)
	return &MockDiskServiceDeleteCall{Call: call}
}

// MockDiskServiceDeleteCall wrap *gomock.Call
type MockDiskServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiskServiceDeleteCall) Return(arg0 *alphaops.Operation, arg1 error) *MockDiskServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiskServiceDeleteCall) Do(f func(context.Context, *v1alpha10.DeleteDiskRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockDiskServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiskServiceDeleteCall) DoAndReturn(f func(context.Context, *v1alpha10.DeleteDiskRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockDiskServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockDiskService) Filter(arg0 context.Context, arg1 *v1alpha10.ListDisksRequest, arg2 ...grpc.CallOption) iter.Seq2[*v1alpha10.Disk, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v1alpha10.Disk, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockDiskServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockDiskServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockDiskService)(nil).Filter), varargs...)
	return &MockDiskServiceFilterCall{Call: call}
}

// MockDiskServiceFilterCall wrap *gomock.Call
type MockDiskServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiskServiceFilterCall) Return(arg0 iter.Seq2[*v1alpha10.Disk, error]) *MockDiskServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiskServiceFilterCall) Do(f func(context.Context, *v1alpha10.ListDisksRequest, ...grpc.CallOption) iter.Seq2[*v1alpha10.Disk, error]) *MockDiskServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiskServiceFilterCall) DoAndReturn(f func(context.Context, *v1alpha10.ListDisksRequest, ...grpc.CallOption) iter.Seq2[*v1alpha10.Disk, error]) *MockDiskServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockDiskService) Get(arg0 context.Context, arg1 *v1alpha10.GetDiskRequest, arg2 ...grpc.CallOption) (*v1alpha10.Disk, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v1alpha10.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockDiskServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockDiskServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDiskService)(nil).Get), varargs...)
	return &MockDiskServiceGetCall{Call: call}
}

// MockDiskServiceGetCall wrap *gomock.Call
type MockDiskServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiskServiceGetCall) Return(arg0 *v1alpha10.Disk, arg1 error) *MockDiskServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiskServiceGetCall) Do(f func(context.Context, *v1alpha10.GetDiskRequest, ...grpc.CallOption) (*v1alpha10.Disk, error)) *MockDiskServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiskServiceGetCall) DoAndReturn(f func(context.Context, *v1alpha10.GetDiskRequest, ...grpc.CallOption) (*v1alpha10.Disk, error)) *MockDiskServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockDiskService) GetByName(arg0 context.Context, arg1 *v1.GetByNameRequest, arg2 ...grpc.CallOption) (*v1alpha10.Disk, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v1alpha10.Disk)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockDiskServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockDiskServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockDiskService)(nil).GetByName), varargs...)
	return &MockDiskServiceGetByNameCall{Call: call}
}

// MockDiskServiceGetByNameCall wrap *gomock.Call
type MockDiskServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiskServiceGetByNameCall) Return(arg0 *v1alpha10.Disk, arg1 error) *MockDiskServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiskServiceGetByNameCall) Do(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v1alpha10.Disk, error)) *MockDiskServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiskServiceGetByNameCall) DoAndReturn(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v1alpha10.Disk, error)) *MockDiskServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockDiskService) GetOperation(arg0 context.Context, arg1 *v1alpha1.GetOperationRequest, arg2 ...grpc.CallOption) (*alphaops.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(*alphaops.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockDiskServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockDiskServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockDiskService)(nil).GetOperation), varargs...)
	return &MockDiskServiceGetOperationCall{Call: call}
}

// MockDiskServiceGetOperationCall wrap *gomock.Call
type MockDiskServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiskServiceGetOperationCall) Return(arg0 *alphaops.Operation, arg1 error) *MockDiskServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiskServiceGetOperationCall) Do(f func(context.Context, *v1alpha1.GetOperationRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockDiskServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiskServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1alpha1.GetOperationRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockDiskServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockDiskService) List(arg0 context.Context, arg1 *v1alpha10.ListDisksRequest, arg2 ...grpc.CallOption) (*v1alpha10.ListDisksResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v1alpha10.ListDisksResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockDiskServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockDiskServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDiskService)(nil).List), varargs...)
	return &MockDiskServiceListCall{Call: call}
}

// MockDiskServiceListCall wrap *gomock.Call
type MockDiskServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiskServiceListCall) Return(arg0 *v1alpha10.ListDisksResponse, arg1 error) *MockDiskServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiskServiceListCall) Do(f func(context.Context, *v1alpha10.ListDisksRequest, ...grpc.CallOption) (*v1alpha10.ListDisksResponse, error)) *MockDiskServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiskServiceListCall) DoAndReturn(f func(context.Context, *v1alpha10.ListDisksRequest, ...grpc.CallOption) (*v1alpha10.ListDisksResponse, error)) *MockDiskServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockDiskService) ListOperations(arg0 context.Context, arg1 *v1alpha1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1alpha1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockDiskServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockDiskServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockDiskService)(nil).ListOperations), varargs...)
	return &MockDiskServiceListOperationsCall{Call: call}
}

// MockDiskServiceListOperationsCall wrap *gomock.Call
type MockDiskServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiskServiceListOperationsCall) Return(arg0 *v1alpha1.ListOperationsResponse, arg1 error) *MockDiskServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiskServiceListOperationsCall) Do(f func(context.Context, *v1alpha1.ListOperationsRequest, ...grpc.CallOption) (*v1alpha1.ListOperationsResponse, error)) *MockDiskServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiskServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1alpha1.ListOperationsRequest, ...grpc.CallOption) (*v1alpha1.ListOperationsResponse, error)) *MockDiskServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperationsByParent mocks base method.
func (m *MockDiskService) ListOperationsByParent(arg0 context.Context, arg1 *v1alpha1.ListOperationsByParentRequest, arg2 ...grpc.CallOption) (*v1alpha1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperationsByParent", varargs...)
	ret0, _ := ret[0].(*v1alpha1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperationsByParent indicates an expected call of ListOperationsByParent.
func (mr *MockDiskServiceMockRecorder) ListOperationsByParent(arg0, arg1 any, arg2 ...any) *MockDiskServiceListOperationsByParentCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperationsByParent", reflect.TypeOf((*MockDiskService)(nil).ListOperationsByParent), varargs...)
	return &MockDiskServiceListOperationsByParentCall{Call: call}
}

// MockDiskServiceListOperationsByParentCall wrap *gomock.Call
type MockDiskServiceListOperationsByParentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiskServiceListOperationsByParentCall) Return(arg0 *v1alpha1.ListOperationsResponse, arg1 error) *MockDiskServiceListOperationsByParentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiskServiceListOperationsByParentCall) Do(f func(context.Context, *v1alpha1.ListOperationsByParentRequest, ...grpc.CallOption) (*v1alpha1.ListOperationsResponse, error)) *MockDiskServiceListOperationsByParentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiskServiceListOperationsByParentCall) DoAndReturn(f func(context.Context, *v1alpha1.ListOperationsByParentRequest, ...grpc.CallOption) (*v1alpha1.ListOperationsResponse, error)) *MockDiskServiceListOperationsByParentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockDiskService) Update(arg0 context.Context, arg1 *v1alpha10.UpdateDiskRequest, arg2 ...grpc.CallOption) (*alphaops.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*alphaops.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockDiskServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockDiskServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDiskService)(nil).Update), varargs...)
	return &MockDiskServiceUpdateCall{Call: call}
}

// MockDiskServiceUpdateCall wrap *gomock.Call
type MockDiskServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDiskServiceUpdateCall) Return(arg0 *alphaops.Operation, arg1 error) *MockDiskServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDiskServiceUpdateCall) Do(f func(context.Context, *v1alpha10.UpdateDiskRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockDiskServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDiskServiceUpdateCall) DoAndReturn(f func(context.Context, *v1alpha10.UpdateDiskRequest, ...grpc.CallOption) (*alphaops.Operation, error)) *MockDiskServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
