// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/compute/v1/gpu_cluster_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/compute/v1/gpu_cluster_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/compute/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockGpuClusterService is a mock of GpuClusterService interface.
type MockGpuClusterService struct {
	ctrl     *gomock.Controller
	recorder *MockGpuClusterServiceMockRecorder
}

// MockGpuClusterServiceMockRecorder is the mock recorder for MockGpuClusterService.
type MockGpuClusterServiceMockRecorder struct {
	mock *MockGpuClusterService
}

// NewMockGpuClusterService creates a new mock instance.
func NewMockGpuClusterService(ctrl *gomock.Controller) *MockGpuClusterService {
	mock := &MockGpuClusterService{ctrl: ctrl}
	mock.recorder = &MockGpuClusterServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGpuClusterService) EXPECT() *MockGpuClusterServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockGpuClusterService) Create(arg0 context.Context, arg1 *v10.CreateGpuClusterRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockGpuClusterServiceMockRecorder) Create(arg0, arg1 any, arg2 ...any) *MockGpuClusterServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockGpuClusterService)(nil).Create), varargs...)
	return &MockGpuClusterServiceCreateCall{Call: call}
}

// MockGpuClusterServiceCreateCall wrap *gomock.Call
type MockGpuClusterServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGpuClusterServiceCreateCall) Return(arg0 operations.Operation, arg1 error) *MockGpuClusterServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGpuClusterServiceCreateCall) Do(f func(context.Context, *v10.CreateGpuClusterRequest, ...grpc.CallOption) (operations.Operation, error)) *MockGpuClusterServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGpuClusterServiceCreateCall) DoAndReturn(f func(context.Context, *v10.CreateGpuClusterRequest, ...grpc.CallOption) (operations.Operation, error)) *MockGpuClusterServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockGpuClusterService) Delete(arg0 context.Context, arg1 *v10.DeleteGpuClusterRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockGpuClusterServiceMockRecorder) Delete(arg0, arg1 any, arg2 ...any) *MockGpuClusterServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockGpuClusterService)(nil).Delete), varargs...)
	return &MockGpuClusterServiceDeleteCall{Call: call}
}

// MockGpuClusterServiceDeleteCall wrap *gomock.Call
type MockGpuClusterServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGpuClusterServiceDeleteCall) Return(arg0 operations.Operation, arg1 error) *MockGpuClusterServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGpuClusterServiceDeleteCall) Do(f func(context.Context, *v10.DeleteGpuClusterRequest, ...grpc.CallOption) (operations.Operation, error)) *MockGpuClusterServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGpuClusterServiceDeleteCall) DoAndReturn(f func(context.Context, *v10.DeleteGpuClusterRequest, ...grpc.CallOption) (operations.Operation, error)) *MockGpuClusterServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Filter mocks base method.
func (m *MockGpuClusterService) Filter(arg0 context.Context, arg1 *v10.ListGpuClustersRequest, arg2 ...grpc.CallOption) iter.Seq2[*v10.GpuCluster, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v10.GpuCluster, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockGpuClusterServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockGpuClusterServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockGpuClusterService)(nil).Filter), varargs...)
	return &MockGpuClusterServiceFilterCall{Call: call}
}

// MockGpuClusterServiceFilterCall wrap *gomock.Call
type MockGpuClusterServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGpuClusterServiceFilterCall) Return(arg0 iter.Seq2[*v10.GpuCluster, error]) *MockGpuClusterServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGpuClusterServiceFilterCall) Do(f func(context.Context, *v10.ListGpuClustersRequest, ...grpc.CallOption) iter.Seq2[*v10.GpuCluster, error]) *MockGpuClusterServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGpuClusterServiceFilterCall) DoAndReturn(f func(context.Context, *v10.ListGpuClustersRequest, ...grpc.CallOption) iter.Seq2[*v10.GpuCluster, error]) *MockGpuClusterServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockGpuClusterService) Get(arg0 context.Context, arg1 *v10.GetGpuClusterRequest, arg2 ...grpc.CallOption) (*v10.GpuCluster, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*v10.GpuCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockGpuClusterServiceMockRecorder) Get(arg0, arg1 any, arg2 ...any) *MockGpuClusterServiceGetCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockGpuClusterService)(nil).Get), varargs...)
	return &MockGpuClusterServiceGetCall{Call: call}
}

// MockGpuClusterServiceGetCall wrap *gomock.Call
type MockGpuClusterServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGpuClusterServiceGetCall) Return(arg0 *v10.GpuCluster, arg1 error) *MockGpuClusterServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGpuClusterServiceGetCall) Do(f func(context.Context, *v10.GetGpuClusterRequest, ...grpc.CallOption) (*v10.GpuCluster, error)) *MockGpuClusterServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGpuClusterServiceGetCall) DoAndReturn(f func(context.Context, *v10.GetGpuClusterRequest, ...grpc.CallOption) (*v10.GpuCluster, error)) *MockGpuClusterServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockGpuClusterService) GetByName(arg0 context.Context, arg1 *v1.GetByNameRequest, arg2 ...grpc.CallOption) (*v10.GpuCluster, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v10.GpuCluster)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockGpuClusterServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockGpuClusterServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockGpuClusterService)(nil).GetByName), varargs...)
	return &MockGpuClusterServiceGetByNameCall{Call: call}
}

// MockGpuClusterServiceGetByNameCall wrap *gomock.Call
type MockGpuClusterServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGpuClusterServiceGetByNameCall) Return(arg0 *v10.GpuCluster, arg1 error) *MockGpuClusterServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGpuClusterServiceGetByNameCall) Do(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v10.GpuCluster, error)) *MockGpuClusterServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGpuClusterServiceGetByNameCall) DoAndReturn(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v10.GpuCluster, error)) *MockGpuClusterServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOperation mocks base method.
func (m *MockGpuClusterService) GetOperation(arg0 context.Context, arg1 *v1.GetOperationRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOperation", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockGpuClusterServiceMockRecorder) GetOperation(arg0, arg1 any, arg2 ...any) *MockGpuClusterServiceGetOperationCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockGpuClusterService)(nil).GetOperation), varargs...)
	return &MockGpuClusterServiceGetOperationCall{Call: call}
}

// MockGpuClusterServiceGetOperationCall wrap *gomock.Call
type MockGpuClusterServiceGetOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGpuClusterServiceGetOperationCall) Return(arg0 operations.Operation, arg1 error) *MockGpuClusterServiceGetOperationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGpuClusterServiceGetOperationCall) Do(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockGpuClusterServiceGetOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGpuClusterServiceGetOperationCall) DoAndReturn(f func(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)) *MockGpuClusterServiceGetOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockGpuClusterService) List(arg0 context.Context, arg1 *v10.ListGpuClustersRequest, arg2 ...grpc.CallOption) (*v10.ListGpuClustersResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v10.ListGpuClustersResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockGpuClusterServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockGpuClusterServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGpuClusterService)(nil).List), varargs...)
	return &MockGpuClusterServiceListCall{Call: call}
}

// MockGpuClusterServiceListCall wrap *gomock.Call
type MockGpuClusterServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGpuClusterServiceListCall) Return(arg0 *v10.ListGpuClustersResponse, arg1 error) *MockGpuClusterServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGpuClusterServiceListCall) Do(f func(context.Context, *v10.ListGpuClustersRequest, ...grpc.CallOption) (*v10.ListGpuClustersResponse, error)) *MockGpuClusterServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGpuClusterServiceListCall) DoAndReturn(f func(context.Context, *v10.ListGpuClustersRequest, ...grpc.CallOption) (*v10.ListGpuClustersResponse, error)) *MockGpuClusterServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperations mocks base method.
func (m *MockGpuClusterService) ListOperations(arg0 context.Context, arg1 *v1.ListOperationsRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperations", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperations indicates an expected call of ListOperations.
func (mr *MockGpuClusterServiceMockRecorder) ListOperations(arg0, arg1 any, arg2 ...any) *MockGpuClusterServiceListOperationsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperations", reflect.TypeOf((*MockGpuClusterService)(nil).ListOperations), varargs...)
	return &MockGpuClusterServiceListOperationsCall{Call: call}
}

// MockGpuClusterServiceListOperationsCall wrap *gomock.Call
type MockGpuClusterServiceListOperationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGpuClusterServiceListOperationsCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockGpuClusterServiceListOperationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGpuClusterServiceListOperationsCall) Do(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockGpuClusterServiceListOperationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGpuClusterServiceListOperationsCall) DoAndReturn(f func(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockGpuClusterServiceListOperationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListOperationsByParent mocks base method.
func (m *MockGpuClusterService) ListOperationsByParent(arg0 context.Context, arg1 *v10.ListOperationsByParentRequest, arg2 ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListOperationsByParent", varargs...)
	ret0, _ := ret[0].(*v1.ListOperationsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOperationsByParent indicates an expected call of ListOperationsByParent.
func (mr *MockGpuClusterServiceMockRecorder) ListOperationsByParent(arg0, arg1 any, arg2 ...any) *MockGpuClusterServiceListOperationsByParentCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOperationsByParent", reflect.TypeOf((*MockGpuClusterService)(nil).ListOperationsByParent), varargs...)
	return &MockGpuClusterServiceListOperationsByParentCall{Call: call}
}

// MockGpuClusterServiceListOperationsByParentCall wrap *gomock.Call
type MockGpuClusterServiceListOperationsByParentCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGpuClusterServiceListOperationsByParentCall) Return(arg0 *v1.ListOperationsResponse, arg1 error) *MockGpuClusterServiceListOperationsByParentCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGpuClusterServiceListOperationsByParentCall) Do(f func(context.Context, *v10.ListOperationsByParentRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockGpuClusterServiceListOperationsByParentCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGpuClusterServiceListOperationsByParentCall) DoAndReturn(f func(context.Context, *v10.ListOperationsByParentRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)) *MockGpuClusterServiceListOperationsByParentCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockGpuClusterService) Update(arg0 context.Context, arg1 *v10.UpdateGpuClusterRequest, arg2 ...grpc.CallOption) (operations.Operation, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(operations.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockGpuClusterServiceMockRecorder) Update(arg0, arg1 any, arg2 ...any) *MockGpuClusterServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGpuClusterService)(nil).Update), varargs...)
	return &MockGpuClusterServiceUpdateCall{Call: call}
}

// MockGpuClusterServiceUpdateCall wrap *gomock.Call
type MockGpuClusterServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockGpuClusterServiceUpdateCall) Return(arg0 operations.Operation, arg1 error) *MockGpuClusterServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockGpuClusterServiceUpdateCall) Do(f func(context.Context, *v10.UpdateGpuClusterRequest, ...grpc.CallOption) (operations.Operation, error)) *MockGpuClusterServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockGpuClusterServiceUpdateCall) DoAndReturn(f func(context.Context, *v10.UpdateGpuClusterRequest, ...grpc.CallOption) (operations.Operation, error)) *MockGpuClusterServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
