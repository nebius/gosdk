// Code generated by MockGen. DO NOT EDIT.
// Source: services/nebius/compute/v1/platform_service.sdk.go
//
// Generated by this command:
//
//	mockgen -source services/nebius/compute/v1/platform_service.sdk.go -package v1 -typed
//

// Package v1 is a generated GoMock package.
package v1

import (
	context "context"
	reflect "reflect"

	iter "github.com/nebius/gosdk/iter"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v10 "github.com/nebius/gosdk/proto/nebius/compute/v1"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPlatformService is a mock of PlatformService interface.
type MockPlatformService struct {
	ctrl     *gomock.Controller
	recorder *MockPlatformServiceMockRecorder
}

// MockPlatformServiceMockRecorder is the mock recorder for MockPlatformService.
type MockPlatformServiceMockRecorder struct {
	mock *MockPlatformService
}

// NewMockPlatformService creates a new mock instance.
func NewMockPlatformService(ctrl *gomock.Controller) *MockPlatformService {
	mock := &MockPlatformService{ctrl: ctrl}
	mock.recorder = &MockPlatformServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlatformService) EXPECT() *MockPlatformServiceMockRecorder {
	return m.recorder
}

// Filter mocks base method.
func (m *MockPlatformService) Filter(arg0 context.Context, arg1 *v10.ListPlatformsRequest, arg2 ...grpc.CallOption) iter.Seq2[*v10.Platform, error] {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Filter", varargs...)
	ret0, _ := ret[0].(iter.Seq2[*v10.Platform, error])
	return ret0
}

// Filter indicates an expected call of Filter.
func (mr *MockPlatformServiceMockRecorder) Filter(arg0, arg1 any, arg2 ...any) *MockPlatformServiceFilterCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Filter", reflect.TypeOf((*MockPlatformService)(nil).Filter), varargs...)
	return &MockPlatformServiceFilterCall{Call: call}
}

// MockPlatformServiceFilterCall wrap *gomock.Call
type MockPlatformServiceFilterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPlatformServiceFilterCall) Return(arg0 iter.Seq2[*v10.Platform, error]) *MockPlatformServiceFilterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPlatformServiceFilterCall) Do(f func(context.Context, *v10.ListPlatformsRequest, ...grpc.CallOption) iter.Seq2[*v10.Platform, error]) *MockPlatformServiceFilterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPlatformServiceFilterCall) DoAndReturn(f func(context.Context, *v10.ListPlatformsRequest, ...grpc.CallOption) iter.Seq2[*v10.Platform, error]) *MockPlatformServiceFilterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetByName mocks base method.
func (m *MockPlatformService) GetByName(arg0 context.Context, arg1 *v1.GetByNameRequest, arg2 ...grpc.CallOption) (*v10.Platform, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetByName", varargs...)
	ret0, _ := ret[0].(*v10.Platform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByName indicates an expected call of GetByName.
func (mr *MockPlatformServiceMockRecorder) GetByName(arg0, arg1 any, arg2 ...any) *MockPlatformServiceGetByNameCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByName", reflect.TypeOf((*MockPlatformService)(nil).GetByName), varargs...)
	return &MockPlatformServiceGetByNameCall{Call: call}
}

// MockPlatformServiceGetByNameCall wrap *gomock.Call
type MockPlatformServiceGetByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPlatformServiceGetByNameCall) Return(arg0 *v10.Platform, arg1 error) *MockPlatformServiceGetByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPlatformServiceGetByNameCall) Do(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v10.Platform, error)) *MockPlatformServiceGetByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPlatformServiceGetByNameCall) DoAndReturn(f func(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v10.Platform, error)) *MockPlatformServiceGetByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockPlatformService) List(arg0 context.Context, arg1 *v10.ListPlatformsRequest, arg2 ...grpc.CallOption) (*v10.ListPlatformsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*v10.ListPlatformsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPlatformServiceMockRecorder) List(arg0, arg1 any, arg2 ...any) *MockPlatformServiceListCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPlatformService)(nil).List), varargs...)
	return &MockPlatformServiceListCall{Call: call}
}

// MockPlatformServiceListCall wrap *gomock.Call
type MockPlatformServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPlatformServiceListCall) Return(arg0 *v10.ListPlatformsResponse, arg1 error) *MockPlatformServiceListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPlatformServiceListCall) Do(f func(context.Context, *v10.ListPlatformsRequest, ...grpc.CallOption) (*v10.ListPlatformsResponse, error)) *MockPlatformServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPlatformServiceListCall) DoAndReturn(f func(context.Context, *v10.ListPlatformsRequest, ...grpc.CallOption) (*v10.ListPlatformsResponse, error)) *MockPlatformServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
