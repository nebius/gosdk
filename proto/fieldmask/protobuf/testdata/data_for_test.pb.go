// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.3
// source: api/tools/public/gosdk/proto/fieldmask/protobuf/testdata/data_for_test.proto

package testdata

import (
	_ "github.com/nebius/gosdk/proto/nebius"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Just a simple Enum
type ABC int32

const (
	ABC_ABC_UNDEFINED ABC = 0
	ABC_ABC_A         ABC = 1
	ABC_ABC_B         ABC = 2
	ABC_ABC_C         ABC = 3
)

// Enum value maps for ABC.
var (
	ABC_name = map[int32]string{
		0: "ABC_UNDEFINED",
		1: "ABC_A",
		2: "ABC_B",
		3: "ABC_C",
	}
	ABC_value = map[string]int32{
		"ABC_UNDEFINED": 0,
		"ABC_A":         1,
		"ABC_B":         2,
		"ABC_C":         3,
	}
)

func (x ABC) Enum() *ABC {
	p := new(ABC)
	*p = x
	return p
}

func (x ABC) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ABC) Descriptor() protoreflect.EnumDescriptor {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_enumTypes[0].Descriptor()
}

func (ABC) Type() protoreflect.EnumType {
	return &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_enumTypes[0]
}

func (x ABC) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ABC.Descriptor instead.
func (ABC) EnumDescriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{0}
}

// Same Enum but with aliases
type AliasedABC int32

const (
	AliasedABC_AABC_UNDEFINED AliasedABC = 0
	AliasedABC_AABC_A         AliasedABC = 1
	AliasedABC_AABC_B         AliasedABC = 2
	AliasedABC_AABC_B2        AliasedABC = 2
	AliasedABC_AABC_C         AliasedABC = 3
)

// Enum value maps for AliasedABC.
var (
	AliasedABC_name = map[int32]string{
		0: "AABC_UNDEFINED",
		1: "AABC_A",
		2: "AABC_B",
		// Duplicate value: 2: "AABC_B2",
		3: "AABC_C",
	}
	AliasedABC_value = map[string]int32{
		"AABC_UNDEFINED": 0,
		"AABC_A":         1,
		"AABC_B":         2,
		"AABC_B2":        2,
		"AABC_C":         3,
	}
)

func (x AliasedABC) Enum() *AliasedABC {
	p := new(AliasedABC)
	*p = x
	return p
}

func (x AliasedABC) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AliasedABC) Descriptor() protoreflect.EnumDescriptor {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_enumTypes[1].Descriptor()
}

func (AliasedABC) Type() protoreflect.EnumType {
	return &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_enumTypes[1]
}

func (x AliasedABC) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AliasedABC.Descriptor instead.
func (AliasedABC) EnumDescriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{1}
}

// This struct is recursive
// TF does not support recursive structs
// Possible solution:
// * use serialized representation
type RecursiveStruct struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	SomeString    string                 `protobuf:"bytes,1,opt,name=some_string,json=someString,proto3" json:"some_string,omitempty"`
	Recursive     *RecursiveStruct       `protobuf:"bytes,2,opt,name=recursive,proto3" json:"recursive,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecursiveStruct) Reset() {
	*x = RecursiveStruct{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecursiveStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecursiveStruct) ProtoMessage() {}

func (x *RecursiveStruct) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecursiveStruct.ProtoReflect.Descriptor instead.
func (*RecursiveStruct) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{0}
}

func (x *RecursiveStruct) GetSomeString() string {
	if x != nil {
		return x.SomeString
	}
	return ""
}

func (x *RecursiveStruct) GetRecursive() *RecursiveStruct {
	if x != nil {
		return x.Recursive
	}
	return nil
}

type TestSimple struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TestDouble      float64                `protobuf:"fixed64,1,opt,name=test_double,json=testDouble,proto3" json:"test_double,omitempty"`
	TestFloat       float32                `protobuf:"fixed32,2,opt,name=test_float,json=testFloat,proto3" json:"test_float,omitempty"`
	TestInt32       int32                  `protobuf:"varint,3,opt,name=test_int32,json=testInt32,proto3" json:"test_int32,omitempty"`
	TestInt64       int64                  `protobuf:"varint,4,opt,name=test_int64,json=testInt64,proto3" json:"test_int64,omitempty"`
	TestUint32      uint32                 `protobuf:"varint,5,opt,name=test_uint32,json=testUint32,proto3" json:"test_uint32,omitempty"`
	TestUint64      uint64                 `protobuf:"varint,6,opt,name=test_uint64,json=testUint64,proto3" json:"test_uint64,omitempty"`
	TestSint32      int32                  `protobuf:"zigzag32,7,opt,name=test_sint32,json=testSint32,proto3" json:"test_sint32,omitempty"`
	TestSint64      int64                  `protobuf:"zigzag64,8,opt,name=test_sint64,json=testSint64,proto3" json:"test_sint64,omitempty"`
	TestFixed32     uint32                 `protobuf:"fixed32,9,opt,name=test_fixed32,json=testFixed32,proto3" json:"test_fixed32,omitempty"`
	TestFixed64     uint64                 `protobuf:"fixed64,10,opt,name=test_fixed64,json=testFixed64,proto3" json:"test_fixed64,omitempty"`
	TestSfixed32    int32                  `protobuf:"fixed32,11,opt,name=test_sfixed32,json=testSfixed32,proto3" json:"test_sfixed32,omitempty"`
	TestSfixed64    int64                  `protobuf:"fixed64,12,opt,name=test_sfixed64,json=testSfixed64,proto3" json:"test_sfixed64,omitempty"`
	TestBool        bool                   `protobuf:"varint,13,opt,name=test_bool,json=testBool,proto3" json:"test_bool,omitempty"`
	TestString      string                 `protobuf:"bytes,14,opt,name=test_string,json=testString,proto3" json:"test_string,omitempty"`
	TestBytes       []byte                 `protobuf:"bytes,15,opt,name=test_bytes,json=testBytes,proto3" json:"test_bytes,omitempty"`
	TestEnum        ABC                    `protobuf:"varint,16,opt,name=test_enum,json=testEnum,proto3,enum=nebius.testdata.ABC" json:"test_enum,omitempty"`
	TestAliasedEnum AliasedABC             `protobuf:"varint,17,opt,name=test_aliased_enum,json=testAliasedEnum,proto3,enum=nebius.testdata.AliasedABC" json:"test_aliased_enum,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TestSimple) Reset() {
	*x = TestSimple{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestSimple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSimple) ProtoMessage() {}

func (x *TestSimple) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSimple.ProtoReflect.Descriptor instead.
func (*TestSimple) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{1}
}

func (x *TestSimple) GetTestDouble() float64 {
	if x != nil {
		return x.TestDouble
	}
	return 0
}

func (x *TestSimple) GetTestFloat() float32 {
	if x != nil {
		return x.TestFloat
	}
	return 0
}

func (x *TestSimple) GetTestInt32() int32 {
	if x != nil {
		return x.TestInt32
	}
	return 0
}

func (x *TestSimple) GetTestInt64() int64 {
	if x != nil {
		return x.TestInt64
	}
	return 0
}

func (x *TestSimple) GetTestUint32() uint32 {
	if x != nil {
		return x.TestUint32
	}
	return 0
}

func (x *TestSimple) GetTestUint64() uint64 {
	if x != nil {
		return x.TestUint64
	}
	return 0
}

func (x *TestSimple) GetTestSint32() int32 {
	if x != nil {
		return x.TestSint32
	}
	return 0
}

func (x *TestSimple) GetTestSint64() int64 {
	if x != nil {
		return x.TestSint64
	}
	return 0
}

func (x *TestSimple) GetTestFixed32() uint32 {
	if x != nil {
		return x.TestFixed32
	}
	return 0
}

func (x *TestSimple) GetTestFixed64() uint64 {
	if x != nil {
		return x.TestFixed64
	}
	return 0
}

func (x *TestSimple) GetTestSfixed32() int32 {
	if x != nil {
		return x.TestSfixed32
	}
	return 0
}

func (x *TestSimple) GetTestSfixed64() int64 {
	if x != nil {
		return x.TestSfixed64
	}
	return 0
}

func (x *TestSimple) GetTestBool() bool {
	if x != nil {
		return x.TestBool
	}
	return false
}

func (x *TestSimple) GetTestString() string {
	if x != nil {
		return x.TestString
	}
	return ""
}

func (x *TestSimple) GetTestBytes() []byte {
	if x != nil {
		return x.TestBytes
	}
	return nil
}

func (x *TestSimple) GetTestEnum() ABC {
	if x != nil {
		return x.TestEnum
	}
	return ABC_ABC_UNDEFINED
}

func (x *TestSimple) GetTestAliasedEnum() AliasedABC {
	if x != nil {
		return x.TestAliasedEnum
	}
	return AliasedABC_AABC_UNDEFINED
}

type TestRepeated struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TestDouble      []float64              `protobuf:"fixed64,1,rep,packed,name=test_double,json=testDouble,proto3" json:"test_double,omitempty"`
	TestFloat       []float32              `protobuf:"fixed32,2,rep,packed,name=test_float,json=testFloat,proto3" json:"test_float,omitempty"`
	TestInt32       []int32                `protobuf:"varint,3,rep,packed,name=test_int32,json=testInt32,proto3" json:"test_int32,omitempty"`
	TestInt64       []int64                `protobuf:"varint,4,rep,packed,name=test_int64,json=testInt64,proto3" json:"test_int64,omitempty"`
	TestUint32      []uint32               `protobuf:"varint,5,rep,packed,name=test_uint32,json=testUint32,proto3" json:"test_uint32,omitempty"`
	TestUint64      []uint64               `protobuf:"varint,6,rep,packed,name=test_uint64,json=testUint64,proto3" json:"test_uint64,omitempty"`
	TestSint32      []int32                `protobuf:"zigzag32,7,rep,packed,name=test_sint32,json=testSint32,proto3" json:"test_sint32,omitempty"`
	TestSint64      []int64                `protobuf:"zigzag64,8,rep,packed,name=test_sint64,json=testSint64,proto3" json:"test_sint64,omitempty"`
	TestFixed32     []uint32               `protobuf:"fixed32,9,rep,packed,name=test_fixed32,json=testFixed32,proto3" json:"test_fixed32,omitempty"`
	TestFixed64     []uint64               `protobuf:"fixed64,10,rep,packed,name=test_fixed64,json=testFixed64,proto3" json:"test_fixed64,omitempty"`
	TestSfixed32    []int32                `protobuf:"fixed32,11,rep,packed,name=test_sfixed32,json=testSfixed32,proto3" json:"test_sfixed32,omitempty"`
	TestSfixed64    []int64                `protobuf:"fixed64,12,rep,packed,name=test_sfixed64,json=testSfixed64,proto3" json:"test_sfixed64,omitempty"`
	TestBool        []bool                 `protobuf:"varint,13,rep,packed,name=test_bool,json=testBool,proto3" json:"test_bool,omitempty"`
	TestString      []string               `protobuf:"bytes,14,rep,name=test_string,json=testString,proto3" json:"test_string,omitempty"`
	TestBytes       [][]byte               `protobuf:"bytes,15,rep,name=test_bytes,json=testBytes,proto3" json:"test_bytes,omitempty"`
	TestEnum        []ABC                  `protobuf:"varint,16,rep,packed,name=test_enum,json=testEnum,proto3,enum=nebius.testdata.ABC" json:"test_enum,omitempty"`
	TestAliasedEnum []AliasedABC           `protobuf:"varint,17,rep,packed,name=test_aliased_enum,json=testAliasedEnum,proto3,enum=nebius.testdata.AliasedABC" json:"test_aliased_enum,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TestRepeated) Reset() {
	*x = TestRepeated{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRepeated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRepeated) ProtoMessage() {}

func (x *TestRepeated) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRepeated.ProtoReflect.Descriptor instead.
func (*TestRepeated) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{2}
}

func (x *TestRepeated) GetTestDouble() []float64 {
	if x != nil {
		return x.TestDouble
	}
	return nil
}

func (x *TestRepeated) GetTestFloat() []float32 {
	if x != nil {
		return x.TestFloat
	}
	return nil
}

func (x *TestRepeated) GetTestInt32() []int32 {
	if x != nil {
		return x.TestInt32
	}
	return nil
}

func (x *TestRepeated) GetTestInt64() []int64 {
	if x != nil {
		return x.TestInt64
	}
	return nil
}

func (x *TestRepeated) GetTestUint32() []uint32 {
	if x != nil {
		return x.TestUint32
	}
	return nil
}

func (x *TestRepeated) GetTestUint64() []uint64 {
	if x != nil {
		return x.TestUint64
	}
	return nil
}

func (x *TestRepeated) GetTestSint32() []int32 {
	if x != nil {
		return x.TestSint32
	}
	return nil
}

func (x *TestRepeated) GetTestSint64() []int64 {
	if x != nil {
		return x.TestSint64
	}
	return nil
}

func (x *TestRepeated) GetTestFixed32() []uint32 {
	if x != nil {
		return x.TestFixed32
	}
	return nil
}

func (x *TestRepeated) GetTestFixed64() []uint64 {
	if x != nil {
		return x.TestFixed64
	}
	return nil
}

func (x *TestRepeated) GetTestSfixed32() []int32 {
	if x != nil {
		return x.TestSfixed32
	}
	return nil
}

func (x *TestRepeated) GetTestSfixed64() []int64 {
	if x != nil {
		return x.TestSfixed64
	}
	return nil
}

func (x *TestRepeated) GetTestBool() []bool {
	if x != nil {
		return x.TestBool
	}
	return nil
}

func (x *TestRepeated) GetTestString() []string {
	if x != nil {
		return x.TestString
	}
	return nil
}

func (x *TestRepeated) GetTestBytes() [][]byte {
	if x != nil {
		return x.TestBytes
	}
	return nil
}

func (x *TestRepeated) GetTestEnum() []ABC {
	if x != nil {
		return x.TestEnum
	}
	return nil
}

func (x *TestRepeated) GetTestAliasedEnum() []AliasedABC {
	if x != nil {
		return x.TestAliasedEnum
	}
	return nil
}

type TestStringMap struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	TestDouble      map[string]float64     `protobuf:"bytes,1,rep,name=test_double,json=testDouble,proto3" json:"test_double,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	TestFloat       map[string]float32     `protobuf:"bytes,2,rep,name=test_float,json=testFloat,proto3" json:"test_float,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	TestInt32       map[string]int32       `protobuf:"bytes,3,rep,name=test_int32,json=testInt32,proto3" json:"test_int32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	TestInt64       map[string]int64       `protobuf:"bytes,4,rep,name=test_int64,json=testInt64,proto3" json:"test_int64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	TestUint32      map[string]uint32      `protobuf:"bytes,5,rep,name=test_uint32,json=testUint32,proto3" json:"test_uint32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	TestUint64      map[string]uint64      `protobuf:"bytes,6,rep,name=test_uint64,json=testUint64,proto3" json:"test_uint64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	TestSint32      map[string]int32       `protobuf:"bytes,7,rep,name=test_sint32,json=testSint32,proto3" json:"test_sint32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	TestSint64      map[string]int64       `protobuf:"bytes,8,rep,name=test_sint64,json=testSint64,proto3" json:"test_sint64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	TestFixed32     map[string]uint32      `protobuf:"bytes,9,rep,name=test_fixed32,json=testFixed32,proto3" json:"test_fixed32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	TestFixed64     map[string]uint64      `protobuf:"bytes,10,rep,name=test_fixed64,json=testFixed64,proto3" json:"test_fixed64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	TestSfixed32    map[string]int32       `protobuf:"bytes,11,rep,name=test_sfixed32,json=testSfixed32,proto3" json:"test_sfixed32,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	TestSfixed64    map[string]int64       `protobuf:"bytes,12,rep,name=test_sfixed64,json=testSfixed64,proto3" json:"test_sfixed64,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	TestBool        map[string]bool        `protobuf:"bytes,13,rep,name=test_bool,json=testBool,proto3" json:"test_bool,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	TestString      map[string]string      `protobuf:"bytes,14,rep,name=test_string,json=testString,proto3" json:"test_string,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TestBytes       map[string][]byte      `protobuf:"bytes,15,rep,name=test_bytes,json=testBytes,proto3" json:"test_bytes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TestEnum        map[string]ABC         `protobuf:"bytes,16,rep,name=test_enum,json=testEnum,proto3" json:"test_enum,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=nebius.testdata.ABC"`
	TestAliasedEnum map[string]AliasedABC  `protobuf:"bytes,17,rep,name=test_aliased_enum,json=testAliasedEnum,proto3" json:"test_aliased_enum,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=nebius.testdata.AliasedABC"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TestStringMap) Reset() {
	*x = TestStringMap{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStringMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStringMap) ProtoMessage() {}

func (x *TestStringMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestStringMap.ProtoReflect.Descriptor instead.
func (*TestStringMap) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{3}
}

func (x *TestStringMap) GetTestDouble() map[string]float64 {
	if x != nil {
		return x.TestDouble
	}
	return nil
}

func (x *TestStringMap) GetTestFloat() map[string]float32 {
	if x != nil {
		return x.TestFloat
	}
	return nil
}

func (x *TestStringMap) GetTestInt32() map[string]int32 {
	if x != nil {
		return x.TestInt32
	}
	return nil
}

func (x *TestStringMap) GetTestInt64() map[string]int64 {
	if x != nil {
		return x.TestInt64
	}
	return nil
}

func (x *TestStringMap) GetTestUint32() map[string]uint32 {
	if x != nil {
		return x.TestUint32
	}
	return nil
}

func (x *TestStringMap) GetTestUint64() map[string]uint64 {
	if x != nil {
		return x.TestUint64
	}
	return nil
}

func (x *TestStringMap) GetTestSint32() map[string]int32 {
	if x != nil {
		return x.TestSint32
	}
	return nil
}

func (x *TestStringMap) GetTestSint64() map[string]int64 {
	if x != nil {
		return x.TestSint64
	}
	return nil
}

func (x *TestStringMap) GetTestFixed32() map[string]uint32 {
	if x != nil {
		return x.TestFixed32
	}
	return nil
}

func (x *TestStringMap) GetTestFixed64() map[string]uint64 {
	if x != nil {
		return x.TestFixed64
	}
	return nil
}

func (x *TestStringMap) GetTestSfixed32() map[string]int32 {
	if x != nil {
		return x.TestSfixed32
	}
	return nil
}

func (x *TestStringMap) GetTestSfixed64() map[string]int64 {
	if x != nil {
		return x.TestSfixed64
	}
	return nil
}

func (x *TestStringMap) GetTestBool() map[string]bool {
	if x != nil {
		return x.TestBool
	}
	return nil
}

func (x *TestStringMap) GetTestString() map[string]string {
	if x != nil {
		return x.TestString
	}
	return nil
}

func (x *TestStringMap) GetTestBytes() map[string][]byte {
	if x != nil {
		return x.TestBytes
	}
	return nil
}

func (x *TestStringMap) GetTestEnum() map[string]ABC {
	if x != nil {
		return x.TestEnum
	}
	return nil
}

func (x *TestStringMap) GetTestAliasedEnum() map[string]AliasedABC {
	if x != nil {
		return x.TestAliasedEnum
	}
	return nil
}

type NotAStringMap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TestInt32     *TestOptional          `protobuf:"bytes,1,opt,name=test_int32,json=testInt32,proto3" json:"test_int32,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotAStringMap) Reset() {
	*x = NotAStringMap{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotAStringMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotAStringMap) ProtoMessage() {}

func (x *NotAStringMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotAStringMap.ProtoReflect.Descriptor instead.
func (*NotAStringMap) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{4}
}

func (x *NotAStringMap) GetTestInt32() *TestOptional {
	if x != nil {
		return x.TestInt32
	}
	return nil
}

type TestTypeMap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TestInt32     map[int32]string       `protobuf:"bytes,3,rep,name=test_int32,json=testInt32,proto3" json:"test_int32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TestInt64     map[int64]string       `protobuf:"bytes,4,rep,name=test_int64,json=testInt64,proto3" json:"test_int64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TestUint32    map[uint32]string      `protobuf:"bytes,5,rep,name=test_uint32,json=testUint32,proto3" json:"test_uint32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TestUint64    map[uint64]string      `protobuf:"bytes,6,rep,name=test_uint64,json=testUint64,proto3" json:"test_uint64,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TestSint32    map[int32]string       `protobuf:"bytes,7,rep,name=test_sint32,json=testSint32,proto3" json:"test_sint32,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TestSint64    map[int64]string       `protobuf:"bytes,8,rep,name=test_sint64,json=testSint64,proto3" json:"test_sint64,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TestFixed32   map[uint32]string      `protobuf:"bytes,9,rep,name=test_fixed32,json=testFixed32,proto3" json:"test_fixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TestFixed64   map[uint64]string      `protobuf:"bytes,10,rep,name=test_fixed64,json=testFixed64,proto3" json:"test_fixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TestSfixed32  map[int32]string       `protobuf:"bytes,11,rep,name=test_sfixed32,json=testSfixed32,proto3" json:"test_sfixed32,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TestSfixed64  map[int64]string       `protobuf:"bytes,12,rep,name=test_sfixed64,json=testSfixed64,proto3" json:"test_sfixed64,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TestBool      map[bool]string        `protobuf:"bytes,13,rep,name=test_bool,json=testBool,proto3" json:"test_bool,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TestString    map[string]string      `protobuf:"bytes,14,rep,name=test_string,json=testString,proto3" json:"test_string,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestTypeMap) Reset() {
	*x = TestTypeMap{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestTypeMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestTypeMap) ProtoMessage() {}

func (x *TestTypeMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestTypeMap.ProtoReflect.Descriptor instead.
func (*TestTypeMap) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{5}
}

func (x *TestTypeMap) GetTestInt32() map[int32]string {
	if x != nil {
		return x.TestInt32
	}
	return nil
}

func (x *TestTypeMap) GetTestInt64() map[int64]string {
	if x != nil {
		return x.TestInt64
	}
	return nil
}

func (x *TestTypeMap) GetTestUint32() map[uint32]string {
	if x != nil {
		return x.TestUint32
	}
	return nil
}

func (x *TestTypeMap) GetTestUint64() map[uint64]string {
	if x != nil {
		return x.TestUint64
	}
	return nil
}

func (x *TestTypeMap) GetTestSint32() map[int32]string {
	if x != nil {
		return x.TestSint32
	}
	return nil
}

func (x *TestTypeMap) GetTestSint64() map[int64]string {
	if x != nil {
		return x.TestSint64
	}
	return nil
}

func (x *TestTypeMap) GetTestFixed32() map[uint32]string {
	if x != nil {
		return x.TestFixed32
	}
	return nil
}

func (x *TestTypeMap) GetTestFixed64() map[uint64]string {
	if x != nil {
		return x.TestFixed64
	}
	return nil
}

func (x *TestTypeMap) GetTestSfixed32() map[int32]string {
	if x != nil {
		return x.TestSfixed32
	}
	return nil
}

func (x *TestTypeMap) GetTestSfixed64() map[int64]string {
	if x != nil {
		return x.TestSfixed64
	}
	return nil
}

func (x *TestTypeMap) GetTestBool() map[bool]string {
	if x != nil {
		return x.TestBool
	}
	return nil
}

func (x *TestTypeMap) GetTestString() map[string]string {
	if x != nil {
		return x.TestString
	}
	return nil
}

type WrongTypeMap struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TestInt32     map[int32]int64        `protobuf:"bytes,1,rep,name=test_int32,json=testInt32,proto3" json:"test_int32,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WrongTypeMap) Reset() {
	*x = WrongTypeMap{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WrongTypeMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WrongTypeMap) ProtoMessage() {}

func (x *WrongTypeMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WrongTypeMap.ProtoReflect.Descriptor instead.
func (*WrongTypeMap) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{6}
}

func (x *WrongTypeMap) GetTestInt32() map[int32]int64 {
	if x != nil {
		return x.TestInt32
	}
	return nil
}

type TestOptional struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TestSingle    *uint32                `protobuf:"varint,1,opt,name=test_single,json=testSingle,proto3,oneof" json:"test_single,omitempty"`
	TestStruct    *TestSimple            `protobuf:"bytes,2,opt,name=test_struct,json=testStruct,proto3,oneof" json:"test_struct,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestOptional) Reset() {
	*x = TestOptional{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestOptional) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestOptional) ProtoMessage() {}

func (x *TestOptional) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestOptional.ProtoReflect.Descriptor instead.
func (*TestOptional) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{7}
}

func (x *TestOptional) GetTestSingle() uint32 {
	if x != nil && x.TestSingle != nil {
		return *x.TestSingle
	}
	return 0
}

func (x *TestOptional) GetTestStruct() *TestSimple {
	if x != nil {
		return x.TestStruct
	}
	return nil
}

type TestOneOf struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to TestOneof:
	//
	//	*TestOneOf_TestUint32
	//	*TestOneOf_TestString
	//	*TestOneOf_TestStruct
	TestOneof     isTestOneOf_TestOneof `protobuf_oneof:"test_oneof"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestOneOf) Reset() {
	*x = TestOneOf{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestOneOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestOneOf) ProtoMessage() {}

func (x *TestOneOf) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestOneOf.ProtoReflect.Descriptor instead.
func (*TestOneOf) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{8}
}

func (x *TestOneOf) GetTestOneof() isTestOneOf_TestOneof {
	if x != nil {
		return x.TestOneof
	}
	return nil
}

func (x *TestOneOf) GetTestUint32() uint32 {
	if x != nil {
		if x, ok := x.TestOneof.(*TestOneOf_TestUint32); ok {
			return x.TestUint32
		}
	}
	return 0
}

func (x *TestOneOf) GetTestString() string {
	if x != nil {
		if x, ok := x.TestOneof.(*TestOneOf_TestString); ok {
			return x.TestString
		}
	}
	return ""
}

func (x *TestOneOf) GetTestStruct() *TestSimple {
	if x != nil {
		if x, ok := x.TestOneof.(*TestOneOf_TestStruct); ok {
			return x.TestStruct
		}
	}
	return nil
}

type isTestOneOf_TestOneof interface {
	isTestOneOf_TestOneof()
}

type TestOneOf_TestUint32 struct {
	TestUint32 uint32 `protobuf:"varint,1,opt,name=test_uint32,json=testUint32,proto3,oneof"`
}

type TestOneOf_TestString struct {
	TestString string `protobuf:"bytes,2,opt,name=test_string,json=testString,proto3,oneof"`
}

type TestOneOf_TestStruct struct {
	TestStruct *TestSimple `protobuf:"bytes,3,opt,name=test_struct,json=testStruct,proto3,oneof"`
}

func (*TestOneOf_TestUint32) isTestOneOf_TestOneof() {}

func (*TestOneOf_TestString) isTestOneOf_TestOneof() {}

func (*TestOneOf_TestStruct) isTestOneOf_TestOneof() {}

type TestAnotherOneOf struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to TestAnotherOneof:
	//
	//	*TestAnotherOneOf_TestUint32
	//	*TestAnotherOneOf_TestUint64
	TestAnotherOneof isTestAnotherOneOf_TestAnotherOneof `protobuf_oneof:"test_another_oneof"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *TestAnotherOneOf) Reset() {
	*x = TestAnotherOneOf{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestAnotherOneOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestAnotherOneOf) ProtoMessage() {}

func (x *TestAnotherOneOf) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestAnotherOneOf.ProtoReflect.Descriptor instead.
func (*TestAnotherOneOf) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{9}
}

func (x *TestAnotherOneOf) GetTestAnotherOneof() isTestAnotherOneOf_TestAnotherOneof {
	if x != nil {
		return x.TestAnotherOneof
	}
	return nil
}

func (x *TestAnotherOneOf) GetTestUint32() uint32 {
	if x != nil {
		if x, ok := x.TestAnotherOneof.(*TestAnotherOneOf_TestUint32); ok {
			return x.TestUint32
		}
	}
	return 0
}

func (x *TestAnotherOneOf) GetTestUint64() uint64 {
	if x != nil {
		if x, ok := x.TestAnotherOneof.(*TestAnotherOneOf_TestUint64); ok {
			return x.TestUint64
		}
	}
	return 0
}

type isTestAnotherOneOf_TestAnotherOneof interface {
	isTestAnotherOneOf_TestAnotherOneof()
}

type TestAnotherOneOf_TestUint32 struct {
	TestUint32 uint32 `protobuf:"varint,1,opt,name=test_uint32,json=testUint32,proto3,oneof"`
}

type TestAnotherOneOf_TestUint64 struct {
	TestUint64 uint64 `protobuf:"varint,2,opt,name=test_uint64,json=testUint64,proto3,oneof"`
}

func (*TestAnotherOneOf_TestUint32) isTestAnotherOneOf_TestAnotherOneof() {}

func (*TestAnotherOneOf_TestUint64) isTestAnotherOneOf_TestAnotherOneof() {}

type TestStructs struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TestStruct    *TestSimple            `protobuf:"bytes,1,opt,name=test_struct,json=testStruct,proto3" json:"test_struct,omitempty"`
	TestRepeated  []*TestSimple          `protobuf:"bytes,2,rep,name=test_repeated,json=testRepeated,proto3" json:"test_repeated,omitempty"`
	TestStringmap map[string]*TestSimple `protobuf:"bytes,3,rep,name=test_stringmap,json=testStringmap,proto3" json:"test_stringmap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	TestIntmap    map[int32]*TestSimple  `protobuf:"bytes,4,rep,name=test_intmap,json=testIntmap,proto3" json:"test_intmap,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestStructs) Reset() {
	*x = TestStructs{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStructs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStructs) ProtoMessage() {}

func (x *TestStructs) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestStructs.ProtoReflect.Descriptor instead.
func (*TestStructs) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{10}
}

func (x *TestStructs) GetTestStruct() *TestSimple {
	if x != nil {
		return x.TestStruct
	}
	return nil
}

func (x *TestStructs) GetTestRepeated() []*TestSimple {
	if x != nil {
		return x.TestRepeated
	}
	return nil
}

func (x *TestStructs) GetTestStringmap() map[string]*TestSimple {
	if x != nil {
		return x.TestStringmap
	}
	return nil
}

func (x *TestStructs) GetTestIntmap() map[int32]*TestSimple {
	if x != nil {
		return x.TestIntmap
	}
	return nil
}

type TestX struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Y             []*TestY               `protobuf:"bytes,1,rep,name=y,proto3" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestX) Reset() {
	*x = TestX{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestX) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestX) ProtoMessage() {}

func (x *TestX) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestX.ProtoReflect.Descriptor instead.
func (*TestX) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{11}
}

func (x *TestX) GetY() []*TestY {
	if x != nil {
		return x.Y
	}
	return nil
}

type TestY struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Z             []*TestZ               `protobuf:"bytes,1,rep,name=z,proto3" json:"z,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestY) Reset() {
	*x = TestY{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestY) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestY) ProtoMessage() {}

func (x *TestY) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestY.ProtoReflect.Descriptor instead.
func (*TestY) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{12}
}

func (x *TestY) GetZ() []*TestZ {
	if x != nil {
		return x.Z
	}
	return nil
}

type TestZ struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	A             string                 `protobuf:"bytes,1,opt,name=a,proto3" json:"a,omitempty"`
	B             string                 `protobuf:"bytes,2,opt,name=b,proto3" json:"b,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestZ) Reset() {
	*x = TestZ{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestZ) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestZ) ProtoMessage() {}

func (x *TestZ) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestZ.ProtoReflect.Descriptor instead.
func (*TestZ) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{13}
}

func (x *TestZ) GetA() string {
	if x != nil {
		return x.A
	}
	return ""
}

func (x *TestZ) GetB() string {
	if x != nil {
		return x.B
	}
	return ""
}

type TestA struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	B             map[string]*TestB      `protobuf:"bytes,1,rep,name=b,proto3" json:"b,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestA) Reset() {
	*x = TestA{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestA) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestA) ProtoMessage() {}

func (x *TestA) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestA.ProtoReflect.Descriptor instead.
func (*TestA) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{14}
}

func (x *TestA) GetB() map[string]*TestB {
	if x != nil {
		return x.B
	}
	return nil
}

type TestB struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	C             map[string]*TestC      `protobuf:"bytes,1,rep,name=c,proto3" json:"c,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestB) Reset() {
	*x = TestB{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestB) ProtoMessage() {}

func (x *TestB) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestB.ProtoReflect.Descriptor instead.
func (*TestB) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{15}
}

func (x *TestB) GetC() map[string]*TestC {
	if x != nil {
		return x.C
	}
	return nil
}

type TestC struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	X             string                 `protobuf:"bytes,1,opt,name=x,proto3" json:"x,omitempty"`
	Y             string                 `protobuf:"bytes,2,opt,name=y,proto3" json:"y,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestC) Reset() {
	*x = TestC{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestC) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestC) ProtoMessage() {}

func (x *TestC) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestC.ProtoReflect.Descriptor instead.
func (*TestC) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{16}
}

func (x *TestC) GetX() string {
	if x != nil {
		return x.X
	}
	return ""
}

func (x *TestC) GetY() string {
	if x != nil {
		return x.Y
	}
	return ""
}

type TestWellKnown struct {
	state           protoimpl.MessageState   `protogen:"open.v1"`
	TestAny         *anypb.Any               `protobuf:"bytes,1,opt,name=test_any,json=testAny,proto3" json:"test_any,omitempty"`
	TestTs          *timestamppb.Timestamp   `protobuf:"bytes,2,opt,name=test_ts,json=testTs,proto3" json:"test_ts,omitempty"`
	TestRepeatedAny []*anypb.Any             `protobuf:"bytes,3,rep,name=test_repeated_any,json=testRepeatedAny,proto3" json:"test_repeated_any,omitempty"`
	TestRepeatedTs  []*timestamppb.Timestamp `protobuf:"bytes,4,rep,name=test_repeated_ts,json=testRepeatedTs,proto3" json:"test_repeated_ts,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TestWellKnown) Reset() {
	*x = TestWellKnown{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestWellKnown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestWellKnown) ProtoMessage() {}

func (x *TestWellKnown) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestWellKnown.ProtoReflect.Descriptor instead.
func (*TestWellKnown) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{17}
}

func (x *TestWellKnown) GetTestAny() *anypb.Any {
	if x != nil {
		return x.TestAny
	}
	return nil
}

func (x *TestWellKnown) GetTestTs() *timestamppb.Timestamp {
	if x != nil {
		return x.TestTs
	}
	return nil
}

func (x *TestWellKnown) GetTestRepeatedAny() []*anypb.Any {
	if x != nil {
		return x.TestRepeatedAny
	}
	return nil
}

func (x *TestWellKnown) GetTestRepeatedTs() []*timestamppb.Timestamp {
	if x != nil {
		return x.TestRepeatedTs
	}
	return nil
}

type TestRecursiveRepeated struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         []*RecursiveStruct     `protobuf:"bytes,1,rep,name=field,proto3" json:"field,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestRecursiveRepeated) Reset() {
	*x = TestRecursiveRepeated{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRecursiveRepeated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRecursiveRepeated) ProtoMessage() {}

func (x *TestRecursiveRepeated) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRecursiveRepeated.ProtoReflect.Descriptor instead.
func (*TestRecursiveRepeated) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{18}
}

func (x *TestRecursiveRepeated) GetField() []*RecursiveStruct {
	if x != nil {
		return x.Field
	}
	return nil
}

type TestRecursiveMap struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Field         map[string]*RecursiveStruct `protobuf:"bytes,1,rep,name=field,proto3" json:"field,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestRecursiveMap) Reset() {
	*x = TestRecursiveMap{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRecursiveMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRecursiveMap) ProtoMessage() {}

func (x *TestRecursiveMap) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRecursiveMap.ProtoReflect.Descriptor instead.
func (*TestRecursiveMap) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{19}
}

func (x *TestRecursiveMap) GetField() map[string]*RecursiveStruct {
	if x != nil {
		return x.Field
	}
	return nil
}

type TestRecursiveSingle struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Field         *RecursiveStruct       `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestRecursiveSingle) Reset() {
	*x = TestRecursiveSingle{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestRecursiveSingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestRecursiveSingle) ProtoMessage() {}

func (x *TestRecursiveSingle) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestRecursiveSingle.ProtoReflect.Descriptor instead.
func (*TestRecursiveSingle) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{20}
}

func (x *TestRecursiveSingle) GetField() *RecursiveStruct {
	if x != nil {
		return x.Field
	}
	return nil
}

type TestOutputOnly struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	I             int32                  `protobuf:"varint,1,opt,name=i,proto3" json:"i,omitempty"`
	S             string                 `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	Msg           *TestSimple            `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	M             map[string]int32       `protobuf:"bytes,4,rep,name=m,proto3" json:"m,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	R             []int32                `protobuf:"varint,5,rep,packed,name=r,proto3" json:"r,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestOutputOnly) Reset() {
	*x = TestOutputOnly{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestOutputOnly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestOutputOnly) ProtoMessage() {}

func (x *TestOutputOnly) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestOutputOnly.ProtoReflect.Descriptor instead.
func (*TestOutputOnly) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{21}
}

func (x *TestOutputOnly) GetI() int32 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *TestOutputOnly) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

func (x *TestOutputOnly) GetMsg() *TestSimple {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *TestOutputOnly) GetM() map[string]int32 {
	if x != nil {
		return x.M
	}
	return nil
}

func (x *TestOutputOnly) GetR() []int32 {
	if x != nil {
		return x.R
	}
	return nil
}

type TestImmutable struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	I             int32                  `protobuf:"varint,1,opt,name=i,proto3" json:"i,omitempty"`
	S             string                 `protobuf:"bytes,2,opt,name=s,proto3" json:"s,omitempty"`
	Msg           *TestSimple            `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	M             map[string]int32       `protobuf:"bytes,4,rep,name=m,proto3" json:"m,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	R             []int32                `protobuf:"varint,5,rep,packed,name=r,proto3" json:"r,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestImmutable) Reset() {
	*x = TestImmutable{}
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestImmutable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestImmutable) ProtoMessage() {}

func (x *TestImmutable) ProtoReflect() protoreflect.Message {
	mi := &file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestImmutable.ProtoReflect.Descriptor instead.
func (*TestImmutable) Descriptor() ([]byte, []int) {
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP(), []int{22}
}

func (x *TestImmutable) GetI() int32 {
	if x != nil {
		return x.I
	}
	return 0
}

func (x *TestImmutable) GetS() string {
	if x != nil {
		return x.S
	}
	return ""
}

func (x *TestImmutable) GetMsg() *TestSimple {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *TestImmutable) GetM() map[string]int32 {
	if x != nil {
		return x.M
	}
	return nil
}

func (x *TestImmutable) GetR() []int32 {
	if x != nil {
		return x.R
	}
	return nil
}

var File_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto protoreflect.FileDescriptor

const file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDesc = "" +
	"\n" +
	"Lapi/tools/public/gosdk/proto/fieldmask/protobuf/testdata/data_for_test.proto\x12\x0fnebius.testdata\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x19google/protobuf/any.proto\x1a\x18nebius/annotations.proto\"r\n" +
	"\x0fRecursiveStruct\x12\x1f\n" +
	"\vsome_string\x18\x01 \x01(\tR\n" +
	"someString\x12>\n" +
	"\trecursive\x18\x02 \x01(\v2 .nebius.testdata.RecursiveStructR\trecursive\"\xf7\x04\n" +
	"\n" +
	"TestSimple\x12\x1f\n" +
	"\vtest_double\x18\x01 \x01(\x01R\n" +
	"testDouble\x12\x1d\n" +
	"\n" +
	"test_float\x18\x02 \x01(\x02R\ttestFloat\x12\x1d\n" +
	"\n" +
	"test_int32\x18\x03 \x01(\x05R\ttestInt32\x12\x1d\n" +
	"\n" +
	"test_int64\x18\x04 \x01(\x03R\ttestInt64\x12\x1f\n" +
	"\vtest_uint32\x18\x05 \x01(\rR\n" +
	"testUint32\x12\x1f\n" +
	"\vtest_uint64\x18\x06 \x01(\x04R\n" +
	"testUint64\x12\x1f\n" +
	"\vtest_sint32\x18\a \x01(\x11R\n" +
	"testSint32\x12\x1f\n" +
	"\vtest_sint64\x18\b \x01(\x12R\n" +
	"testSint64\x12!\n" +
	"\ftest_fixed32\x18\t \x01(\aR\vtestFixed32\x12!\n" +
	"\ftest_fixed64\x18\n" +
	" \x01(\x06R\vtestFixed64\x12#\n" +
	"\rtest_sfixed32\x18\v \x01(\x0fR\ftestSfixed32\x12#\n" +
	"\rtest_sfixed64\x18\f \x01(\x10R\ftestSfixed64\x12\x1b\n" +
	"\ttest_bool\x18\r \x01(\bR\btestBool\x12\x1f\n" +
	"\vtest_string\x18\x0e \x01(\tR\n" +
	"testString\x12\x1d\n" +
	"\n" +
	"test_bytes\x18\x0f \x01(\fR\ttestBytes\x121\n" +
	"\ttest_enum\x18\x10 \x01(\x0e2\x14.nebius.testdata.ABCR\btestEnum\x12G\n" +
	"\x11test_aliased_enum\x18\x11 \x01(\x0e2\x1b.nebius.testdata.AliasedABCR\x0ftestAliasedEnum\"\xf9\x04\n" +
	"\fTestRepeated\x12\x1f\n" +
	"\vtest_double\x18\x01 \x03(\x01R\n" +
	"testDouble\x12\x1d\n" +
	"\n" +
	"test_float\x18\x02 \x03(\x02R\ttestFloat\x12\x1d\n" +
	"\n" +
	"test_int32\x18\x03 \x03(\x05R\ttestInt32\x12\x1d\n" +
	"\n" +
	"test_int64\x18\x04 \x03(\x03R\ttestInt64\x12\x1f\n" +
	"\vtest_uint32\x18\x05 \x03(\rR\n" +
	"testUint32\x12\x1f\n" +
	"\vtest_uint64\x18\x06 \x03(\x04R\n" +
	"testUint64\x12\x1f\n" +
	"\vtest_sint32\x18\a \x03(\x11R\n" +
	"testSint32\x12\x1f\n" +
	"\vtest_sint64\x18\b \x03(\x12R\n" +
	"testSint64\x12!\n" +
	"\ftest_fixed32\x18\t \x03(\aR\vtestFixed32\x12!\n" +
	"\ftest_fixed64\x18\n" +
	" \x03(\x06R\vtestFixed64\x12#\n" +
	"\rtest_sfixed32\x18\v \x03(\x0fR\ftestSfixed32\x12#\n" +
	"\rtest_sfixed64\x18\f \x03(\x10R\ftestSfixed64\x12\x1b\n" +
	"\ttest_bool\x18\r \x03(\bR\btestBool\x12\x1f\n" +
	"\vtest_string\x18\x0e \x03(\tR\n" +
	"testString\x12\x1d\n" +
	"\n" +
	"test_bytes\x18\x0f \x03(\fR\ttestBytes\x121\n" +
	"\ttest_enum\x18\x10 \x03(\x0e2\x14.nebius.testdata.ABCR\btestEnum\x12G\n" +
	"\x11test_aliased_enum\x18\x11 \x03(\x0e2\x1b.nebius.testdata.AliasedABCR\x0ftestAliasedEnum\"\xdf\x13\n" +
	"\rTestStringMap\x12O\n" +
	"\vtest_double\x18\x01 \x03(\v2..nebius.testdata.TestStringMap.TestDoubleEntryR\n" +
	"testDouble\x12L\n" +
	"\n" +
	"test_float\x18\x02 \x03(\v2-.nebius.testdata.TestStringMap.TestFloatEntryR\ttestFloat\x12L\n" +
	"\n" +
	"test_int32\x18\x03 \x03(\v2-.nebius.testdata.TestStringMap.TestInt32EntryR\ttestInt32\x12L\n" +
	"\n" +
	"test_int64\x18\x04 \x03(\v2-.nebius.testdata.TestStringMap.TestInt64EntryR\ttestInt64\x12O\n" +
	"\vtest_uint32\x18\x05 \x03(\v2..nebius.testdata.TestStringMap.TestUint32EntryR\n" +
	"testUint32\x12O\n" +
	"\vtest_uint64\x18\x06 \x03(\v2..nebius.testdata.TestStringMap.TestUint64EntryR\n" +
	"testUint64\x12O\n" +
	"\vtest_sint32\x18\a \x03(\v2..nebius.testdata.TestStringMap.TestSint32EntryR\n" +
	"testSint32\x12O\n" +
	"\vtest_sint64\x18\b \x03(\v2..nebius.testdata.TestStringMap.TestSint64EntryR\n" +
	"testSint64\x12R\n" +
	"\ftest_fixed32\x18\t \x03(\v2/.nebius.testdata.TestStringMap.TestFixed32EntryR\vtestFixed32\x12R\n" +
	"\ftest_fixed64\x18\n" +
	" \x03(\v2/.nebius.testdata.TestStringMap.TestFixed64EntryR\vtestFixed64\x12U\n" +
	"\rtest_sfixed32\x18\v \x03(\v20.nebius.testdata.TestStringMap.TestSfixed32EntryR\ftestSfixed32\x12U\n" +
	"\rtest_sfixed64\x18\f \x03(\v20.nebius.testdata.TestStringMap.TestSfixed64EntryR\ftestSfixed64\x12I\n" +
	"\ttest_bool\x18\r \x03(\v2,.nebius.testdata.TestStringMap.TestBoolEntryR\btestBool\x12O\n" +
	"\vtest_string\x18\x0e \x03(\v2..nebius.testdata.TestStringMap.TestStringEntryR\n" +
	"testString\x12L\n" +
	"\n" +
	"test_bytes\x18\x0f \x03(\v2-.nebius.testdata.TestStringMap.TestBytesEntryR\ttestBytes\x12I\n" +
	"\ttest_enum\x18\x10 \x03(\v2,.nebius.testdata.TestStringMap.TestEnumEntryR\btestEnum\x12_\n" +
	"\x11test_aliased_enum\x18\x11 \x03(\v23.nebius.testdata.TestStringMap.TestAliasedEnumEntryR\x0ftestAliasedEnum\x1a=\n" +
	"\x0fTestDoubleEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a<\n" +
	"\x0eTestFloatEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1a<\n" +
	"\x0eTestInt32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a<\n" +
	"\x0eTestInt64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1a=\n" +
	"\x0fTestUint32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a=\n" +
	"\x0fTestUint64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a=\n" +
	"\x0fTestSint32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x11R\x05value:\x028\x01\x1a=\n" +
	"\x0fTestSint64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x12R\x05value:\x028\x01\x1a>\n" +
	"\x10TestFixed32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\aR\x05value:\x028\x01\x1a>\n" +
	"\x10TestFixed64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x06R\x05value:\x028\x01\x1a?\n" +
	"\x11TestSfixed32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x0fR\x05value:\x028\x01\x1a?\n" +
	"\x11TestSfixed64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x10R\x05value:\x028\x01\x1a;\n" +
	"\rTestBoolEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1a=\n" +
	"\x0fTestStringEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a<\n" +
	"\x0eTestBytesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1aQ\n" +
	"\rTestEnumEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12*\n" +
	"\x05value\x18\x02 \x01(\x0e2\x14.nebius.testdata.ABCR\x05value:\x028\x01\x1a_\n" +
	"\x14TestAliasedEnumEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\x0e2\x1b.nebius.testdata.AliasedABCR\x05value:\x028\x01\"M\n" +
	"\rNotAStringMap\x12<\n" +
	"\n" +
	"test_int32\x18\x01 \x01(\v2\x1d.nebius.testdata.TestOptionalR\ttestInt32\"\xbd\r\n" +
	"\vTestTypeMap\x12J\n" +
	"\n" +
	"test_int32\x18\x03 \x03(\v2+.nebius.testdata.TestTypeMap.TestInt32EntryR\ttestInt32\x12J\n" +
	"\n" +
	"test_int64\x18\x04 \x03(\v2+.nebius.testdata.TestTypeMap.TestInt64EntryR\ttestInt64\x12M\n" +
	"\vtest_uint32\x18\x05 \x03(\v2,.nebius.testdata.TestTypeMap.TestUint32EntryR\n" +
	"testUint32\x12M\n" +
	"\vtest_uint64\x18\x06 \x03(\v2,.nebius.testdata.TestTypeMap.TestUint64EntryR\n" +
	"testUint64\x12M\n" +
	"\vtest_sint32\x18\a \x03(\v2,.nebius.testdata.TestTypeMap.TestSint32EntryR\n" +
	"testSint32\x12M\n" +
	"\vtest_sint64\x18\b \x03(\v2,.nebius.testdata.TestTypeMap.TestSint64EntryR\n" +
	"testSint64\x12P\n" +
	"\ftest_fixed32\x18\t \x03(\v2-.nebius.testdata.TestTypeMap.TestFixed32EntryR\vtestFixed32\x12P\n" +
	"\ftest_fixed64\x18\n" +
	" \x03(\v2-.nebius.testdata.TestTypeMap.TestFixed64EntryR\vtestFixed64\x12S\n" +
	"\rtest_sfixed32\x18\v \x03(\v2..nebius.testdata.TestTypeMap.TestSfixed32EntryR\ftestSfixed32\x12S\n" +
	"\rtest_sfixed64\x18\f \x03(\v2..nebius.testdata.TestTypeMap.TestSfixed64EntryR\ftestSfixed64\x12G\n" +
	"\ttest_bool\x18\r \x03(\v2*.nebius.testdata.TestTypeMap.TestBoolEntryR\btestBool\x12M\n" +
	"\vtest_string\x18\x0e \x03(\v2,.nebius.testdata.TestTypeMap.TestStringEntryR\n" +
	"testString\x1a<\n" +
	"\x0eTestInt32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a<\n" +
	"\x0eTestInt64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a=\n" +
	"\x0fTestUint32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a=\n" +
	"\x0fTestUint64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a=\n" +
	"\x0fTestSint32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a=\n" +
	"\x0fTestSint64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10TestFixed32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a>\n" +
	"\x10TestFixed64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a?\n" +
	"\x11TestSfixed32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a?\n" +
	"\x11TestSfixed64Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a;\n" +
	"\rTestBoolEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a=\n" +
	"\x0fTestStringEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x99\x01\n" +
	"\fWrongTypeMap\x12K\n" +
	"\n" +
	"test_int32\x18\x01 \x03(\v2,.nebius.testdata.WrongTypeMap.TestInt32EntryR\ttestInt32\x1a<\n" +
	"\x0eTestInt32Entry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\"\x97\x01\n" +
	"\fTestOptional\x12$\n" +
	"\vtest_single\x18\x01 \x01(\rH\x00R\n" +
	"testSingle\x88\x01\x01\x12A\n" +
	"\vtest_struct\x18\x02 \x01(\v2\x1b.nebius.testdata.TestSimpleH\x01R\n" +
	"testStruct\x88\x01\x01B\x0e\n" +
	"\f_test_singleB\x0e\n" +
	"\f_test_struct\"\x9f\x01\n" +
	"\tTestOneOf\x12!\n" +
	"\vtest_uint32\x18\x01 \x01(\rH\x00R\n" +
	"testUint32\x12!\n" +
	"\vtest_string\x18\x02 \x01(\tH\x00R\n" +
	"testString\x12>\n" +
	"\vtest_struct\x18\x03 \x01(\v2\x1b.nebius.testdata.TestSimpleH\x00R\n" +
	"testStructB\f\n" +
	"\n" +
	"test_oneof\"n\n" +
	"\x10TestAnotherOneOf\x12!\n" +
	"\vtest_uint32\x18\x01 \x01(\rH\x00R\n" +
	"testUint32\x12!\n" +
	"\vtest_uint64\x18\x02 \x01(\x04H\x00R\n" +
	"testUint64B\x14\n" +
	"\x12test_another_oneof\"\xef\x03\n" +
	"\vTestStructs\x12<\n" +
	"\vtest_struct\x18\x01 \x01(\v2\x1b.nebius.testdata.TestSimpleR\n" +
	"testStruct\x12@\n" +
	"\rtest_repeated\x18\x02 \x03(\v2\x1b.nebius.testdata.TestSimpleR\ftestRepeated\x12V\n" +
	"\x0etest_stringmap\x18\x03 \x03(\v2/.nebius.testdata.TestStructs.TestStringmapEntryR\rtestStringmap\x12M\n" +
	"\vtest_intmap\x18\x04 \x03(\v2,.nebius.testdata.TestStructs.TestIntmapEntryR\n" +
	"testIntmap\x1a]\n" +
	"\x12TestStringmapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.nebius.testdata.TestSimpleR\x05value:\x028\x01\x1aZ\n" +
	"\x0fTestIntmapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x121\n" +
	"\x05value\x18\x02 \x01(\v2\x1b.nebius.testdata.TestSimpleR\x05value:\x028\x01\"-\n" +
	"\x05TestX\x12$\n" +
	"\x01y\x18\x01 \x03(\v2\x16.nebius.testdata.TestYR\x01y\"-\n" +
	"\x05TestY\x12$\n" +
	"\x01z\x18\x01 \x03(\v2\x16.nebius.testdata.TestZR\x01z\"#\n" +
	"\x05TestZ\x12\f\n" +
	"\x01a\x18\x01 \x01(\tR\x01a\x12\f\n" +
	"\x01b\x18\x02 \x01(\tR\x01b\"\x82\x01\n" +
	"\x05TestA\x12+\n" +
	"\x01b\x18\x01 \x03(\v2\x1d.nebius.testdata.TestA.BEntryR\x01b\x1aL\n" +
	"\x06BEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.nebius.testdata.TestBR\x05value:\x028\x01\"\x82\x01\n" +
	"\x05TestB\x12+\n" +
	"\x01c\x18\x01 \x03(\v2\x1d.nebius.testdata.TestB.CEntryR\x01c\x1aL\n" +
	"\x06CEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12,\n" +
	"\x05value\x18\x02 \x01(\v2\x16.nebius.testdata.TestCR\x05value:\x028\x01\"#\n" +
	"\x05TestC\x12\f\n" +
	"\x01x\x18\x01 \x01(\tR\x01x\x12\f\n" +
	"\x01y\x18\x02 \x01(\tR\x01y\"\xfd\x01\n" +
	"\rTestWellKnown\x12/\n" +
	"\btest_any\x18\x01 \x01(\v2\x14.google.protobuf.AnyR\atestAny\x123\n" +
	"\atest_ts\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x06testTs\x12@\n" +
	"\x11test_repeated_any\x18\x03 \x03(\v2\x14.google.protobuf.AnyR\x0ftestRepeatedAny\x12D\n" +
	"\x10test_repeated_ts\x18\x04 \x03(\v2\x1a.google.protobuf.TimestampR\x0etestRepeatedTs\"O\n" +
	"\x15TestRecursiveRepeated\x126\n" +
	"\x05field\x18\x01 \x03(\v2 .nebius.testdata.RecursiveStructR\x05field\"\xb2\x01\n" +
	"\x10TestRecursiveMap\x12B\n" +
	"\x05field\x18\x01 \x03(\v2,.nebius.testdata.TestRecursiveMap.FieldEntryR\x05field\x1aZ\n" +
	"\n" +
	"FieldEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x126\n" +
	"\x05value\x18\x02 \x01(\v2 .nebius.testdata.RecursiveStructR\x05value:\x028\x01\"M\n" +
	"\x13TestRecursiveSingle\x126\n" +
	"\x05field\x18\x01 \x01(\v2 .nebius.testdata.RecursiveStructR\x05field\"\xf3\x01\n" +
	"\x0eTestOutputOnly\x12\x12\n" +
	"\x01i\x18\x01 \x01(\x05B\x04\xbaJ\x01\x05R\x01i\x12\x12\n" +
	"\x01s\x18\x02 \x01(\tB\x04\xbaJ\x01\x05R\x01s\x123\n" +
	"\x03msg\x18\x03 \x01(\v2\x1b.nebius.testdata.TestSimpleB\x04\xbaJ\x01\x05R\x03msg\x12:\n" +
	"\x01m\x18\x04 \x03(\v2&.nebius.testdata.TestOutputOnly.MEntryB\x04\xbaJ\x01\x05R\x01m\x12\x12\n" +
	"\x01r\x18\x05 \x03(\x05B\x04\xbaJ\x01\x05R\x01r\x1a4\n" +
	"\x06MEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\"\xf1\x01\n" +
	"\rTestImmutable\x12\x12\n" +
	"\x01i\x18\x01 \x01(\x05B\x04\xbaJ\x01\x02R\x01i\x12\x12\n" +
	"\x01s\x18\x02 \x01(\tB\x04\xbaJ\x01\x02R\x01s\x123\n" +
	"\x03msg\x18\x03 \x01(\v2\x1b.nebius.testdata.TestSimpleB\x04\xbaJ\x01\x02R\x03msg\x129\n" +
	"\x01m\x18\x04 \x03(\v2%.nebius.testdata.TestImmutable.MEntryB\x04\xbaJ\x01\x02R\x01m\x12\x12\n" +
	"\x01r\x18\x05 \x03(\x05B\x04\xbaJ\x01\x02R\x01r\x1a4\n" +
	"\x06MEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01*9\n" +
	"\x03ABC\x12\x11\n" +
	"\rABC_UNDEFINED\x10\x00\x12\t\n" +
	"\x05ABC_A\x10\x01\x12\t\n" +
	"\x05ABC_B\x10\x02\x12\t\n" +
	"\x05ABC_C\x10\x03*U\n" +
	"\n" +
	"AliasedABC\x12\x12\n" +
	"\x0eAABC_UNDEFINED\x10\x00\x12\n" +
	"\n" +
	"\x06AABC_A\x10\x01\x12\n" +
	"\n" +
	"\x06AABC_B\x10\x02\x12\v\n" +
	"\aAABC_B2\x10\x02\x12\n" +
	"\n" +
	"\x06AABC_C\x10\x03\x1a\x02\x10\x01b\x06proto3"

var (
	file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescOnce sync.Once
	file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescData []byte
)

func file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescGZIP() []byte {
	file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescOnce.Do(func() {
		file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDesc), len(file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDesc)))
	})
	return file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDescData
}

var file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes = make([]protoimpl.MessageInfo, 60)
var file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_goTypes = []any{
	(ABC)(0),                      // 0: nebius.testdata.ABC
	(AliasedABC)(0),               // 1: nebius.testdata.AliasedABC
	(*RecursiveStruct)(nil),       // 2: nebius.testdata.RecursiveStruct
	(*TestSimple)(nil),            // 3: nebius.testdata.TestSimple
	(*TestRepeated)(nil),          // 4: nebius.testdata.TestRepeated
	(*TestStringMap)(nil),         // 5: nebius.testdata.TestStringMap
	(*NotAStringMap)(nil),         // 6: nebius.testdata.NotAStringMap
	(*TestTypeMap)(nil),           // 7: nebius.testdata.TestTypeMap
	(*WrongTypeMap)(nil),          // 8: nebius.testdata.WrongTypeMap
	(*TestOptional)(nil),          // 9: nebius.testdata.TestOptional
	(*TestOneOf)(nil),             // 10: nebius.testdata.TestOneOf
	(*TestAnotherOneOf)(nil),      // 11: nebius.testdata.TestAnotherOneOf
	(*TestStructs)(nil),           // 12: nebius.testdata.TestStructs
	(*TestX)(nil),                 // 13: nebius.testdata.TestX
	(*TestY)(nil),                 // 14: nebius.testdata.TestY
	(*TestZ)(nil),                 // 15: nebius.testdata.TestZ
	(*TestA)(nil),                 // 16: nebius.testdata.TestA
	(*TestB)(nil),                 // 17: nebius.testdata.TestB
	(*TestC)(nil),                 // 18: nebius.testdata.TestC
	(*TestWellKnown)(nil),         // 19: nebius.testdata.TestWellKnown
	(*TestRecursiveRepeated)(nil), // 20: nebius.testdata.TestRecursiveRepeated
	(*TestRecursiveMap)(nil),      // 21: nebius.testdata.TestRecursiveMap
	(*TestRecursiveSingle)(nil),   // 22: nebius.testdata.TestRecursiveSingle
	(*TestOutputOnly)(nil),        // 23: nebius.testdata.TestOutputOnly
	(*TestImmutable)(nil),         // 24: nebius.testdata.TestImmutable
	nil,                           // 25: nebius.testdata.TestStringMap.TestDoubleEntry
	nil,                           // 26: nebius.testdata.TestStringMap.TestFloatEntry
	nil,                           // 27: nebius.testdata.TestStringMap.TestInt32Entry
	nil,                           // 28: nebius.testdata.TestStringMap.TestInt64Entry
	nil,                           // 29: nebius.testdata.TestStringMap.TestUint32Entry
	nil,                           // 30: nebius.testdata.TestStringMap.TestUint64Entry
	nil,                           // 31: nebius.testdata.TestStringMap.TestSint32Entry
	nil,                           // 32: nebius.testdata.TestStringMap.TestSint64Entry
	nil,                           // 33: nebius.testdata.TestStringMap.TestFixed32Entry
	nil,                           // 34: nebius.testdata.TestStringMap.TestFixed64Entry
	nil,                           // 35: nebius.testdata.TestStringMap.TestSfixed32Entry
	nil,                           // 36: nebius.testdata.TestStringMap.TestSfixed64Entry
	nil,                           // 37: nebius.testdata.TestStringMap.TestBoolEntry
	nil,                           // 38: nebius.testdata.TestStringMap.TestStringEntry
	nil,                           // 39: nebius.testdata.TestStringMap.TestBytesEntry
	nil,                           // 40: nebius.testdata.TestStringMap.TestEnumEntry
	nil,                           // 41: nebius.testdata.TestStringMap.TestAliasedEnumEntry
	nil,                           // 42: nebius.testdata.TestTypeMap.TestInt32Entry
	nil,                           // 43: nebius.testdata.TestTypeMap.TestInt64Entry
	nil,                           // 44: nebius.testdata.TestTypeMap.TestUint32Entry
	nil,                           // 45: nebius.testdata.TestTypeMap.TestUint64Entry
	nil,                           // 46: nebius.testdata.TestTypeMap.TestSint32Entry
	nil,                           // 47: nebius.testdata.TestTypeMap.TestSint64Entry
	nil,                           // 48: nebius.testdata.TestTypeMap.TestFixed32Entry
	nil,                           // 49: nebius.testdata.TestTypeMap.TestFixed64Entry
	nil,                           // 50: nebius.testdata.TestTypeMap.TestSfixed32Entry
	nil,                           // 51: nebius.testdata.TestTypeMap.TestSfixed64Entry
	nil,                           // 52: nebius.testdata.TestTypeMap.TestBoolEntry
	nil,                           // 53: nebius.testdata.TestTypeMap.TestStringEntry
	nil,                           // 54: nebius.testdata.WrongTypeMap.TestInt32Entry
	nil,                           // 55: nebius.testdata.TestStructs.TestStringmapEntry
	nil,                           // 56: nebius.testdata.TestStructs.TestIntmapEntry
	nil,                           // 57: nebius.testdata.TestA.BEntry
	nil,                           // 58: nebius.testdata.TestB.CEntry
	nil,                           // 59: nebius.testdata.TestRecursiveMap.FieldEntry
	nil,                           // 60: nebius.testdata.TestOutputOnly.MEntry
	nil,                           // 61: nebius.testdata.TestImmutable.MEntry
	(*anypb.Any)(nil),             // 62: google.protobuf.Any
	(*timestamppb.Timestamp)(nil), // 63: google.protobuf.Timestamp
}
var file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_depIdxs = []int32{
	2,  // 0: nebius.testdata.RecursiveStruct.recursive:type_name -> nebius.testdata.RecursiveStruct
	0,  // 1: nebius.testdata.TestSimple.test_enum:type_name -> nebius.testdata.ABC
	1,  // 2: nebius.testdata.TestSimple.test_aliased_enum:type_name -> nebius.testdata.AliasedABC
	0,  // 3: nebius.testdata.TestRepeated.test_enum:type_name -> nebius.testdata.ABC
	1,  // 4: nebius.testdata.TestRepeated.test_aliased_enum:type_name -> nebius.testdata.AliasedABC
	25, // 5: nebius.testdata.TestStringMap.test_double:type_name -> nebius.testdata.TestStringMap.TestDoubleEntry
	26, // 6: nebius.testdata.TestStringMap.test_float:type_name -> nebius.testdata.TestStringMap.TestFloatEntry
	27, // 7: nebius.testdata.TestStringMap.test_int32:type_name -> nebius.testdata.TestStringMap.TestInt32Entry
	28, // 8: nebius.testdata.TestStringMap.test_int64:type_name -> nebius.testdata.TestStringMap.TestInt64Entry
	29, // 9: nebius.testdata.TestStringMap.test_uint32:type_name -> nebius.testdata.TestStringMap.TestUint32Entry
	30, // 10: nebius.testdata.TestStringMap.test_uint64:type_name -> nebius.testdata.TestStringMap.TestUint64Entry
	31, // 11: nebius.testdata.TestStringMap.test_sint32:type_name -> nebius.testdata.TestStringMap.TestSint32Entry
	32, // 12: nebius.testdata.TestStringMap.test_sint64:type_name -> nebius.testdata.TestStringMap.TestSint64Entry
	33, // 13: nebius.testdata.TestStringMap.test_fixed32:type_name -> nebius.testdata.TestStringMap.TestFixed32Entry
	34, // 14: nebius.testdata.TestStringMap.test_fixed64:type_name -> nebius.testdata.TestStringMap.TestFixed64Entry
	35, // 15: nebius.testdata.TestStringMap.test_sfixed32:type_name -> nebius.testdata.TestStringMap.TestSfixed32Entry
	36, // 16: nebius.testdata.TestStringMap.test_sfixed64:type_name -> nebius.testdata.TestStringMap.TestSfixed64Entry
	37, // 17: nebius.testdata.TestStringMap.test_bool:type_name -> nebius.testdata.TestStringMap.TestBoolEntry
	38, // 18: nebius.testdata.TestStringMap.test_string:type_name -> nebius.testdata.TestStringMap.TestStringEntry
	39, // 19: nebius.testdata.TestStringMap.test_bytes:type_name -> nebius.testdata.TestStringMap.TestBytesEntry
	40, // 20: nebius.testdata.TestStringMap.test_enum:type_name -> nebius.testdata.TestStringMap.TestEnumEntry
	41, // 21: nebius.testdata.TestStringMap.test_aliased_enum:type_name -> nebius.testdata.TestStringMap.TestAliasedEnumEntry
	9,  // 22: nebius.testdata.NotAStringMap.test_int32:type_name -> nebius.testdata.TestOptional
	42, // 23: nebius.testdata.TestTypeMap.test_int32:type_name -> nebius.testdata.TestTypeMap.TestInt32Entry
	43, // 24: nebius.testdata.TestTypeMap.test_int64:type_name -> nebius.testdata.TestTypeMap.TestInt64Entry
	44, // 25: nebius.testdata.TestTypeMap.test_uint32:type_name -> nebius.testdata.TestTypeMap.TestUint32Entry
	45, // 26: nebius.testdata.TestTypeMap.test_uint64:type_name -> nebius.testdata.TestTypeMap.TestUint64Entry
	46, // 27: nebius.testdata.TestTypeMap.test_sint32:type_name -> nebius.testdata.TestTypeMap.TestSint32Entry
	47, // 28: nebius.testdata.TestTypeMap.test_sint64:type_name -> nebius.testdata.TestTypeMap.TestSint64Entry
	48, // 29: nebius.testdata.TestTypeMap.test_fixed32:type_name -> nebius.testdata.TestTypeMap.TestFixed32Entry
	49, // 30: nebius.testdata.TestTypeMap.test_fixed64:type_name -> nebius.testdata.TestTypeMap.TestFixed64Entry
	50, // 31: nebius.testdata.TestTypeMap.test_sfixed32:type_name -> nebius.testdata.TestTypeMap.TestSfixed32Entry
	51, // 32: nebius.testdata.TestTypeMap.test_sfixed64:type_name -> nebius.testdata.TestTypeMap.TestSfixed64Entry
	52, // 33: nebius.testdata.TestTypeMap.test_bool:type_name -> nebius.testdata.TestTypeMap.TestBoolEntry
	53, // 34: nebius.testdata.TestTypeMap.test_string:type_name -> nebius.testdata.TestTypeMap.TestStringEntry
	54, // 35: nebius.testdata.WrongTypeMap.test_int32:type_name -> nebius.testdata.WrongTypeMap.TestInt32Entry
	3,  // 36: nebius.testdata.TestOptional.test_struct:type_name -> nebius.testdata.TestSimple
	3,  // 37: nebius.testdata.TestOneOf.test_struct:type_name -> nebius.testdata.TestSimple
	3,  // 38: nebius.testdata.TestStructs.test_struct:type_name -> nebius.testdata.TestSimple
	3,  // 39: nebius.testdata.TestStructs.test_repeated:type_name -> nebius.testdata.TestSimple
	55, // 40: nebius.testdata.TestStructs.test_stringmap:type_name -> nebius.testdata.TestStructs.TestStringmapEntry
	56, // 41: nebius.testdata.TestStructs.test_intmap:type_name -> nebius.testdata.TestStructs.TestIntmapEntry
	14, // 42: nebius.testdata.TestX.y:type_name -> nebius.testdata.TestY
	15, // 43: nebius.testdata.TestY.z:type_name -> nebius.testdata.TestZ
	57, // 44: nebius.testdata.TestA.b:type_name -> nebius.testdata.TestA.BEntry
	58, // 45: nebius.testdata.TestB.c:type_name -> nebius.testdata.TestB.CEntry
	62, // 46: nebius.testdata.TestWellKnown.test_any:type_name -> google.protobuf.Any
	63, // 47: nebius.testdata.TestWellKnown.test_ts:type_name -> google.protobuf.Timestamp
	62, // 48: nebius.testdata.TestWellKnown.test_repeated_any:type_name -> google.protobuf.Any
	63, // 49: nebius.testdata.TestWellKnown.test_repeated_ts:type_name -> google.protobuf.Timestamp
	2,  // 50: nebius.testdata.TestRecursiveRepeated.field:type_name -> nebius.testdata.RecursiveStruct
	59, // 51: nebius.testdata.TestRecursiveMap.field:type_name -> nebius.testdata.TestRecursiveMap.FieldEntry
	2,  // 52: nebius.testdata.TestRecursiveSingle.field:type_name -> nebius.testdata.RecursiveStruct
	3,  // 53: nebius.testdata.TestOutputOnly.msg:type_name -> nebius.testdata.TestSimple
	60, // 54: nebius.testdata.TestOutputOnly.m:type_name -> nebius.testdata.TestOutputOnly.MEntry
	3,  // 55: nebius.testdata.TestImmutable.msg:type_name -> nebius.testdata.TestSimple
	61, // 56: nebius.testdata.TestImmutable.m:type_name -> nebius.testdata.TestImmutable.MEntry
	0,  // 57: nebius.testdata.TestStringMap.TestEnumEntry.value:type_name -> nebius.testdata.ABC
	1,  // 58: nebius.testdata.TestStringMap.TestAliasedEnumEntry.value:type_name -> nebius.testdata.AliasedABC
	3,  // 59: nebius.testdata.TestStructs.TestStringmapEntry.value:type_name -> nebius.testdata.TestSimple
	3,  // 60: nebius.testdata.TestStructs.TestIntmapEntry.value:type_name -> nebius.testdata.TestSimple
	17, // 61: nebius.testdata.TestA.BEntry.value:type_name -> nebius.testdata.TestB
	18, // 62: nebius.testdata.TestB.CEntry.value:type_name -> nebius.testdata.TestC
	2,  // 63: nebius.testdata.TestRecursiveMap.FieldEntry.value:type_name -> nebius.testdata.RecursiveStruct
	64, // [64:64] is the sub-list for method output_type
	64, // [64:64] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_init() }
func file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_init() {
	if File_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto != nil {
		return
	}
	file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[7].OneofWrappers = []any{}
	file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[8].OneofWrappers = []any{
		(*TestOneOf_TestUint32)(nil),
		(*TestOneOf_TestString)(nil),
		(*TestOneOf_TestStruct)(nil),
	}
	file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes[9].OneofWrappers = []any{
		(*TestAnotherOneOf_TestUint32)(nil),
		(*TestAnotherOneOf_TestUint64)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDesc), len(file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   60,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_goTypes,
		DependencyIndexes: file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_depIdxs,
		EnumInfos:         file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_enumTypes,
		MessageInfos:      file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_msgTypes,
	}.Build()
	File_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto = out.File
	file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_goTypes = nil
	file_api_tools_public_gosdk_proto_fieldmask_protobuf_testdata_data_for_test_proto_depIdxs = nil
}
