// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.3
// source: nebius/storage/v1/lifecycle.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/nebius/gosdk/proto/nebius"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LifecycleRule_Status int32

const (
	LifecycleRule_STATUS_UNSPECIFIED LifecycleRule_Status = 0
	LifecycleRule_ENABLED            LifecycleRule_Status = 1
	LifecycleRule_DISABLED           LifecycleRule_Status = 2
)

// Enum value maps for LifecycleRule_Status.
var (
	LifecycleRule_Status_name = map[int32]string{
		0: "STATUS_UNSPECIFIED",
		1: "ENABLED",
		2: "DISABLED",
	}
	LifecycleRule_Status_value = map[string]int32{
		"STATUS_UNSPECIFIED": 0,
		"ENABLED":            1,
		"DISABLED":           2,
	}
)

func (x LifecycleRule_Status) Enum() *LifecycleRule_Status {
	p := new(LifecycleRule_Status)
	*p = x
	return p
}

func (x LifecycleRule_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LifecycleRule_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_storage_v1_lifecycle_proto_enumTypes[0].Descriptor()
}

func (LifecycleRule_Status) Type() protoreflect.EnumType {
	return &file_nebius_storage_v1_lifecycle_proto_enumTypes[0]
}

func (x LifecycleRule_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LifecycleRule_Status.Descriptor instead.
func (LifecycleRule_Status) EnumDescriptor() ([]byte, []int) {
	return file_nebius_storage_v1_lifecycle_proto_rawDescGZIP(), []int{1, 0}
}

// The lifecycle configuration consists of one or more rules.
// An Lifecycle configuration can have up to 1,000 rules.
// Each rule consists of the following:
//   - A filter identifying a subset of objects to which the rule applies.
//     The filter can be based on a key name prefix, object size, or any combination of these.
//   - A status indicating whether the rule is currently active.
//   - One or more lifecycle expiration actions that you want to be performed on the objects
//     identified by the filter. If the state of your bucket is versioning-enabled or versioning-suspended
//     (bucket.spec.versioning_policy equals to ENABLED or SUSPENDED) you can have many versions of the same
//     object (one current version and zero or more noncurrent versions). The system provides predefined actions
//     that you can specify for current and noncurrent object versions.
type LifecycleConfiguration struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Rules         []*LifecycleRule       `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LifecycleConfiguration) Reset() {
	*x = LifecycleConfiguration{}
	mi := &file_nebius_storage_v1_lifecycle_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifecycleConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifecycleConfiguration) ProtoMessage() {}

func (x *LifecycleConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_storage_v1_lifecycle_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifecycleConfiguration.ProtoReflect.Descriptor instead.
func (*LifecycleConfiguration) Descriptor() ([]byte, []int) {
	return file_nebius_storage_v1_lifecycle_proto_rawDescGZIP(), []int{0}
}

func (x *LifecycleConfiguration) GetRules() []*LifecycleRule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type LifecycleRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Unique identifier for the rule per configuration.
	// The value cannot be longer than 255 characters.
	Id     string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status LifecycleRule_Status `protobuf:"varint,2,opt,name=status,proto3,enum=nebius.storage.v1.LifecycleRule_Status" json:"status,omitempty"`
	// The Filter is used to identify objects that a Lifecycle Rule applies to.
	// The Lifecycle Rule will apply to any object matching all of the predicates
	// configured inside (using logical AND).
	Filter *LifecycleFilter `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	// Specifies the expiration for the lifecycle of the object in the form of date, days and,
	// whether the object has a delete marker.
	Expiration *LifecycleExpiration `protobuf:"bytes,4,opt,name=expiration,proto3" json:"expiration,omitempty"`
	// Specifies when noncurrent object versions expire.
	// It works only on a bucket that has versioning enabled (or suspended).
	NoncurrentVersionExpiration *LifecycleNoncurrentVersionExpiration `protobuf:"bytes,5,opt,name=noncurrent_version_expiration,json=noncurrentVersionExpiration,proto3" json:"noncurrent_version_expiration,omitempty"`
	// Specifies the days since the initiation of an incomplete multipart upload that
	// the system will wait before permanently removing all parts of the upload.
	AbortIncompleteMultipartUpload *LifecycleAbortIncompleteMultipartUpload `protobuf:"bytes,6,opt,name=abort_incomplete_multipart_upload,json=abortIncompleteMultipartUpload,proto3" json:"abort_incomplete_multipart_upload,omitempty"`
	// Specifies the transition for the lifecycle of an object in the form of date or days and
	// target storage class to transit object to.
	Transition *LifecycleTransition `protobuf:"bytes,7,opt,name=transition,proto3" json:"transition,omitempty"`
	// Specifies the transition for the lifecycle of a noncurrent object.
	// It works only on a bucket that has versioning enabled (or suspended).
	NoncurrentVersionTransition *LifecycleNoncurrentVersionTransition `protobuf:"bytes,8,opt,name=noncurrent_version_transition,json=noncurrentVersionTransition,proto3" json:"noncurrent_version_transition,omitempty"`
	unknownFields               protoimpl.UnknownFields
	sizeCache                   protoimpl.SizeCache
}

func (x *LifecycleRule) Reset() {
	*x = LifecycleRule{}
	mi := &file_nebius_storage_v1_lifecycle_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifecycleRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifecycleRule) ProtoMessage() {}

func (x *LifecycleRule) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_storage_v1_lifecycle_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifecycleRule.ProtoReflect.Descriptor instead.
func (*LifecycleRule) Descriptor() ([]byte, []int) {
	return file_nebius_storage_v1_lifecycle_proto_rawDescGZIP(), []int{1}
}

func (x *LifecycleRule) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *LifecycleRule) GetStatus() LifecycleRule_Status {
	if x != nil {
		return x.Status
	}
	return LifecycleRule_STATUS_UNSPECIFIED
}

func (x *LifecycleRule) GetFilter() *LifecycleFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *LifecycleRule) GetExpiration() *LifecycleExpiration {
	if x != nil {
		return x.Expiration
	}
	return nil
}

func (x *LifecycleRule) GetNoncurrentVersionExpiration() *LifecycleNoncurrentVersionExpiration {
	if x != nil {
		return x.NoncurrentVersionExpiration
	}
	return nil
}

func (x *LifecycleRule) GetAbortIncompleteMultipartUpload() *LifecycleAbortIncompleteMultipartUpload {
	if x != nil {
		return x.AbortIncompleteMultipartUpload
	}
	return nil
}

func (x *LifecycleRule) GetTransition() *LifecycleTransition {
	if x != nil {
		return x.Transition
	}
	return nil
}

func (x *LifecycleRule) GetNoncurrentVersionTransition() *LifecycleNoncurrentVersionTransition {
	if x != nil {
		return x.NoncurrentVersionTransition
	}
	return nil
}

type LifecycleFilter struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Prefix identifying one or more objects to which the rule applies.
	// If prefix is empty, the rule applies to all objects in the bucket.
	Prefix string `protobuf:"bytes,1,opt,name=prefix,proto3" json:"prefix,omitempty"`
	// Minimum object size to which the rule applies.
	ObjectSizeGreaterThanBytes int64 `protobuf:"varint,2,opt,name=object_size_greater_than_bytes,json=objectSizeGreaterThanBytes,proto3" json:"object_size_greater_than_bytes,omitempty"`
	// Maximum object size to which the rule applies.
	ObjectSizeLessThanBytes int64 `protobuf:"varint,3,opt,name=object_size_less_than_bytes,json=objectSizeLessThanBytes,proto3" json:"object_size_less_than_bytes,omitempty"`
	unknownFields           protoimpl.UnknownFields
	sizeCache               protoimpl.SizeCache
}

func (x *LifecycleFilter) Reset() {
	*x = LifecycleFilter{}
	mi := &file_nebius_storage_v1_lifecycle_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifecycleFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifecycleFilter) ProtoMessage() {}

func (x *LifecycleFilter) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_storage_v1_lifecycle_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifecycleFilter.ProtoReflect.Descriptor instead.
func (*LifecycleFilter) Descriptor() ([]byte, []int) {
	return file_nebius_storage_v1_lifecycle_proto_rawDescGZIP(), []int{2}
}

func (x *LifecycleFilter) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *LifecycleFilter) GetObjectSizeGreaterThanBytes() int64 {
	if x != nil {
		return x.ObjectSizeGreaterThanBytes
	}
	return 0
}

func (x *LifecycleFilter) GetObjectSizeLessThanBytes() int64 {
	if x != nil {
		return x.ObjectSizeLessThanBytes
	}
	return 0
}

type LifecycleExpiration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ExpiredWith:
	//
	//	*LifecycleExpiration_Date
	//	*LifecycleExpiration_Days
	ExpiredWith isLifecycleExpiration_ExpiredWith `protobuf_oneof:"expired_with"`
	// Indicates whether the system will remove a "delete marker" with no noncurrent versions.
	// If set to true, the "delete marker" will be permanently removed.
	// If set to false the policy takes no action.
	// This cannot be specified with Days or Date in a LifecycleExpiration Policy.
	ExpiredObjectDeleteMarker bool `protobuf:"varint,3,opt,name=expired_object_delete_marker,json=expiredObjectDeleteMarker,proto3" json:"expired_object_delete_marker,omitempty"`
	unknownFields             protoimpl.UnknownFields
	sizeCache                 protoimpl.SizeCache
}

func (x *LifecycleExpiration) Reset() {
	*x = LifecycleExpiration{}
	mi := &file_nebius_storage_v1_lifecycle_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifecycleExpiration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifecycleExpiration) ProtoMessage() {}

func (x *LifecycleExpiration) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_storage_v1_lifecycle_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifecycleExpiration.ProtoReflect.Descriptor instead.
func (*LifecycleExpiration) Descriptor() ([]byte, []int) {
	return file_nebius_storage_v1_lifecycle_proto_rawDescGZIP(), []int{3}
}

func (x *LifecycleExpiration) GetExpiredWith() isLifecycleExpiration_ExpiredWith {
	if x != nil {
		return x.ExpiredWith
	}
	return nil
}

func (x *LifecycleExpiration) GetDate() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.ExpiredWith.(*LifecycleExpiration_Date); ok {
			return x.Date
		}
	}
	return nil
}

func (x *LifecycleExpiration) GetDays() int32 {
	if x != nil {
		if x, ok := x.ExpiredWith.(*LifecycleExpiration_Days); ok {
			return x.Days
		}
	}
	return 0
}

func (x *LifecycleExpiration) GetExpiredObjectDeleteMarker() bool {
	if x != nil {
		return x.ExpiredObjectDeleteMarker
	}
	return false
}

type isLifecycleExpiration_ExpiredWith interface {
	isLifecycleExpiration_ExpiredWith()
}

type LifecycleExpiration_Date struct {
	// Indicates at what date the object will be deleted. The time is always midnight UTC.
	Date *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type LifecycleExpiration_Days struct {
	// Indicates the lifetime, in days, of the objects that are subject to the rule.
	// The value must be a non-zero positive integer.
	Days int32 `protobuf:"varint,2,opt,name=days,proto3,oneof"`
}

func (*LifecycleExpiration_Date) isLifecycleExpiration_ExpiredWith() {}

func (*LifecycleExpiration_Days) isLifecycleExpiration_ExpiredWith() {}

type LifecycleNoncurrentVersionExpiration struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies how many noncurrent versions the system will retain.
	NewerNoncurrentVersions *int32 `protobuf:"varint,1,opt,name=newer_noncurrent_versions,json=newerNoncurrentVersions,proto3,oneof" json:"newer_noncurrent_versions,omitempty"`
	// Specifies the number of days an object is noncurrent before the system will expire it.
	NoncurrentDays int32 `protobuf:"varint,2,opt,name=noncurrent_days,json=noncurrentDays,proto3" json:"noncurrent_days,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *LifecycleNoncurrentVersionExpiration) Reset() {
	*x = LifecycleNoncurrentVersionExpiration{}
	mi := &file_nebius_storage_v1_lifecycle_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifecycleNoncurrentVersionExpiration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifecycleNoncurrentVersionExpiration) ProtoMessage() {}

func (x *LifecycleNoncurrentVersionExpiration) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_storage_v1_lifecycle_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifecycleNoncurrentVersionExpiration.ProtoReflect.Descriptor instead.
func (*LifecycleNoncurrentVersionExpiration) Descriptor() ([]byte, []int) {
	return file_nebius_storage_v1_lifecycle_proto_rawDescGZIP(), []int{4}
}

func (x *LifecycleNoncurrentVersionExpiration) GetNewerNoncurrentVersions() int32 {
	if x != nil && x.NewerNoncurrentVersions != nil {
		return *x.NewerNoncurrentVersions
	}
	return 0
}

func (x *LifecycleNoncurrentVersionExpiration) GetNoncurrentDays() int32 {
	if x != nil {
		return x.NoncurrentDays
	}
	return 0
}

type LifecycleAbortIncompleteMultipartUpload struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies the days since the initiation of an incomplete multipart upload that
	// the system will wait before permanently removing all parts of the upload.
	DaysAfterInitiation int32 `protobuf:"varint,1,opt,name=days_after_initiation,json=daysAfterInitiation,proto3" json:"days_after_initiation,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *LifecycleAbortIncompleteMultipartUpload) Reset() {
	*x = LifecycleAbortIncompleteMultipartUpload{}
	mi := &file_nebius_storage_v1_lifecycle_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifecycleAbortIncompleteMultipartUpload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifecycleAbortIncompleteMultipartUpload) ProtoMessage() {}

func (x *LifecycleAbortIncompleteMultipartUpload) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_storage_v1_lifecycle_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifecycleAbortIncompleteMultipartUpload.ProtoReflect.Descriptor instead.
func (*LifecycleAbortIncompleteMultipartUpload) Descriptor() ([]byte, []int) {
	return file_nebius_storage_v1_lifecycle_proto_rawDescGZIP(), []int{5}
}

func (x *LifecycleAbortIncompleteMultipartUpload) GetDaysAfterInitiation() int32 {
	if x != nil {
		return x.DaysAfterInitiation
	}
	return 0
}

type LifecycleTransition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to TransitedWith:
	//
	//	*LifecycleTransition_Date
	//	*LifecycleTransition_Days
	TransitedWith isLifecycleTransition_TransitedWith `protobuf_oneof:"transited_with"`
	// Target storage class to transit to.
	StorageClass  StorageClass `protobuf:"varint,3,opt,name=storage_class,json=storageClass,proto3,enum=nebius.storage.v1.StorageClass" json:"storage_class,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LifecycleTransition) Reset() {
	*x = LifecycleTransition{}
	mi := &file_nebius_storage_v1_lifecycle_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifecycleTransition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifecycleTransition) ProtoMessage() {}

func (x *LifecycleTransition) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_storage_v1_lifecycle_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifecycleTransition.ProtoReflect.Descriptor instead.
func (*LifecycleTransition) Descriptor() ([]byte, []int) {
	return file_nebius_storage_v1_lifecycle_proto_rawDescGZIP(), []int{6}
}

func (x *LifecycleTransition) GetTransitedWith() isLifecycleTransition_TransitedWith {
	if x != nil {
		return x.TransitedWith
	}
	return nil
}

func (x *LifecycleTransition) GetDate() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.TransitedWith.(*LifecycleTransition_Date); ok {
			return x.Date
		}
	}
	return nil
}

func (x *LifecycleTransition) GetDays() int32 {
	if x != nil {
		if x, ok := x.TransitedWith.(*LifecycleTransition_Days); ok {
			return x.Days
		}
	}
	return 0
}

func (x *LifecycleTransition) GetStorageClass() StorageClass {
	if x != nil {
		return x.StorageClass
	}
	return StorageClass_STORAGE_CLASS_UNSPECIFIED
}

type isLifecycleTransition_TransitedWith interface {
	isLifecycleTransition_TransitedWith()
}

type LifecycleTransition_Date struct {
	// Indicates at what date the object will be transited. The time is always midnight UTC.
	Date *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=date,proto3,oneof"`
}

type LifecycleTransition_Days struct {
	// Amount of days since object was uploaded before it's transited to a new storage class.
	// The value must be a non-zero positive integer.
	Days int32 `protobuf:"varint,2,opt,name=days,proto3,oneof"`
}

func (*LifecycleTransition_Date) isLifecycleTransition_TransitedWith() {}

func (*LifecycleTransition_Days) isLifecycleTransition_TransitedWith() {}

type LifecycleNoncurrentVersionTransition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies how many noncurrent versions the system will retain without transition.
	NewerNoncurrentVersions *int32 `protobuf:"varint,1,opt,name=newer_noncurrent_versions,json=newerNoncurrentVersions,proto3,oneof" json:"newer_noncurrent_versions,omitempty"`
	// Specifies the number of days an object is noncurrent before the system will transit it.
	NoncurrentDays int32 `protobuf:"varint,2,opt,name=noncurrent_days,json=noncurrentDays,proto3" json:"noncurrent_days,omitempty"`
	// Target storage class to transit to.
	StorageClass  StorageClass `protobuf:"varint,3,opt,name=storage_class,json=storageClass,proto3,enum=nebius.storage.v1.StorageClass" json:"storage_class,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LifecycleNoncurrentVersionTransition) Reset() {
	*x = LifecycleNoncurrentVersionTransition{}
	mi := &file_nebius_storage_v1_lifecycle_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LifecycleNoncurrentVersionTransition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LifecycleNoncurrentVersionTransition) ProtoMessage() {}

func (x *LifecycleNoncurrentVersionTransition) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_storage_v1_lifecycle_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LifecycleNoncurrentVersionTransition.ProtoReflect.Descriptor instead.
func (*LifecycleNoncurrentVersionTransition) Descriptor() ([]byte, []int) {
	return file_nebius_storage_v1_lifecycle_proto_rawDescGZIP(), []int{7}
}

func (x *LifecycleNoncurrentVersionTransition) GetNewerNoncurrentVersions() int32 {
	if x != nil && x.NewerNoncurrentVersions != nil {
		return *x.NewerNoncurrentVersions
	}
	return 0
}

func (x *LifecycleNoncurrentVersionTransition) GetNoncurrentDays() int32 {
	if x != nil {
		return x.NoncurrentDays
	}
	return 0
}

func (x *LifecycleNoncurrentVersionTransition) GetStorageClass() StorageClass {
	if x != nil {
		return x.StorageClass
	}
	return StorageClass_STORAGE_CLASS_UNSPECIFIED
}

var File_nebius_storage_v1_lifecycle_proto protoreflect.FileDescriptor

const file_nebius_storage_v1_lifecycle_proto_rawDesc = "" +
	"\n" +
	"!nebius/storage/v1/lifecycle.proto\x12\x11nebius.storage.v1\x1a\x1cnebius/storage/v1/base.proto\x1a\x18nebius/annotations.proto\x1a\x1bbuf/validate/validate.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"[\n" +
	"\x16LifecycleConfiguration\x12A\n" +
	"\x05rules\x18\x01 \x03(\v2 .nebius.storage.v1.LifecycleRuleB\t\xbaH\x06\x92\x01\x03\x10\xe8\aR\x05rules\"\x81\x06\n" +
	"\rLifecycleRule\x12\x16\n" +
	"\x02id\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\x12G\n" +
	"\x06status\x18\x02 \x01(\x0e2'.nebius.storage.v1.LifecycleRule.StatusB\x06\xbaH\x03\xc8\x01\x01R\x06status\x12@\n" +
	"\x06filter\x18\x03 \x01(\v2\".nebius.storage.v1.LifecycleFilterB\x04\xbaJ\x01\aR\x06filter\x12F\n" +
	"\n" +
	"expiration\x18\x04 \x01(\v2&.nebius.storage.v1.LifecycleExpirationR\n" +
	"expiration\x12{\n" +
	"\x1dnoncurrent_version_expiration\x18\x05 \x01(\v27.nebius.storage.v1.LifecycleNoncurrentVersionExpirationR\x1bnoncurrentVersionExpiration\x12\x85\x01\n" +
	"!abort_incomplete_multipart_upload\x18\x06 \x01(\v2:.nebius.storage.v1.LifecycleAbortIncompleteMultipartUploadR\x1eabortIncompleteMultipartUpload\x12F\n" +
	"\n" +
	"transition\x18\a \x01(\v2&.nebius.storage.v1.LifecycleTransitionR\n" +
	"transition\x12{\n" +
	"\x1dnoncurrent_version_transition\x18\b \x01(\v27.nebius.storage.v1.LifecycleNoncurrentVersionTransitionR\x1bnoncurrentVersionTransition\";\n" +
	"\x06Status\x12\x16\n" +
	"\x12STATUS_UNSPECIFIED\x10\x00\x12\v\n" +
	"\aENABLED\x10\x01\x12\f\n" +
	"\bDISABLED\x10\x02\"\xab\x01\n" +
	"\x0fLifecycleFilter\x12\x16\n" +
	"\x06prefix\x18\x01 \x01(\tR\x06prefix\x12B\n" +
	"\x1eobject_size_greater_than_bytes\x18\x02 \x01(\x03R\x1aobjectSizeGreaterThanBytes\x12<\n" +
	"\x1bobject_size_less_than_bytes\x18\x03 \x01(\x03R\x17objectSizeLessThanBytes\"\xbb\x01\n" +
	"\x13LifecycleExpiration\x120\n" +
	"\x04date\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\x04date\x12!\n" +
	"\x04days\x18\x02 \x01(\x05B\v\xbaH\b\x1a\x06\x18ʎ\x01(\x01H\x00R\x04days\x12?\n" +
	"\x1cexpired_object_delete_marker\x18\x03 \x01(\bR\x19expiredObjectDeleteMarkerB\x0e\n" +
	"\fexpired_with\"\xbb\x01\n" +
	"$LifecycleNoncurrentVersionExpiration\x12?\n" +
	"\x19newer_noncurrent_versions\x18\x01 \x01(\x05H\x00R\x17newerNoncurrentVersions\x88\x01\x01\x124\n" +
	"\x0fnoncurrent_days\x18\x02 \x01(\x05B\v\xbaH\b\x1a\x06\x18ʎ\x01(\x01R\x0enoncurrentDaysB\x1c\n" +
	"\x1a_newer_noncurrent_versions\"j\n" +
	"'LifecycleAbortIncompleteMultipartUpload\x12?\n" +
	"\x15days_after_initiation\x18\x01 \x01(\x05B\v\xbaH\b\x1a\x06\x18ʎ\x01(\x01R\x13daysAfterInitiation\"\xc2\x01\n" +
	"\x13LifecycleTransition\x120\n" +
	"\x04date\x18\x01 \x01(\v2\x1a.google.protobuf.TimestampH\x00R\x04date\x12!\n" +
	"\x04days\x18\x02 \x01(\x05B\v\xbaH\b\x1a\x06\x18ʎ\x01(\x01H\x00R\x04days\x12D\n" +
	"\rstorage_class\x18\x03 \x01(\x0e2\x1f.nebius.storage.v1.StorageClassR\fstorageClassB\x10\n" +
	"\x0etransited_with\"\x81\x02\n" +
	"$LifecycleNoncurrentVersionTransition\x12?\n" +
	"\x19newer_noncurrent_versions\x18\x01 \x01(\x05H\x00R\x17newerNoncurrentVersions\x88\x01\x01\x124\n" +
	"\x0fnoncurrent_days\x18\x02 \x01(\x05B\v\xbaH\b\x1a\x06\x18ʎ\x01(\x01R\x0enoncurrentDays\x12D\n" +
	"\rstorage_class\x18\x03 \x01(\x0e2\x1f.nebius.storage.v1.StorageClassR\fstorageClassB\x1c\n" +
	"\x1a_newer_noncurrent_versionsB]\n" +
	"\x18ai.nebius.pub.storage.v1B\x0eLifecycleProtoP\x01Z/github.com/nebius/gosdk/proto/nebius/storage/v1b\x06proto3"

var (
	file_nebius_storage_v1_lifecycle_proto_rawDescOnce sync.Once
	file_nebius_storage_v1_lifecycle_proto_rawDescData []byte
)

func file_nebius_storage_v1_lifecycle_proto_rawDescGZIP() []byte {
	file_nebius_storage_v1_lifecycle_proto_rawDescOnce.Do(func() {
		file_nebius_storage_v1_lifecycle_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nebius_storage_v1_lifecycle_proto_rawDesc), len(file_nebius_storage_v1_lifecycle_proto_rawDesc)))
	})
	return file_nebius_storage_v1_lifecycle_proto_rawDescData
}

var file_nebius_storage_v1_lifecycle_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_nebius_storage_v1_lifecycle_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_nebius_storage_v1_lifecycle_proto_goTypes = []any{
	(LifecycleRule_Status)(0),                       // 0: nebius.storage.v1.LifecycleRule.Status
	(*LifecycleConfiguration)(nil),                  // 1: nebius.storage.v1.LifecycleConfiguration
	(*LifecycleRule)(nil),                           // 2: nebius.storage.v1.LifecycleRule
	(*LifecycleFilter)(nil),                         // 3: nebius.storage.v1.LifecycleFilter
	(*LifecycleExpiration)(nil),                     // 4: nebius.storage.v1.LifecycleExpiration
	(*LifecycleNoncurrentVersionExpiration)(nil),    // 5: nebius.storage.v1.LifecycleNoncurrentVersionExpiration
	(*LifecycleAbortIncompleteMultipartUpload)(nil), // 6: nebius.storage.v1.LifecycleAbortIncompleteMultipartUpload
	(*LifecycleTransition)(nil),                     // 7: nebius.storage.v1.LifecycleTransition
	(*LifecycleNoncurrentVersionTransition)(nil),    // 8: nebius.storage.v1.LifecycleNoncurrentVersionTransition
	(*timestamppb.Timestamp)(nil),                   // 9: google.protobuf.Timestamp
	(StorageClass)(0),                               // 10: nebius.storage.v1.StorageClass
}
var file_nebius_storage_v1_lifecycle_proto_depIdxs = []int32{
	2,  // 0: nebius.storage.v1.LifecycleConfiguration.rules:type_name -> nebius.storage.v1.LifecycleRule
	0,  // 1: nebius.storage.v1.LifecycleRule.status:type_name -> nebius.storage.v1.LifecycleRule.Status
	3,  // 2: nebius.storage.v1.LifecycleRule.filter:type_name -> nebius.storage.v1.LifecycleFilter
	4,  // 3: nebius.storage.v1.LifecycleRule.expiration:type_name -> nebius.storage.v1.LifecycleExpiration
	5,  // 4: nebius.storage.v1.LifecycleRule.noncurrent_version_expiration:type_name -> nebius.storage.v1.LifecycleNoncurrentVersionExpiration
	6,  // 5: nebius.storage.v1.LifecycleRule.abort_incomplete_multipart_upload:type_name -> nebius.storage.v1.LifecycleAbortIncompleteMultipartUpload
	7,  // 6: nebius.storage.v1.LifecycleRule.transition:type_name -> nebius.storage.v1.LifecycleTransition
	8,  // 7: nebius.storage.v1.LifecycleRule.noncurrent_version_transition:type_name -> nebius.storage.v1.LifecycleNoncurrentVersionTransition
	9,  // 8: nebius.storage.v1.LifecycleExpiration.date:type_name -> google.protobuf.Timestamp
	9,  // 9: nebius.storage.v1.LifecycleTransition.date:type_name -> google.protobuf.Timestamp
	10, // 10: nebius.storage.v1.LifecycleTransition.storage_class:type_name -> nebius.storage.v1.StorageClass
	10, // 11: nebius.storage.v1.LifecycleNoncurrentVersionTransition.storage_class:type_name -> nebius.storage.v1.StorageClass
	12, // [12:12] is the sub-list for method output_type
	12, // [12:12] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_nebius_storage_v1_lifecycle_proto_init() }
func file_nebius_storage_v1_lifecycle_proto_init() {
	if File_nebius_storage_v1_lifecycle_proto != nil {
		return
	}
	file_nebius_storage_v1_base_proto_init()
	file_nebius_storage_v1_lifecycle_proto_msgTypes[3].OneofWrappers = []any{
		(*LifecycleExpiration_Date)(nil),
		(*LifecycleExpiration_Days)(nil),
	}
	file_nebius_storage_v1_lifecycle_proto_msgTypes[4].OneofWrappers = []any{}
	file_nebius_storage_v1_lifecycle_proto_msgTypes[6].OneofWrappers = []any{
		(*LifecycleTransition_Date)(nil),
		(*LifecycleTransition_Days)(nil),
	}
	file_nebius_storage_v1_lifecycle_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nebius_storage_v1_lifecycle_proto_rawDesc), len(file_nebius_storage_v1_lifecycle_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nebius_storage_v1_lifecycle_proto_goTypes,
		DependencyIndexes: file_nebius_storage_v1_lifecycle_proto_depIdxs,
		EnumInfos:         file_nebius_storage_v1_lifecycle_proto_enumTypes,
		MessageInfos:      file_nebius_storage_v1_lifecycle_proto_msgTypes,
	}.Build()
	File_nebius_storage_v1_lifecycle_proto = out.File
	file_nebius_storage_v1_lifecycle_proto_goTypes = nil
	file_nebius_storage_v1_lifecycle_proto_depIdxs = nil
}
