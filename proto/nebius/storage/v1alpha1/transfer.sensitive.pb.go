// Code generated by protoc-gen-sensitive. DO NOT EDIT.

package v1alpha1

import (
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	slog "log/slog"
)

// Sanitize mutates [Transfer] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *Transfer) Sanitize() {
	if x == nil {
		return
	}
	x.Spec.Sanitize()
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [Transfer].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *Transfer
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [Transfer], use the following code:
//
//	var original *Transfer
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*Transfer)
func (x *Transfer) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*Transfer) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperTransfer)(c))
}

// wrapperTransfer is used to return [Transfer] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperTransfer Transfer

func (w *wrapperTransfer) String() string {
	return (*Transfer)(w).String()
}

func (*wrapperTransfer) ProtoMessage() {}

func (w *wrapperTransfer) ProtoReflect() protoreflect.Message {
	return (*Transfer)(w).ProtoReflect()
}

// Sanitize mutates [TransferSpec] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *TransferSpec) Sanitize() {
	if x == nil {
		return
	}
	x.Source.Sanitize()
	x.Destination.Sanitize()
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [TransferSpec].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *TransferSpec
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [TransferSpec], use the following code:
//
//	var original *TransferSpec
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*TransferSpec)
func (x *TransferSpec) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*TransferSpec) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperTransferSpec)(c))
}

// wrapperTransferSpec is used to return [TransferSpec] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperTransferSpec TransferSpec

func (w *wrapperTransferSpec) String() string {
	return (*TransferSpec)(w).String()
}

func (*wrapperTransferSpec) ProtoMessage() {}

func (w *wrapperTransferSpec) ProtoReflect() protoreflect.Message {
	return (*TransferSpec)(w).ProtoReflect()
}

// Sanitize mutates [TransferSpec_SourceBucket] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *TransferSpec_SourceBucket) Sanitize() {
	if x == nil {
		return
	}
	x.Credentials.Sanitize()
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [TransferSpec_SourceBucket].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *TransferSpec_SourceBucket
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [TransferSpec_SourceBucket], use the following code:
//
//	var original *TransferSpec_SourceBucket
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*TransferSpec_SourceBucket)
func (x *TransferSpec_SourceBucket) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*TransferSpec_SourceBucket) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperTransferSpec_SourceBucket)(c))
}

// wrapperTransferSpec_SourceBucket is used to return [TransferSpec_SourceBucket] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperTransferSpec_SourceBucket TransferSpec_SourceBucket

func (w *wrapperTransferSpec_SourceBucket) String() string {
	return (*TransferSpec_SourceBucket)(w).String()
}

func (*wrapperTransferSpec_SourceBucket) ProtoMessage() {}

func (w *wrapperTransferSpec_SourceBucket) ProtoReflect() protoreflect.Message {
	return (*TransferSpec_SourceBucket)(w).ProtoReflect()
}

// Sanitize mutates [TransferSpec_DestinationBucket] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *TransferSpec_DestinationBucket) Sanitize() {
	if x == nil {
		return
	}
	x.Credentials.Sanitize()
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [TransferSpec_DestinationBucket].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *TransferSpec_DestinationBucket
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [TransferSpec_DestinationBucket], use the following code:
//
//	var original *TransferSpec_DestinationBucket
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*TransferSpec_DestinationBucket)
func (x *TransferSpec_DestinationBucket) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*TransferSpec_DestinationBucket) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperTransferSpec_DestinationBucket)(c))
}

// wrapperTransferSpec_DestinationBucket is used to return [TransferSpec_DestinationBucket] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperTransferSpec_DestinationBucket TransferSpec_DestinationBucket

func (w *wrapperTransferSpec_DestinationBucket) String() string {
	return (*TransferSpec_DestinationBucket)(w).String()
}

func (*wrapperTransferSpec_DestinationBucket) ProtoMessage() {}

func (w *wrapperTransferSpec_DestinationBucket) ProtoReflect() protoreflect.Message {
	return (*TransferSpec_DestinationBucket)(w).ProtoReflect()
}

// Sanitize mutates [TransferSpec_BucketCredentials] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *TransferSpec_BucketCredentials) Sanitize() {
	if x == nil {
		return
	}
	if o, ok := x.Credentials.(*TransferSpec_BucketCredentials_AccessKey); ok && o != nil {
		o.AccessKey.Sanitize()
	}
	if o, ok := x.Credentials.(*TransferSpec_BucketCredentials_AzureAccessKey_); ok && o != nil {
		o.AzureAccessKey.Sanitize()
	}
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [TransferSpec_BucketCredentials].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *TransferSpec_BucketCredentials
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [TransferSpec_BucketCredentials], use the following code:
//
//	var original *TransferSpec_BucketCredentials
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*TransferSpec_BucketCredentials)
func (x *TransferSpec_BucketCredentials) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*TransferSpec_BucketCredentials) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperTransferSpec_BucketCredentials)(c))
}

// wrapperTransferSpec_BucketCredentials is used to return [TransferSpec_BucketCredentials] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperTransferSpec_BucketCredentials TransferSpec_BucketCredentials

func (w *wrapperTransferSpec_BucketCredentials) String() string {
	return (*TransferSpec_BucketCredentials)(w).String()
}

func (*wrapperTransferSpec_BucketCredentials) ProtoMessage() {}

func (w *wrapperTransferSpec_BucketCredentials) ProtoReflect() protoreflect.Message {
	return (*TransferSpec_BucketCredentials)(w).ProtoReflect()
}

// func (x *TransferSpec_BucketCredentials_CredentialsAnonymous) Sanitize()            // is not generated as no sensitive fields found
// func (x *TransferSpec_BucketCredentials_CredentialsAnonymous) LogValue() slog.Value // is not generated as no sensitive fields found

// Sanitize mutates [TransferSpec_BucketCredentials_CredentialsAccessKey] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *TransferSpec_BucketCredentials_CredentialsAccessKey) Sanitize() {
	if x == nil {
		return
	}
	x.AccessKeyId = "**HIDDEN**"
	x.SecretAccessKey = "**HIDDEN**"
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [TransferSpec_BucketCredentials_CredentialsAccessKey].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *TransferSpec_BucketCredentials_CredentialsAccessKey
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [TransferSpec_BucketCredentials_CredentialsAccessKey], use the following code:
//
//	var original *TransferSpec_BucketCredentials_CredentialsAccessKey
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*TransferSpec_BucketCredentials_CredentialsAccessKey)
func (x *TransferSpec_BucketCredentials_CredentialsAccessKey) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*TransferSpec_BucketCredentials_CredentialsAccessKey) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperTransferSpec_BucketCredentials_CredentialsAccessKey)(c))
}

// wrapperTransferSpec_BucketCredentials_CredentialsAccessKey is used to return [TransferSpec_BucketCredentials_CredentialsAccessKey] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperTransferSpec_BucketCredentials_CredentialsAccessKey TransferSpec_BucketCredentials_CredentialsAccessKey

func (w *wrapperTransferSpec_BucketCredentials_CredentialsAccessKey) String() string {
	return (*TransferSpec_BucketCredentials_CredentialsAccessKey)(w).String()
}

func (*wrapperTransferSpec_BucketCredentials_CredentialsAccessKey) ProtoMessage() {}

func (w *wrapperTransferSpec_BucketCredentials_CredentialsAccessKey) ProtoReflect() protoreflect.Message {
	return (*TransferSpec_BucketCredentials_CredentialsAccessKey)(w).ProtoReflect()
}

// Sanitize mutates [TransferSpec_BucketCredentials_AzureAccessKey] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *TransferSpec_BucketCredentials_AzureAccessKey) Sanitize() {
	if x == nil {
		return
	}
	x.AccountName = "**HIDDEN**"
	x.AccessKey = "**HIDDEN**"
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [TransferSpec_BucketCredentials_AzureAccessKey].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *TransferSpec_BucketCredentials_AzureAccessKey
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [TransferSpec_BucketCredentials_AzureAccessKey], use the following code:
//
//	var original *TransferSpec_BucketCredentials_AzureAccessKey
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*TransferSpec_BucketCredentials_AzureAccessKey)
func (x *TransferSpec_BucketCredentials_AzureAccessKey) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*TransferSpec_BucketCredentials_AzureAccessKey) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperTransferSpec_BucketCredentials_AzureAccessKey)(c))
}

// wrapperTransferSpec_BucketCredentials_AzureAccessKey is used to return [TransferSpec_BucketCredentials_AzureAccessKey] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperTransferSpec_BucketCredentials_AzureAccessKey TransferSpec_BucketCredentials_AzureAccessKey

func (w *wrapperTransferSpec_BucketCredentials_AzureAccessKey) String() string {
	return (*TransferSpec_BucketCredentials_AzureAccessKey)(w).String()
}

func (*wrapperTransferSpec_BucketCredentials_AzureAccessKey) ProtoMessage() {}

func (w *wrapperTransferSpec_BucketCredentials_AzureAccessKey) ProtoReflect() protoreflect.Message {
	return (*TransferSpec_BucketCredentials_AzureAccessKey)(w).ProtoReflect()
}

// func (x *TransferSpec_Limiters) Sanitize()            // is not generated as no sensitive fields found
// func (x *TransferSpec_Limiters) LogValue() slog.Value // is not generated as no sensitive fields found

// func (x *TransferSpec_StopConditionAfterOneIteration) Sanitize()            // is not generated as no sensitive fields found
// func (x *TransferSpec_StopConditionAfterOneIteration) LogValue() slog.Value // is not generated as no sensitive fields found

// func (x *TransferSpec_StopConditionAfterNEmptyIterations) Sanitize()            // is not generated as no sensitive fields found
// func (x *TransferSpec_StopConditionAfterNEmptyIterations) LogValue() slog.Value // is not generated as no sensitive fields found

// func (x *TransferSpec_StopConditionInfinite) Sanitize()            // is not generated as no sensitive fields found
// func (x *TransferSpec_StopConditionInfinite) LogValue() slog.Value // is not generated as no sensitive fields found

// func (x *TransferStatus) Sanitize()            // is not generated as no sensitive fields found
// func (x *TransferStatus) LogValue() slog.Value // is not generated as no sensitive fields found

// func (x *TransferIteration) Sanitize()            // is not generated as no sensitive fields found
// func (x *TransferIteration) LogValue() slog.Value // is not generated as no sensitive fields found
