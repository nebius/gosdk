// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: nebius/storage/v1alpha1/transfer_service.proto

package v1alpha1

import (
	context "context"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TransferService_Get_FullMethodName                 = "/nebius.storage.v1alpha1.TransferService/Get"
	TransferService_GetByName_FullMethodName           = "/nebius.storage.v1alpha1.TransferService/GetByName"
	TransferService_List_FullMethodName                = "/nebius.storage.v1alpha1.TransferService/List"
	TransferService_Create_FullMethodName              = "/nebius.storage.v1alpha1.TransferService/Create"
	TransferService_Update_FullMethodName              = "/nebius.storage.v1alpha1.TransferService/Update"
	TransferService_Stop_FullMethodName                = "/nebius.storage.v1alpha1.TransferService/Stop"
	TransferService_Resume_FullMethodName              = "/nebius.storage.v1alpha1.TransferService/Resume"
	TransferService_Delete_FullMethodName              = "/nebius.storage.v1alpha1.TransferService/Delete"
	TransferService_GetIterationHistory_FullMethodName = "/nebius.storage.v1alpha1.TransferService/GetIterationHistory"
)

// TransferServiceClient is the client API for TransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransferServiceClient interface {
	Get(ctx context.Context, in *GetTransferRequest, opts ...grpc.CallOption) (*Transfer, error)
	GetByName(ctx context.Context, in *v1.GetByNameRequest, opts ...grpc.CallOption) (*Transfer, error)
	List(ctx context.Context, in *ListTransfersRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error)
	Create(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Update(ctx context.Context, in *UpdateTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	// Stop active transfer. If the transfer is currently moving data,
	// it will be transitioned to the Stopping state and will move to the Stopped state once all processes have been stopped.
	// If the transfer is waiting between iterations, it will stop immediately.
	// Only transfer in Active state can be stopped.
	Stop(ctx context.Context, in *StopTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	// Resume stopped or failed transfer.
	Resume(ctx context.Context, in *ResumeTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	// Fully delete a transfer along with its history. Only stopped or failed transfers can be deleted.
	Delete(ctx context.Context, in *DeleteTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	GetIterationHistory(ctx context.Context, in *GetIterationHistoryRequest, opts ...grpc.CallOption) (*GetIterationHistoryResponse, error)
}

type transferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferServiceClient(cc grpc.ClientConnInterface) TransferServiceClient {
	return &transferServiceClient{cc}
}

func (c *transferServiceClient) Get(ctx context.Context, in *GetTransferRequest, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, TransferService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) GetByName(ctx context.Context, in *v1.GetByNameRequest, opts ...grpc.CallOption) (*Transfer, error) {
	out := new(Transfer)
	err := c.cc.Invoke(ctx, TransferService_GetByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) List(ctx context.Context, in *ListTransfersRequest, opts ...grpc.CallOption) (*ListTransfersResponse, error) {
	out := new(ListTransfersResponse)
	err := c.cc.Invoke(ctx, TransferService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) Create(ctx context.Context, in *CreateTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, TransferService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) Update(ctx context.Context, in *UpdateTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, TransferService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) Stop(ctx context.Context, in *StopTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, TransferService_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) Resume(ctx context.Context, in *ResumeTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, TransferService_Resume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) Delete(ctx context.Context, in *DeleteTransferRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, TransferService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transferServiceClient) GetIterationHistory(ctx context.Context, in *GetIterationHistoryRequest, opts ...grpc.CallOption) (*GetIterationHistoryResponse, error) {
	out := new(GetIterationHistoryResponse)
	err := c.cc.Invoke(ctx, TransferService_GetIterationHistory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferServiceServer is the server API for TransferService service.
// All implementations should embed UnimplementedTransferServiceServer
// for forward compatibility
type TransferServiceServer interface {
	Get(context.Context, *GetTransferRequest) (*Transfer, error)
	GetByName(context.Context, *v1.GetByNameRequest) (*Transfer, error)
	List(context.Context, *ListTransfersRequest) (*ListTransfersResponse, error)
	Create(context.Context, *CreateTransferRequest) (*v1.Operation, error)
	Update(context.Context, *UpdateTransferRequest) (*v1.Operation, error)
	// Stop active transfer. If the transfer is currently moving data,
	// it will be transitioned to the Stopping state and will move to the Stopped state once all processes have been stopped.
	// If the transfer is waiting between iterations, it will stop immediately.
	// Only transfer in Active state can be stopped.
	Stop(context.Context, *StopTransferRequest) (*v1.Operation, error)
	// Resume stopped or failed transfer.
	Resume(context.Context, *ResumeTransferRequest) (*v1.Operation, error)
	// Fully delete a transfer along with its history. Only stopped or failed transfers can be deleted.
	Delete(context.Context, *DeleteTransferRequest) (*v1.Operation, error)
	GetIterationHistory(context.Context, *GetIterationHistoryRequest) (*GetIterationHistoryResponse, error)
}

// UnimplementedTransferServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTransferServiceServer struct {
}

func (UnimplementedTransferServiceServer) Get(context.Context, *GetTransferRequest) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTransferServiceServer) GetByName(context.Context, *v1.GetByNameRequest) (*Transfer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedTransferServiceServer) List(context.Context, *ListTransfersRequest) (*ListTransfersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedTransferServiceServer) Create(context.Context, *CreateTransferRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedTransferServiceServer) Update(context.Context, *UpdateTransferRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTransferServiceServer) Stop(context.Context, *StopTransferRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedTransferServiceServer) Resume(context.Context, *ResumeTransferRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resume not implemented")
}
func (UnimplementedTransferServiceServer) Delete(context.Context, *DeleteTransferRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTransferServiceServer) GetIterationHistory(context.Context, *GetIterationHistoryRequest) (*GetIterationHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIterationHistory not implemented")
}

// UnsafeTransferServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransferServiceServer will
// result in compilation errors.
type UnsafeTransferServiceServer interface {
	mustEmbedUnimplementedTransferServiceServer()
}

func RegisterTransferServiceServer(s grpc.ServiceRegistrar, srv TransferServiceServer) {
	s.RegisterService(&TransferService_ServiceDesc, srv)
}

func _TransferService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).Get(ctx, req.(*GetTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).GetByName(ctx, req.(*v1.GetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransfersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).List(ctx, req.(*ListTransfersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).Create(ctx, req.(*CreateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).Update(ctx, req.(*UpdateTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).Stop(ctx, req.(*StopTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_Resume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).Resume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_Resume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).Resume(ctx, req.(*ResumeTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).Delete(ctx, req.(*DeleteTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransferService_GetIterationHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetIterationHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferServiceServer).GetIterationHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TransferService_GetIterationHistory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferServiceServer).GetIterationHistory(ctx, req.(*GetIterationHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TransferService_ServiceDesc is the grpc.ServiceDesc for TransferService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TransferService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebius.storage.v1alpha1.TransferService",
	HandlerType: (*TransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TransferService_Get_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _TransferService_GetByName_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TransferService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _TransferService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _TransferService_Update_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _TransferService_Stop_Handler,
		},
		{
			MethodName: "Resume",
			Handler:    _TransferService_Resume_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _TransferService_Delete_Handler,
		},
		{
			MethodName: "GetIterationHistory",
			Handler:    _TransferService_GetIterationHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebius/storage/v1alpha1/transfer_service.proto",
}
