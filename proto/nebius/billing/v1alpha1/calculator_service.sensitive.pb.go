// Code generated by protoc-gen-sensitive. DO NOT EDIT.

package v1alpha1

import (
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	slog "log/slog"
)

// Sanitize mutates [EstimateRequest] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *EstimateRequest) Sanitize() {
	if x == nil {
		return
	}
	x.ResourceSpec.Sanitize()
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [EstimateRequest].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *EstimateRequest
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [EstimateRequest], use the following code:
//
//	var original *EstimateRequest
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*EstimateRequest)
func (x *EstimateRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*EstimateRequest) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperEstimateRequest)(c))
}

// wrapperEstimateRequest is used to return [EstimateRequest] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperEstimateRequest EstimateRequest

func (w *wrapperEstimateRequest) String() string {
	return (*EstimateRequest)(w).String()
}

func (*wrapperEstimateRequest) ProtoMessage() {}

func (w *wrapperEstimateRequest) ProtoReflect() protoreflect.Message {
	return (*EstimateRequest)(w).ProtoReflect()
}

// func (x *EstimateResponse) Sanitize()            // is not generated as no sensitive fields found
// func (x *EstimateResponse) LogValue() slog.Value // is not generated as no sensitive fields found

// Sanitize mutates [EstimateBatchRequest] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *EstimateBatchRequest) Sanitize() {
	if x == nil {
		return
	}
	for _, y := range x.ResourceSpecs {
		y.Sanitize()
	}
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [EstimateBatchRequest].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *EstimateBatchRequest
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [EstimateBatchRequest], use the following code:
//
//	var original *EstimateBatchRequest
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*EstimateBatchRequest)
func (x *EstimateBatchRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*EstimateBatchRequest) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperEstimateBatchRequest)(c))
}

// wrapperEstimateBatchRequest is used to return [EstimateBatchRequest] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperEstimateBatchRequest EstimateBatchRequest

func (w *wrapperEstimateBatchRequest) String() string {
	return (*EstimateBatchRequest)(w).String()
}

func (*wrapperEstimateBatchRequest) ProtoMessage() {}

func (w *wrapperEstimateBatchRequest) ProtoReflect() protoreflect.Message {
	return (*EstimateBatchRequest)(w).ProtoReflect()
}

// func (x *EstimateBatchResponse) Sanitize()            // is not generated as no sensitive fields found
// func (x *EstimateBatchResponse) LogValue() slog.Value // is not generated as no sensitive fields found
