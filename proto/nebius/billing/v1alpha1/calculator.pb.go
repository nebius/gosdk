// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.28.3
// source: nebius/billing/v1alpha1/calculator.proto

package v1alpha1

import (
	v1 "github.com/nebius/gosdk/proto/nebius/compute/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Resource specification for cost estimation.
// Contains the specifications for creating and updating different types of resources.
type ResourceSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to ResourceSpec:
	//
	//	*ResourceSpec_ComputeInstanceSpec
	//	*ResourceSpec_ComputeInstanceUpdateSpec
	//	*ResourceSpec_ComputeDiskSpec
	//	*ResourceSpec_ComputeDiskUpdateSpec
	//	*ResourceSpec_ComputeFilesystemSpec
	//	*ResourceSpec_ComputeFilesystemUpdateSpec
	ResourceSpec  isResourceSpec_ResourceSpec `protobuf_oneof:"resource_spec"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceSpec) Reset() {
	*x = ResourceSpec{}
	mi := &file_nebius_billing_v1alpha1_calculator_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceSpec) ProtoMessage() {}

func (x *ResourceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_billing_v1alpha1_calculator_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceSpec.ProtoReflect.Descriptor instead.
func (*ResourceSpec) Descriptor() ([]byte, []int) {
	return file_nebius_billing_v1alpha1_calculator_proto_rawDescGZIP(), []int{0}
}

func (x *ResourceSpec) GetResourceSpec() isResourceSpec_ResourceSpec {
	if x != nil {
		return x.ResourceSpec
	}
	return nil
}

func (x *ResourceSpec) GetComputeInstanceSpec() *v1.CreateInstanceRequest {
	if x != nil {
		if x, ok := x.ResourceSpec.(*ResourceSpec_ComputeInstanceSpec); ok {
			return x.ComputeInstanceSpec
		}
	}
	return nil
}

func (x *ResourceSpec) GetComputeInstanceUpdateSpec() *v1.UpdateInstanceRequest {
	if x != nil {
		if x, ok := x.ResourceSpec.(*ResourceSpec_ComputeInstanceUpdateSpec); ok {
			return x.ComputeInstanceUpdateSpec
		}
	}
	return nil
}

func (x *ResourceSpec) GetComputeDiskSpec() *v1.CreateDiskRequest {
	if x != nil {
		if x, ok := x.ResourceSpec.(*ResourceSpec_ComputeDiskSpec); ok {
			return x.ComputeDiskSpec
		}
	}
	return nil
}

func (x *ResourceSpec) GetComputeDiskUpdateSpec() *v1.UpdateDiskRequest {
	if x != nil {
		if x, ok := x.ResourceSpec.(*ResourceSpec_ComputeDiskUpdateSpec); ok {
			return x.ComputeDiskUpdateSpec
		}
	}
	return nil
}

func (x *ResourceSpec) GetComputeFilesystemSpec() *v1.CreateFilesystemRequest {
	if x != nil {
		if x, ok := x.ResourceSpec.(*ResourceSpec_ComputeFilesystemSpec); ok {
			return x.ComputeFilesystemSpec
		}
	}
	return nil
}

func (x *ResourceSpec) GetComputeFilesystemUpdateSpec() *v1.UpdateFilesystemRequest {
	if x != nil {
		if x, ok := x.ResourceSpec.(*ResourceSpec_ComputeFilesystemUpdateSpec); ok {
			return x.ComputeFilesystemUpdateSpec
		}
	}
	return nil
}

type isResourceSpec_ResourceSpec interface {
	isResourceSpec_ResourceSpec()
}

type ResourceSpec_ComputeInstanceSpec struct {
	ComputeInstanceSpec *v1.CreateInstanceRequest `protobuf:"bytes,100,opt,name=compute_instance_spec,json=computeInstanceSpec,proto3,oneof"`
}

type ResourceSpec_ComputeInstanceUpdateSpec struct {
	ComputeInstanceUpdateSpec *v1.UpdateInstanceRequest `protobuf:"bytes,101,opt,name=compute_instance_update_spec,json=computeInstanceUpdateSpec,proto3,oneof"`
}

type ResourceSpec_ComputeDiskSpec struct {
	ComputeDiskSpec *v1.CreateDiskRequest `protobuf:"bytes,102,opt,name=compute_disk_spec,json=computeDiskSpec,proto3,oneof"`
}

type ResourceSpec_ComputeDiskUpdateSpec struct {
	ComputeDiskUpdateSpec *v1.UpdateDiskRequest `protobuf:"bytes,103,opt,name=compute_disk_update_spec,json=computeDiskUpdateSpec,proto3,oneof"`
}

type ResourceSpec_ComputeFilesystemSpec struct {
	ComputeFilesystemSpec *v1.CreateFilesystemRequest `protobuf:"bytes,104,opt,name=compute_filesystem_spec,json=computeFilesystemSpec,proto3,oneof"`
}

type ResourceSpec_ComputeFilesystemUpdateSpec struct {
	ComputeFilesystemUpdateSpec *v1.UpdateFilesystemRequest `protobuf:"bytes,105,opt,name=compute_filesystem_update_spec,json=computeFilesystemUpdateSpec,proto3,oneof"`
}

func (*ResourceSpec_ComputeInstanceSpec) isResourceSpec_ResourceSpec() {}

func (*ResourceSpec_ComputeInstanceUpdateSpec) isResourceSpec_ResourceSpec() {}

func (*ResourceSpec_ComputeDiskSpec) isResourceSpec_ResourceSpec() {}

func (*ResourceSpec_ComputeDiskUpdateSpec) isResourceSpec_ResourceSpec() {}

func (*ResourceSpec_ComputeFilesystemSpec) isResourceSpec_ResourceSpec() {}

func (*ResourceSpec_ComputeFilesystemUpdateSpec) isResourceSpec_ResourceSpec() {}

// Cost information for a group of resources.
type ResourceGroupCost struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to CostType:
	//
	//	*ResourceGroupCost_General
	CostType      isResourceGroupCost_CostType `protobuf_oneof:"cost_type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceGroupCost) Reset() {
	*x = ResourceGroupCost{}
	mi := &file_nebius_billing_v1alpha1_calculator_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceGroupCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceGroupCost) ProtoMessage() {}

func (x *ResourceGroupCost) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_billing_v1alpha1_calculator_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceGroupCost.ProtoReflect.Descriptor instead.
func (*ResourceGroupCost) Descriptor() ([]byte, []int) {
	return file_nebius_billing_v1alpha1_calculator_proto_rawDescGZIP(), []int{1}
}

func (x *ResourceGroupCost) GetCostType() isResourceGroupCost_CostType {
	if x != nil {
		return x.CostType
	}
	return nil
}

func (x *ResourceGroupCost) GetGeneral() *GeneralTotalCost {
	if x != nil {
		if x, ok := x.CostType.(*ResourceGroupCost_General); ok {
			return x.General
		}
	}
	return nil
}

type isResourceGroupCost_CostType interface {
	isResourceGroupCost_CostType()
}

type ResourceGroupCost_General struct {
	// Fixed total cost calculation.
	// Used when the total cost is deterministic and doesn't vary.
	General *GeneralTotalCost `protobuf:"bytes,10,opt,name=general,proto3,oneof"`
}

func (*ResourceGroupCost_General) isResourceGroupCost_CostType() {}

// General total cost with a single fixed amount.
// Used for resources with predictable, non-variable pricing.
type GeneralTotalCost struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cost breakdown including all SKUs and their individual costs.
	Total         *CostBreakdown `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeneralTotalCost) Reset() {
	*x = GeneralTotalCost{}
	mi := &file_nebius_billing_v1alpha1_calculator_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeneralTotalCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralTotalCost) ProtoMessage() {}

func (x *GeneralTotalCost) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_billing_v1alpha1_calculator_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralTotalCost.ProtoReflect.Descriptor instead.
func (*GeneralTotalCost) Descriptor() ([]byte, []int) {
	return file_nebius_billing_v1alpha1_calculator_proto_rawDescGZIP(), []int{2}
}

func (x *GeneralTotalCost) GetTotal() *CostBreakdown {
	if x != nil {
		return x.Total
	}
	return nil
}

// General resource cost for single-unit resources.
// Used for resources like compute instances or disks where the unit count is not variable.
type GeneralResourceCost struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Cost breakdown for the resource including all SKU costs and total cost.
	Total         *CostBreakdown `protobuf:"bytes,1,opt,name=total,proto3" json:"total,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GeneralResourceCost) Reset() {
	*x = GeneralResourceCost{}
	mi := &file_nebius_billing_v1alpha1_calculator_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GeneralResourceCost) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeneralResourceCost) ProtoMessage() {}

func (x *GeneralResourceCost) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_billing_v1alpha1_calculator_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeneralResourceCost.ProtoReflect.Descriptor instead.
func (*GeneralResourceCost) Descriptor() ([]byte, []int) {
	return file_nebius_billing_v1alpha1_calculator_proto_rawDescGZIP(), []int{3}
}

func (x *GeneralResourceCost) GetTotal() *CostBreakdown {
	if x != nil {
		return x.Total
	}
	return nil
}

// Detailed cost breakdown showing individual SKU costs and totals.
type CostBreakdown struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Total cost as a decimal string.
	// Represents the sum of all SKU costs with full precision.
	// Example: "42.123456789" for precise billing calculations.
	Cost string `protobuf:"bytes,2,opt,name=cost,proto3" json:"cost,omitempty"`
	// Total cost rounded up to 2 decimal places.
	// Example: "42.13"
	CostRounded   string `protobuf:"bytes,3,opt,name=cost_rounded,json=costRounded,proto3" json:"cost_rounded,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CostBreakdown) Reset() {
	*x = CostBreakdown{}
	mi := &file_nebius_billing_v1alpha1_calculator_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CostBreakdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CostBreakdown) ProtoMessage() {}

func (x *CostBreakdown) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_billing_v1alpha1_calculator_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CostBreakdown.ProtoReflect.Descriptor instead.
func (*CostBreakdown) Descriptor() ([]byte, []int) {
	return file_nebius_billing_v1alpha1_calculator_proto_rawDescGZIP(), []int{4}
}

func (x *CostBreakdown) GetCost() string {
	if x != nil {
		return x.Cost
	}
	return ""
}

func (x *CostBreakdown) GetCostRounded() string {
	if x != nil {
		return x.CostRounded
	}
	return ""
}

var File_nebius_billing_v1alpha1_calculator_proto protoreflect.FileDescriptor

var file_nebius_billing_v1alpha1_calculator_proto_rawDesc = string([]byte{
	0x0a, 0x28, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x6e, 0x65, 0x62, 0x69,
	0x75, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x1a, 0x24, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x6e, 0x65, 0x62, 0x69, 0x75,
	0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x28, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xfa, 0x04, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x5e, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x6b, 0x0a, 0x1c, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x19, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6e, 0x63, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x52, 0x0a,
	0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x5f, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x67, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x69,
	0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x15, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x44, 0x69, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x12, 0x64, 0x0a, 0x17, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x66, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x68, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x15, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x71, 0x0a, 0x1e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1b,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x0f, 0x0a, 0x0d, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x22, 0x67, 0x0a, 0x11,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x73,
	0x74, 0x12, 0x45, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x47, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x73, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x50, 0x0a, 0x10, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75,
	0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x53, 0x0a, 0x13, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x43, 0x6f, 0x73, 0x74, 0x42, 0x72, 0x65, 0x61,
	0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x46, 0x0a, 0x0d,
	0x43, 0x6f, 0x73, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x73,
	0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x73, 0x74, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x65, 0x64, 0x42, 0x6a, 0x0a, 0x1e, 0x61, 0x69, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75,
	0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0f, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x67, 0x6f, 0x73,
	0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_nebius_billing_v1alpha1_calculator_proto_rawDescOnce sync.Once
	file_nebius_billing_v1alpha1_calculator_proto_rawDescData []byte
)

func file_nebius_billing_v1alpha1_calculator_proto_rawDescGZIP() []byte {
	file_nebius_billing_v1alpha1_calculator_proto_rawDescOnce.Do(func() {
		file_nebius_billing_v1alpha1_calculator_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nebius_billing_v1alpha1_calculator_proto_rawDesc), len(file_nebius_billing_v1alpha1_calculator_proto_rawDesc)))
	})
	return file_nebius_billing_v1alpha1_calculator_proto_rawDescData
}

var file_nebius_billing_v1alpha1_calculator_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_nebius_billing_v1alpha1_calculator_proto_goTypes = []any{
	(*ResourceSpec)(nil),               // 0: nebius.billing.v1alpha1.ResourceSpec
	(*ResourceGroupCost)(nil),          // 1: nebius.billing.v1alpha1.ResourceGroupCost
	(*GeneralTotalCost)(nil),           // 2: nebius.billing.v1alpha1.GeneralTotalCost
	(*GeneralResourceCost)(nil),        // 3: nebius.billing.v1alpha1.GeneralResourceCost
	(*CostBreakdown)(nil),              // 4: nebius.billing.v1alpha1.CostBreakdown
	(*v1.CreateInstanceRequest)(nil),   // 5: nebius.compute.v1.CreateInstanceRequest
	(*v1.UpdateInstanceRequest)(nil),   // 6: nebius.compute.v1.UpdateInstanceRequest
	(*v1.CreateDiskRequest)(nil),       // 7: nebius.compute.v1.CreateDiskRequest
	(*v1.UpdateDiskRequest)(nil),       // 8: nebius.compute.v1.UpdateDiskRequest
	(*v1.CreateFilesystemRequest)(nil), // 9: nebius.compute.v1.CreateFilesystemRequest
	(*v1.UpdateFilesystemRequest)(nil), // 10: nebius.compute.v1.UpdateFilesystemRequest
}
var file_nebius_billing_v1alpha1_calculator_proto_depIdxs = []int32{
	5,  // 0: nebius.billing.v1alpha1.ResourceSpec.compute_instance_spec:type_name -> nebius.compute.v1.CreateInstanceRequest
	6,  // 1: nebius.billing.v1alpha1.ResourceSpec.compute_instance_update_spec:type_name -> nebius.compute.v1.UpdateInstanceRequest
	7,  // 2: nebius.billing.v1alpha1.ResourceSpec.compute_disk_spec:type_name -> nebius.compute.v1.CreateDiskRequest
	8,  // 3: nebius.billing.v1alpha1.ResourceSpec.compute_disk_update_spec:type_name -> nebius.compute.v1.UpdateDiskRequest
	9,  // 4: nebius.billing.v1alpha1.ResourceSpec.compute_filesystem_spec:type_name -> nebius.compute.v1.CreateFilesystemRequest
	10, // 5: nebius.billing.v1alpha1.ResourceSpec.compute_filesystem_update_spec:type_name -> nebius.compute.v1.UpdateFilesystemRequest
	2,  // 6: nebius.billing.v1alpha1.ResourceGroupCost.general:type_name -> nebius.billing.v1alpha1.GeneralTotalCost
	4,  // 7: nebius.billing.v1alpha1.GeneralTotalCost.total:type_name -> nebius.billing.v1alpha1.CostBreakdown
	4,  // 8: nebius.billing.v1alpha1.GeneralResourceCost.total:type_name -> nebius.billing.v1alpha1.CostBreakdown
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_nebius_billing_v1alpha1_calculator_proto_init() }
func file_nebius_billing_v1alpha1_calculator_proto_init() {
	if File_nebius_billing_v1alpha1_calculator_proto != nil {
		return
	}
	file_nebius_billing_v1alpha1_calculator_proto_msgTypes[0].OneofWrappers = []any{
		(*ResourceSpec_ComputeInstanceSpec)(nil),
		(*ResourceSpec_ComputeInstanceUpdateSpec)(nil),
		(*ResourceSpec_ComputeDiskSpec)(nil),
		(*ResourceSpec_ComputeDiskUpdateSpec)(nil),
		(*ResourceSpec_ComputeFilesystemSpec)(nil),
		(*ResourceSpec_ComputeFilesystemUpdateSpec)(nil),
	}
	file_nebius_billing_v1alpha1_calculator_proto_msgTypes[1].OneofWrappers = []any{
		(*ResourceGroupCost_General)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nebius_billing_v1alpha1_calculator_proto_rawDesc), len(file_nebius_billing_v1alpha1_calculator_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nebius_billing_v1alpha1_calculator_proto_goTypes,
		DependencyIndexes: file_nebius_billing_v1alpha1_calculator_proto_depIdxs,
		MessageInfos:      file_nebius_billing_v1alpha1_calculator_proto_msgTypes,
	}.Build()
	File_nebius_billing_v1alpha1_calculator_proto = out.File
	file_nebius_billing_v1alpha1_calculator_proto_goTypes = nil
	file_nebius_billing_v1alpha1_calculator_proto_depIdxs = nil
}
