// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.28.3
// source: nebius/billing/v1alpha1/calculator_service.proto

package v1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/nebius/gosdk/proto/nebius"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EstimateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Resource specification for cost estimation.
	// Must contain exactly one resource type.
	ResourceSpec  *ResourceSpec `protobuf:"bytes,1,opt,name=resource_spec,json=resourceSpec,proto3" json:"resource_spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EstimateRequest) Reset() {
	*x = EstimateRequest{}
	mi := &file_nebius_billing_v1alpha1_calculator_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EstimateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateRequest) ProtoMessage() {}

func (x *EstimateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_billing_v1alpha1_calculator_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateRequest.ProtoReflect.Descriptor instead.
func (*EstimateRequest) Descriptor() ([]byte, []int) {
	return file_nebius_billing_v1alpha1_calculator_service_proto_rawDescGZIP(), []int{0}
}

func (x *EstimateRequest) GetResourceSpec() *ResourceSpec {
	if x != nil {
		return x.ResourceSpec
	}
	return nil
}

type EstimateResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Estimated hourly cost for the resource.
	HourlyCost *ResourceGroupCost `protobuf:"bytes,10,opt,name=hourly_cost,json=hourlyCost,proto3" json:"hourly_cost,omitempty"`
	// Estimated monthly cost for the resource.
	// Calculated as hourly_cost * 24 * 30 (720 hours) for resources running continuously.
	MonthlyCost   *ResourceGroupCost `protobuf:"bytes,20,opt,name=monthly_cost,json=monthlyCost,proto3" json:"monthly_cost,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EstimateResponse) Reset() {
	*x = EstimateResponse{}
	mi := &file_nebius_billing_v1alpha1_calculator_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EstimateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateResponse) ProtoMessage() {}

func (x *EstimateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_billing_v1alpha1_calculator_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateResponse.ProtoReflect.Descriptor instead.
func (*EstimateResponse) Descriptor() ([]byte, []int) {
	return file_nebius_billing_v1alpha1_calculator_service_proto_rawDescGZIP(), []int{1}
}

func (x *EstimateResponse) GetHourlyCost() *ResourceGroupCost {
	if x != nil {
		return x.HourlyCost
	}
	return nil
}

func (x *EstimateResponse) GetMonthlyCost() *ResourceGroupCost {
	if x != nil {
		return x.MonthlyCost
	}
	return nil
}

type EstimateBatchRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of resource specifications for cost estimation.
	// Each resource will be priced individually and then aggregated into total costs.
	ResourceSpecs []*ResourceSpec `protobuf:"bytes,1,rep,name=resource_specs,json=resourceSpecs,proto3" json:"resource_specs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EstimateBatchRequest) Reset() {
	*x = EstimateBatchRequest{}
	mi := &file_nebius_billing_v1alpha1_calculator_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EstimateBatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateBatchRequest) ProtoMessage() {}

func (x *EstimateBatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_billing_v1alpha1_calculator_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateBatchRequest.ProtoReflect.Descriptor instead.
func (*EstimateBatchRequest) Descriptor() ([]byte, []int) {
	return file_nebius_billing_v1alpha1_calculator_service_proto_rawDescGZIP(), []int{2}
}

func (x *EstimateBatchRequest) GetResourceSpecs() []*ResourceSpec {
	if x != nil {
		return x.ResourceSpecs
	}
	return nil
}

type EstimateBatchResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Estimated hourly cost for all resources in the batch.
	HourlyCost *ResourceGroupCost `protobuf:"bytes,10,opt,name=hourly_cost,json=hourlyCost,proto3" json:"hourly_cost,omitempty"`
	// Estimated monthly cost for all resources in the batch.
	// Calculated as hourly_cost * 24 * 30 (720 hours) for resources running continuously.
	MonthlyCost   *ResourceGroupCost `protobuf:"bytes,20,opt,name=monthly_cost,json=monthlyCost,proto3" json:"monthly_cost,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EstimateBatchResponse) Reset() {
	*x = EstimateBatchResponse{}
	mi := &file_nebius_billing_v1alpha1_calculator_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EstimateBatchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EstimateBatchResponse) ProtoMessage() {}

func (x *EstimateBatchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_billing_v1alpha1_calculator_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EstimateBatchResponse.ProtoReflect.Descriptor instead.
func (*EstimateBatchResponse) Descriptor() ([]byte, []int) {
	return file_nebius_billing_v1alpha1_calculator_service_proto_rawDescGZIP(), []int{3}
}

func (x *EstimateBatchResponse) GetHourlyCost() *ResourceGroupCost {
	if x != nil {
		return x.HourlyCost
	}
	return nil
}

func (x *EstimateBatchResponse) GetMonthlyCost() *ResourceGroupCost {
	if x != nil {
		return x.MonthlyCost
	}
	return nil
}

var File_nebius_billing_v1alpha1_calculator_service_proto protoreflect.FileDescriptor

var file_nebius_billing_v1alpha1_calculator_service_proto_rawDesc = string([]byte{
	0x0a, 0x30, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
	0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x17, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66,
	0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73,
	0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x28, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x63, 0x61, 0x6c, 0x63,
	0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x65, 0x0a, 0x0f,
	0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x52, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e,
	0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x06, 0xba,
	0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x22, 0xae, 0x01, 0x0a, 0x10, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x68, 0x6f, 0x75, 0x72,
	0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x0a, 0x68, 0x6f, 0x75, 0x72, 0x6c,
	0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x65,
	0x62, 0x69, 0x75, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x0b, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79,
	0x43, 0x6f, 0x73, 0x74, 0x22, 0x6c, 0x0a, 0x14, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x54, 0x0a, 0x0e,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x06, 0xba, 0x48, 0x03,
	0xc8, 0x01, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x73, 0x22, 0xb3, 0x01, 0x0a, 0x15, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x42,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0b,
	0x68, 0x6f, 0x75, 0x72, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x0a, 0x68,
	0x6f, 0x75, 0x72, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x5f, 0x63, 0x6f, 0x73, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x6f, 0x73, 0x74, 0x52, 0x0b, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x6c, 0x79, 0x43, 0x6f, 0x73, 0x74, 0x32, 0x8a, 0x02, 0x0a, 0x11, 0x43, 0x61, 0x6c,
	0x63, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5f,
	0x0a, 0x08, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e, 0x6e, 0x65, 0x62,
	0x69, 0x75, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x62, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45,
	0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6e, 0x0a, 0x0d, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x2d, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2e, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x45, 0x73, 0x74, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a,
	0x24, 0xba, 0x4a, 0x21, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2d, 0x64, 0x61, 0x74, 0x61, 0x2d,
	0x70, 0x6c, 0x61, 0x6e, 0x65, 0x42, 0x71, 0x0a, 0x1e, 0x61, 0x69, 0x2e, 0x6e, 0x65, 0x62, 0x69,
	0x75, 0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x16, 0x43, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50,
	0x01, 0x5a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65,
	0x62, 0x69, 0x75, 0x73, 0x2f, 0x67, 0x6f, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_nebius_billing_v1alpha1_calculator_service_proto_rawDescOnce sync.Once
	file_nebius_billing_v1alpha1_calculator_service_proto_rawDescData []byte
)

func file_nebius_billing_v1alpha1_calculator_service_proto_rawDescGZIP() []byte {
	file_nebius_billing_v1alpha1_calculator_service_proto_rawDescOnce.Do(func() {
		file_nebius_billing_v1alpha1_calculator_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nebius_billing_v1alpha1_calculator_service_proto_rawDesc), len(file_nebius_billing_v1alpha1_calculator_service_proto_rawDesc)))
	})
	return file_nebius_billing_v1alpha1_calculator_service_proto_rawDescData
}

var file_nebius_billing_v1alpha1_calculator_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_nebius_billing_v1alpha1_calculator_service_proto_goTypes = []any{
	(*EstimateRequest)(nil),       // 0: nebius.billing.v1alpha1.EstimateRequest
	(*EstimateResponse)(nil),      // 1: nebius.billing.v1alpha1.EstimateResponse
	(*EstimateBatchRequest)(nil),  // 2: nebius.billing.v1alpha1.EstimateBatchRequest
	(*EstimateBatchResponse)(nil), // 3: nebius.billing.v1alpha1.EstimateBatchResponse
	(*ResourceSpec)(nil),          // 4: nebius.billing.v1alpha1.ResourceSpec
	(*ResourceGroupCost)(nil),     // 5: nebius.billing.v1alpha1.ResourceGroupCost
}
var file_nebius_billing_v1alpha1_calculator_service_proto_depIdxs = []int32{
	4, // 0: nebius.billing.v1alpha1.EstimateRequest.resource_spec:type_name -> nebius.billing.v1alpha1.ResourceSpec
	5, // 1: nebius.billing.v1alpha1.EstimateResponse.hourly_cost:type_name -> nebius.billing.v1alpha1.ResourceGroupCost
	5, // 2: nebius.billing.v1alpha1.EstimateResponse.monthly_cost:type_name -> nebius.billing.v1alpha1.ResourceGroupCost
	4, // 3: nebius.billing.v1alpha1.EstimateBatchRequest.resource_specs:type_name -> nebius.billing.v1alpha1.ResourceSpec
	5, // 4: nebius.billing.v1alpha1.EstimateBatchResponse.hourly_cost:type_name -> nebius.billing.v1alpha1.ResourceGroupCost
	5, // 5: nebius.billing.v1alpha1.EstimateBatchResponse.monthly_cost:type_name -> nebius.billing.v1alpha1.ResourceGroupCost
	0, // 6: nebius.billing.v1alpha1.CalculatorService.Estimate:input_type -> nebius.billing.v1alpha1.EstimateRequest
	2, // 7: nebius.billing.v1alpha1.CalculatorService.EstimateBatch:input_type -> nebius.billing.v1alpha1.EstimateBatchRequest
	1, // 8: nebius.billing.v1alpha1.CalculatorService.Estimate:output_type -> nebius.billing.v1alpha1.EstimateResponse
	3, // 9: nebius.billing.v1alpha1.CalculatorService.EstimateBatch:output_type -> nebius.billing.v1alpha1.EstimateBatchResponse
	8, // [8:10] is the sub-list for method output_type
	6, // [6:8] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_nebius_billing_v1alpha1_calculator_service_proto_init() }
func file_nebius_billing_v1alpha1_calculator_service_proto_init() {
	if File_nebius_billing_v1alpha1_calculator_service_proto != nil {
		return
	}
	file_nebius_billing_v1alpha1_calculator_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nebius_billing_v1alpha1_calculator_service_proto_rawDesc), len(file_nebius_billing_v1alpha1_calculator_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nebius_billing_v1alpha1_calculator_service_proto_goTypes,
		DependencyIndexes: file_nebius_billing_v1alpha1_calculator_service_proto_depIdxs,
		MessageInfos:      file_nebius_billing_v1alpha1_calculator_service_proto_msgTypes,
	}.Build()
	File_nebius_billing_v1alpha1_calculator_service_proto = out.File
	file_nebius_billing_v1alpha1_calculator_service_proto_goTypes = nil
	file_nebius_billing_v1alpha1_calculator_service_proto_depIdxs = nil
}
