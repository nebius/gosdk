// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.28.3
// source: nebius/vpc/v1/target_group.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/nebius/gosdk/proto/nebius"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TargetStatus_TargetState int32

const (
	TargetStatus_TARGET_STATE_UNSPECIFIED TargetStatus_TargetState = 0
	// The target exists and ready to receive traffic
	TargetStatus_READY TargetStatus_TargetState = 1
	// The target exists, but not ready to receive traffic (i.e. network interface is not allocated)
	TargetStatus_DISABLED TargetStatus_TargetState = 2
	// The target does not exist anymore (i.e. network interface was deleted)
	TargetStatus_DELETED TargetStatus_TargetState = 3
)

// Enum value maps for TargetStatus_TargetState.
var (
	TargetStatus_TargetState_name = map[int32]string{
		0: "TARGET_STATE_UNSPECIFIED",
		1: "READY",
		2: "DISABLED",
		3: "DELETED",
	}
	TargetStatus_TargetState_value = map[string]int32{
		"TARGET_STATE_UNSPECIFIED": 0,
		"READY":                    1,
		"DISABLED":                 2,
		"DELETED":                  3,
	}
)

func (x TargetStatus_TargetState) Enum() *TargetStatus_TargetState {
	p := new(TargetStatus_TargetState)
	*p = x
	return p
}

func (x TargetStatus_TargetState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TargetStatus_TargetState) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_vpc_v1_target_group_proto_enumTypes[0].Descriptor()
}

func (TargetStatus_TargetState) Type() protoreflect.EnumType {
	return &file_nebius_vpc_v1_target_group_proto_enumTypes[0]
}

func (x TargetStatus_TargetState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TargetStatus_TargetState.Descriptor instead.
func (TargetStatus_TargetState) EnumDescriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_target_group_proto_rawDescGZIP(), []int{5, 0}
}

// Target group represents the set of resources that receive traffic from a load balancer listener
type TargetGroup struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata for the TargetGroup resource.
	// `metadata.parent_id` represents IAM container
	Metadata *v1.ResourceMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Specification of the TargetGroup.
	Spec *TargetGroupSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status of the TargetGroup.
	Status        *TargetGroupStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TargetGroup) Reset() {
	*x = TargetGroup{}
	mi := &file_nebius_vpc_v1_target_group_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetGroup) ProtoMessage() {}

func (x *TargetGroup) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_target_group_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetGroup.ProtoReflect.Descriptor instead.
func (*TargetGroup) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_target_group_proto_rawDescGZIP(), []int{0}
}

func (x *TargetGroup) GetMetadata() *v1.ResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TargetGroup) GetSpec() *TargetGroupSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *TargetGroup) GetStatus() *TargetGroupStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type TargetGroupSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Targets of the TargetGroup
	Targets       []*Target `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TargetGroupSpec) Reset() {
	*x = TargetGroupSpec{}
	mi := &file_nebius_vpc_v1_target_group_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetGroupSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetGroupSpec) ProtoMessage() {}

func (x *TargetGroupSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_target_group_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetGroupSpec.ProtoReflect.Descriptor instead.
func (*TargetGroupSpec) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_target_group_proto_rawDescGZIP(), []int{1}
}

func (x *TargetGroupSpec) GetTargets() []*Target {
	if x != nil {
		return x.Targets
	}
	return nil
}

// Represents the target which can receive traffic from a load balancer listener
type Target struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Target:
	//
	//	*Target_ComputeInstance
	Target        isTarget_Target `protobuf_oneof:"target"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Target) Reset() {
	*x = Target{}
	mi := &file_nebius_vpc_v1_target_group_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Target) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Target) ProtoMessage() {}

func (x *Target) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_target_group_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Target.ProtoReflect.Descriptor instead.
func (*Target) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_target_group_proto_rawDescGZIP(), []int{2}
}

func (x *Target) GetTarget() isTarget_Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Target) GetComputeInstance() *ComputeInstance {
	if x != nil {
		if x, ok := x.Target.(*Target_ComputeInstance); ok {
			return x.ComputeInstance
		}
	}
	return nil
}

type isTarget_Target interface {
	isTarget_Target()
}

type Target_ComputeInstance struct {
	// Compute instance used as a target
	ComputeInstance *ComputeInstance `protobuf:"bytes,1,opt,name=compute_instance,json=computeInstance,proto3,oneof"`
}

func (*Target_ComputeInstance) isTarget_Target() {}

// Target representing compute instance
type ComputeInstance struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Compute instance id to send traffic to
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Name of the compute instance's NetworkInterface to send traffic to. If not specified the first one will be used.
	NetworkInterfaceName string `protobuf:"bytes,2,opt,name=network_interface_name,json=networkInterfaceName,proto3" json:"network_interface_name,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ComputeInstance) Reset() {
	*x = ComputeInstance{}
	mi := &file_nebius_vpc_v1_target_group_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ComputeInstance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComputeInstance) ProtoMessage() {}

func (x *ComputeInstance) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_target_group_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComputeInstance.ProtoReflect.Descriptor instead.
func (*ComputeInstance) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_target_group_proto_rawDescGZIP(), []int{3}
}

func (x *ComputeInstance) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ComputeInstance) GetNetworkInterfaceName() string {
	if x != nil {
		return x.NetworkInterfaceName
	}
	return ""
}

type TargetGroupStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// LoadBalancer ids target group is attached to
	LoadBalancerIds []string `protobuf:"bytes,1,rep,name=load_balancer_ids,json=loadBalancerIds,proto3" json:"load_balancer_ids,omitempty"`
	// Statuses of specified targets
	TargetStatuses []*TargetStatus `protobuf:"bytes,2,rep,name=target_statuses,json=targetStatuses,proto3" json:"target_statuses,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TargetGroupStatus) Reset() {
	*x = TargetGroupStatus{}
	mi := &file_nebius_vpc_v1_target_group_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetGroupStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetGroupStatus) ProtoMessage() {}

func (x *TargetGroupStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_target_group_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetGroupStatus.ProtoReflect.Descriptor instead.
func (*TargetGroupStatus) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_target_group_proto_rawDescGZIP(), []int{4}
}

func (x *TargetGroupStatus) GetLoadBalancerIds() []string {
	if x != nil {
		return x.LoadBalancerIds
	}
	return nil
}

func (x *TargetGroupStatus) GetTargetStatuses() []*TargetStatus {
	if x != nil {
		return x.TargetStatuses
	}
	return nil
}

type TargetStatus struct {
	state             protoimpl.MessageState   `protogen:"open.v1"`
	ComputeInstanceId string                   `protobuf:"bytes,1,opt,name=compute_instance_id,json=computeInstanceId,proto3" json:"compute_instance_id,omitempty"`
	TargetState       TargetStatus_TargetState `protobuf:"varint,2,opt,name=target_state,json=targetState,proto3,enum=nebius.vpc.v1.TargetStatus_TargetState" json:"target_state,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TargetStatus) Reset() {
	*x = TargetStatus{}
	mi := &file_nebius_vpc_v1_target_group_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TargetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetStatus) ProtoMessage() {}

func (x *TargetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_target_group_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetStatus.ProtoReflect.Descriptor instead.
func (*TargetStatus) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_target_group_proto_rawDescGZIP(), []int{5}
}

func (x *TargetStatus) GetComputeInstanceId() string {
	if x != nil {
		return x.ComputeInstanceId
	}
	return ""
}

func (x *TargetStatus) GetTargetState() TargetStatus_TargetState {
	if x != nil {
		return x.TargetState
	}
	return TargetStatus_TARGET_STATE_UNSPECIFIED
}

var File_nebius_vpc_v1_target_group_proto protoreflect.FileDescriptor

var file_nebius_vpc_v1_target_group_proto_rawDesc = string([]byte{
	0x0a, 0x20, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x76, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0d, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76,
	0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x18, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x01, 0x0a, 0x0b, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65,
	0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73,
	0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x38, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x42, 0x0a, 0x0f, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2f, 0x0a, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6e, 0x65,
	0x62, 0x69, 0x75, 0x73, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x22, 0x66, 0x0a, 0x06, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x4b, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x42, 0x0f, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x05, 0xba, 0x48,
	0x02, 0x08, 0x01, 0x22, 0x65, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3a,
	0x0a, 0x16, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04,
	0xba, 0x4a, 0x01, 0x07, 0x52, 0x14, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x11, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x6c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x44, 0x0a, 0x0f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x76,
	0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x65, 0x73, 0x22, 0xdd, 0x01, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x6e, 0x65, 0x62, 0x69,
	0x75, 0x73, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22,
	0x51, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c,
	0x0a, 0x18, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42,
	0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44,
	0x10, 0x03, 0x42, 0x57, 0x0a, 0x14, 0x61, 0x69, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e,
	0x70, 0x75, 0x62, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65, 0x62, 0x69, 0x75,
	0x73, 0x2f, 0x67, 0x6f, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x65,
	0x62, 0x69, 0x75, 0x73, 0x2f, 0x76, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_nebius_vpc_v1_target_group_proto_rawDescOnce sync.Once
	file_nebius_vpc_v1_target_group_proto_rawDescData []byte
)

func file_nebius_vpc_v1_target_group_proto_rawDescGZIP() []byte {
	file_nebius_vpc_v1_target_group_proto_rawDescOnce.Do(func() {
		file_nebius_vpc_v1_target_group_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nebius_vpc_v1_target_group_proto_rawDesc), len(file_nebius_vpc_v1_target_group_proto_rawDesc)))
	})
	return file_nebius_vpc_v1_target_group_proto_rawDescData
}

var file_nebius_vpc_v1_target_group_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_nebius_vpc_v1_target_group_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_nebius_vpc_v1_target_group_proto_goTypes = []any{
	(TargetStatus_TargetState)(0), // 0: nebius.vpc.v1.TargetStatus.TargetState
	(*TargetGroup)(nil),           // 1: nebius.vpc.v1.TargetGroup
	(*TargetGroupSpec)(nil),       // 2: nebius.vpc.v1.TargetGroupSpec
	(*Target)(nil),                // 3: nebius.vpc.v1.Target
	(*ComputeInstance)(nil),       // 4: nebius.vpc.v1.ComputeInstance
	(*TargetGroupStatus)(nil),     // 5: nebius.vpc.v1.TargetGroupStatus
	(*TargetStatus)(nil),          // 6: nebius.vpc.v1.TargetStatus
	(*v1.ResourceMetadata)(nil),   // 7: nebius.common.v1.ResourceMetadata
}
var file_nebius_vpc_v1_target_group_proto_depIdxs = []int32{
	7, // 0: nebius.vpc.v1.TargetGroup.metadata:type_name -> nebius.common.v1.ResourceMetadata
	2, // 1: nebius.vpc.v1.TargetGroup.spec:type_name -> nebius.vpc.v1.TargetGroupSpec
	5, // 2: nebius.vpc.v1.TargetGroup.status:type_name -> nebius.vpc.v1.TargetGroupStatus
	3, // 3: nebius.vpc.v1.TargetGroupSpec.targets:type_name -> nebius.vpc.v1.Target
	4, // 4: nebius.vpc.v1.Target.compute_instance:type_name -> nebius.vpc.v1.ComputeInstance
	6, // 5: nebius.vpc.v1.TargetGroupStatus.target_statuses:type_name -> nebius.vpc.v1.TargetStatus
	0, // 6: nebius.vpc.v1.TargetStatus.target_state:type_name -> nebius.vpc.v1.TargetStatus.TargetState
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_nebius_vpc_v1_target_group_proto_init() }
func file_nebius_vpc_v1_target_group_proto_init() {
	if File_nebius_vpc_v1_target_group_proto != nil {
		return
	}
	file_nebius_vpc_v1_target_group_proto_msgTypes[2].OneofWrappers = []any{
		(*Target_ComputeInstance)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nebius_vpc_v1_target_group_proto_rawDesc), len(file_nebius_vpc_v1_target_group_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nebius_vpc_v1_target_group_proto_goTypes,
		DependencyIndexes: file_nebius_vpc_v1_target_group_proto_depIdxs,
		EnumInfos:         file_nebius_vpc_v1_target_group_proto_enumTypes,
		MessageInfos:      file_nebius_vpc_v1_target_group_proto_msgTypes,
	}.Build()
	File_nebius_vpc_v1_target_group_proto = out.File
	file_nebius_vpc_v1_target_group_proto_goTypes = nil
	file_nebius_vpc_v1_target_group_proto_depIdxs = nil
}
