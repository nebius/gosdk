// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.3
// source: nebius/vpc/v1/subnet.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/nebius/gosdk/proto/nebius"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumeration of possible states of the subnet.
type SubnetStatus_State int32

const (
	SubnetStatus_STATE_UNSPECIFIED SubnetStatus_State = 0 // Default state, unspecified.
	SubnetStatus_CREATING          SubnetStatus_State = 1 // Subnet is being created.
	SubnetStatus_READY             SubnetStatus_State = 2 // Subnet is ready for use.
	SubnetStatus_DELETING          SubnetStatus_State = 3 // Subnet is being deleted.
)

// Enum value maps for SubnetStatus_State.
var (
	SubnetStatus_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATING",
		2: "READY",
		3: "DELETING",
	}
	SubnetStatus_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"CREATING":          1,
		"READY":             2,
		"DELETING":          3,
	}
)

func (x SubnetStatus_State) Enum() *SubnetStatus_State {
	p := new(SubnetStatus_State)
	*p = x
	return p
}

func (x SubnetStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubnetStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_vpc_v1_subnet_proto_enumTypes[0].Descriptor()
}

func (SubnetStatus_State) Type() protoreflect.EnumType {
	return &file_nebius_vpc_v1_subnet_proto_enumTypes[0]
}

func (x SubnetStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubnetStatus_State.Descriptor instead.
func (SubnetStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_subnet_proto_rawDescGZIP(), []int{6, 0}
}

// Defines a Subnet, a segment of a network used for more granular control and management.
// Subnet uses pools to organize address space.
type Subnet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata for the subnet resource.
	// `metadata.parent_id` represents IAM container
	Metadata *v1.ResourceMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Specification of the subnet.
	Spec *SubnetSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status of the subnet.
	Status        *SubnetStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	mi := &file_nebius_vpc_v1_subnet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_subnet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_subnet_proto_rawDescGZIP(), []int{0}
}

func (x *Subnet) GetMetadata() *v1.ResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Subnet) GetSpec() *SubnetSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Subnet) GetStatus() *SubnetStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type SubnetSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the network this subnet belongs to.
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Private IPv4 address pools for this subnet.
	// If unspecified, pools from the associated network are used.
	Ipv4PrivatePools *IPv4PrivateSubnetPools `protobuf:"bytes,2,opt,name=ipv4_private_pools,json=ipv4PrivatePools,proto3" json:"ipv4_private_pools,omitempty"`
	// Public IPv4 address pools for this subnet.
	// If unspecified, pools from the associated network are used.
	Ipv4PublicPools *IPv4PublicSubnetPools `protobuf:"bytes,3,opt,name=ipv4_public_pools,json=ipv4PublicPools,proto3" json:"ipv4_public_pools,omitempty"`
	// ID of the route table to associate with the subnet.
	// If unspecified, the network's default route table is used.
	RouteTableId  string `protobuf:"bytes,5,opt,name=route_table_id,json=routeTableId,proto3" json:"route_table_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubnetSpec) Reset() {
	*x = SubnetSpec{}
	mi := &file_nebius_vpc_v1_subnet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubnetSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetSpec) ProtoMessage() {}

func (x *SubnetSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_subnet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetSpec.ProtoReflect.Descriptor instead.
func (*SubnetSpec) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_subnet_proto_rawDescGZIP(), []int{1}
}

func (x *SubnetSpec) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *SubnetSpec) GetIpv4PrivatePools() *IPv4PrivateSubnetPools {
	if x != nil {
		return x.Ipv4PrivatePools
	}
	return nil
}

func (x *SubnetSpec) GetIpv4PublicPools() *IPv4PublicSubnetPools {
	if x != nil {
		return x.Ipv4PublicPools
	}
	return nil
}

func (x *SubnetSpec) GetRouteTableId() string {
	if x != nil {
		return x.RouteTableId
	}
	return ""
}

type IPv4PrivateSubnetPools struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of private IPv4 CIDR blocks for this subnet.
	// Must not overlap with other resources in the network
	// Must be empty if `use_network_pools` is true.
	Pools []*SubnetPool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
	// If true, inherit private IPv4 pools from the network. Defaults to true.
	// Must be false if `pools` is specified.
	UseNetworkPools bool `protobuf:"varint,2,opt,name=use_network_pools,json=useNetworkPools,proto3" json:"use_network_pools,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *IPv4PrivateSubnetPools) Reset() {
	*x = IPv4PrivateSubnetPools{}
	mi := &file_nebius_vpc_v1_subnet_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPv4PrivateSubnetPools) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv4PrivateSubnetPools) ProtoMessage() {}

func (x *IPv4PrivateSubnetPools) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_subnet_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv4PrivateSubnetPools.ProtoReflect.Descriptor instead.
func (*IPv4PrivateSubnetPools) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_subnet_proto_rawDescGZIP(), []int{2}
}

func (x *IPv4PrivateSubnetPools) GetPools() []*SubnetPool {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *IPv4PrivateSubnetPools) GetUseNetworkPools() bool {
	if x != nil {
		return x.UseNetworkPools
	}
	return false
}

type IPv4PublicSubnetPools struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of public IPv4 CIDR blocks for this subnet.
	// Must not overlap with other resources in the network.
	// Must be empty if `use_network_pools` is true.
	Pools []*SubnetPool `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
	// If true, inherit public IPv4 pools from the network.
	// Must be false if `pools` is specified.
	UseNetworkPools bool `protobuf:"varint,2,opt,name=use_network_pools,json=useNetworkPools,proto3" json:"use_network_pools,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *IPv4PublicSubnetPools) Reset() {
	*x = IPv4PublicSubnetPools{}
	mi := &file_nebius_vpc_v1_subnet_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IPv4PublicSubnetPools) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IPv4PublicSubnetPools) ProtoMessage() {}

func (x *IPv4PublicSubnetPools) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_subnet_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IPv4PublicSubnetPools.ProtoReflect.Descriptor instead.
func (*IPv4PublicSubnetPools) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_subnet_proto_rawDescGZIP(), []int{3}
}

func (x *IPv4PublicSubnetPools) GetPools() []*SubnetPool {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *IPv4PublicSubnetPools) GetUseNetworkPools() bool {
	if x != nil {
		return x.UseNetworkPools
	}
	return false
}

type SubnetPool struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cidrs         []*SubnetCidr          `protobuf:"bytes,2,rep,name=cidrs,proto3" json:"cidrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubnetPool) Reset() {
	*x = SubnetPool{}
	mi := &file_nebius_vpc_v1_subnet_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubnetPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetPool) ProtoMessage() {}

func (x *SubnetPool) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_subnet_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetPool.ProtoReflect.Descriptor instead.
func (*SubnetPool) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_subnet_proto_rawDescGZIP(), []int{4}
}

func (x *SubnetPool) GetCidrs() []*SubnetCidr {
	if x != nil {
		return x.Cidrs
	}
	return nil
}

type SubnetCidr struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A CIDR block (e.g., "10.1.2.0/24") or a prefix length (e.g., "/24").
	// If prefix length is specified, the CIDR block will be auto-allocated
	// from the network's available space.
	Cidr string `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	// Controls provisioning of IP addresses from the CIDR block . Defaults to AVAILABLE.
	State AddressBlockState `protobuf:"varint,2,opt,name=state,proto3,enum=nebius.vpc.v1.AddressBlockState" json:"state,omitempty"`
	// Maximum mask length for an allocation from this block. Defaults to /32 for IPv4.
	MaxMaskLength int64 `protobuf:"varint,3,opt,name=max_mask_length,json=maxMaskLength,proto3" json:"max_mask_length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubnetCidr) Reset() {
	*x = SubnetCidr{}
	mi := &file_nebius_vpc_v1_subnet_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubnetCidr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetCidr) ProtoMessage() {}

func (x *SubnetCidr) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_subnet_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetCidr.ProtoReflect.Descriptor instead.
func (*SubnetCidr) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_subnet_proto_rawDescGZIP(), []int{5}
}

func (x *SubnetCidr) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *SubnetCidr) GetState() AddressBlockState {
	if x != nil {
		return x.State
	}
	return AddressBlockState_STATE_UNSPECIFIED
}

func (x *SubnetCidr) GetMaxMaskLength() int64 {
	if x != nil {
		return x.MaxMaskLength
	}
	return 0
}

type SubnetStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current state of the subnet.
	State SubnetStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=nebius.vpc.v1.SubnetStatus_State" json:"state,omitempty"`
	// CIDR blocks.
	Ipv4PrivateCidrs []string `protobuf:"bytes,2,rep,name=ipv4_private_cidrs,json=ipv4PrivateCidrs,proto3" json:"ipv4_private_cidrs,omitempty"`
	// CIDR blocks.
	Ipv4PublicCidrs []string `protobuf:"bytes,3,rep,name=ipv4_public_cidrs,json=ipv4PublicCidrs,proto3" json:"ipv4_public_cidrs,omitempty"`
	// Information about the route table associated with this subnet.
	// Can be either a custom route table or the network's default route table.
	RouteTable    *SubnetAssociatedRouteTable `protobuf:"bytes,5,opt,name=route_table,json=routeTable,proto3" json:"route_table,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubnetStatus) Reset() {
	*x = SubnetStatus{}
	mi := &file_nebius_vpc_v1_subnet_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubnetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetStatus) ProtoMessage() {}

func (x *SubnetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_subnet_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetStatus.ProtoReflect.Descriptor instead.
func (*SubnetStatus) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_subnet_proto_rawDescGZIP(), []int{6}
}

func (x *SubnetStatus) GetState() SubnetStatus_State {
	if x != nil {
		return x.State
	}
	return SubnetStatus_STATE_UNSPECIFIED
}

func (x *SubnetStatus) GetIpv4PrivateCidrs() []string {
	if x != nil {
		return x.Ipv4PrivateCidrs
	}
	return nil
}

func (x *SubnetStatus) GetIpv4PublicCidrs() []string {
	if x != nil {
		return x.Ipv4PublicCidrs
	}
	return nil
}

func (x *SubnetStatus) GetRouteTable() *SubnetAssociatedRouteTable {
	if x != nil {
		return x.RouteTable
	}
	return nil
}

type SubnetAssociatedRouteTable struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the route table.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Indicates whether this is the network's default route table.
	// If true, this is the default route table inherited from the network.
	// If false, this is a custom route table explicitly associated with the subnet via spec.
	Default       bool `protobuf:"varint,2,opt,name=default,proto3" json:"default,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubnetAssociatedRouteTable) Reset() {
	*x = SubnetAssociatedRouteTable{}
	mi := &file_nebius_vpc_v1_subnet_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubnetAssociatedRouteTable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetAssociatedRouteTable) ProtoMessage() {}

func (x *SubnetAssociatedRouteTable) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_subnet_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetAssociatedRouteTable.ProtoReflect.Descriptor instead.
func (*SubnetAssociatedRouteTable) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_subnet_proto_rawDescGZIP(), []int{7}
}

func (x *SubnetAssociatedRouteTable) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *SubnetAssociatedRouteTable) GetDefault() bool {
	if x != nil {
		return x.Default
	}
	return false
}

var File_nebius_vpc_v1_subnet_proto protoreflect.FileDescriptor

const file_nebius_vpc_v1_subnet_proto_rawDesc = "" +
	"\n" +
	"\x1anebius/vpc/v1/subnet.proto\x12\rnebius.vpc.v1\x1a\x1bbuf/validate/validate.proto\x1a\x1fnebius/common/v1/metadata.proto\x1a\x18nebius/vpc/v1/pool.proto\x1a\x18nebius/annotations.proto\"\xac\x01\n" +
	"\x06Subnet\x12>\n" +
	"\bmetadata\x18\x01 \x01(\v2\".nebius.common.v1.ResourceMetadataR\bmetadata\x12-\n" +
	"\x04spec\x18\x02 \x01(\v2\x19.nebius.vpc.v1.SubnetSpecR\x04spec\x123\n" +
	"\x06status\x18\x03 \x01(\v2\x1b.nebius.vpc.v1.SubnetStatusR\x06status\"\x8c\x02\n" +
	"\n" +
	"SubnetSpec\x12%\n" +
	"\n" +
	"network_id\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\tnetworkId\x12Y\n" +
	"\x12ipv4_private_pools\x18\x02 \x01(\v2%.nebius.vpc.v1.IPv4PrivateSubnetPoolsB\x04\xbaJ\x01\aR\x10ipv4PrivatePools\x12V\n" +
	"\x11ipv4_public_pools\x18\x03 \x01(\v2$.nebius.vpc.v1.IPv4PublicSubnetPoolsB\x04\xbaJ\x01\aR\x0fipv4PublicPools\x12$\n" +
	"\x0eroute_table_id\x18\x05 \x01(\tR\frouteTableId\"u\n" +
	"\x16IPv4PrivateSubnetPools\x12/\n" +
	"\x05pools\x18\x01 \x03(\v2\x19.nebius.vpc.v1.SubnetPoolR\x05pools\x12*\n" +
	"\x11use_network_pools\x18\x02 \x01(\bR\x0fuseNetworkPools\"t\n" +
	"\x15IPv4PublicSubnetPools\x12/\n" +
	"\x05pools\x18\x01 \x03(\v2\x19.nebius.vpc.v1.SubnetPoolR\x05pools\x12*\n" +
	"\x11use_network_pools\x18\x02 \x01(\bR\x0fuseNetworkPools\"=\n" +
	"\n" +
	"SubnetPool\x12/\n" +
	"\x05cidrs\x18\x02 \x03(\v2\x19.nebius.vpc.v1.SubnetCidrR\x05cidrs\"\xa2\x03\n" +
	"\n" +
	"SubnetCidr\x12\x9d\x02\n" +
	"\x04cidr\x18\x01 \x01(\tB\x88\x02\xbaH\x84\x02\xba\x01\xac\x01\n" +
	"\x11string.valid_cidr\x12.value must be a valid IP address, CIDR or mask\x1agthis == '' || this.matches('^/([0-9]|[1-9][0-9]|1[0-2][0-8])$') || this.isIp() || this.isIpPrefix(true)\xba\x01N\n" +
	"\x0fstring.ip_empty\x12/value is empty, which is not a valid IP address\x1a\n" +
	"this != ''\xc8\x01\x01R\x04cidr\x12<\n" +
	"\x05state\x18\x02 \x01(\x0e2 .nebius.vpc.v1.AddressBlockStateB\x04\xbaJ\x01\aR\x05state\x126\n" +
	"\x0fmax_mask_length\x18\x03 \x01(\x03B\x0e\xbaH\a\"\x05\x18\x80\x01(\x00\xbaJ\x01\aR\rmaxMaskLength\"\xb4\x02\n" +
	"\fSubnetStatus\x127\n" +
	"\x05state\x18\x01 \x01(\x0e2!.nebius.vpc.v1.SubnetStatus.StateR\x05state\x12,\n" +
	"\x12ipv4_private_cidrs\x18\x02 \x03(\tR\x10ipv4PrivateCidrs\x12*\n" +
	"\x11ipv4_public_cidrs\x18\x03 \x03(\tR\x0fipv4PublicCidrs\x12J\n" +
	"\vroute_table\x18\x05 \x01(\v2).nebius.vpc.v1.SubnetAssociatedRouteTableR\n" +
	"routeTable\"E\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bCREATING\x10\x01\x12\t\n" +
	"\x05READY\x10\x02\x12\f\n" +
	"\bDELETING\x10\x03\"F\n" +
	"\x1aSubnetAssociatedRouteTable\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\adefault\x18\x02 \x01(\bR\adefaultBR\n" +
	"\x14ai.nebius.pub.vpc.v1B\vSubnetProtoP\x01Z+github.com/nebius/gosdk/proto/nebius/vpc/v1b\x06proto3"

var (
	file_nebius_vpc_v1_subnet_proto_rawDescOnce sync.Once
	file_nebius_vpc_v1_subnet_proto_rawDescData []byte
)

func file_nebius_vpc_v1_subnet_proto_rawDescGZIP() []byte {
	file_nebius_vpc_v1_subnet_proto_rawDescOnce.Do(func() {
		file_nebius_vpc_v1_subnet_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nebius_vpc_v1_subnet_proto_rawDesc), len(file_nebius_vpc_v1_subnet_proto_rawDesc)))
	})
	return file_nebius_vpc_v1_subnet_proto_rawDescData
}

var file_nebius_vpc_v1_subnet_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_nebius_vpc_v1_subnet_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_nebius_vpc_v1_subnet_proto_goTypes = []any{
	(SubnetStatus_State)(0),            // 0: nebius.vpc.v1.SubnetStatus.State
	(*Subnet)(nil),                     // 1: nebius.vpc.v1.Subnet
	(*SubnetSpec)(nil),                 // 2: nebius.vpc.v1.SubnetSpec
	(*IPv4PrivateSubnetPools)(nil),     // 3: nebius.vpc.v1.IPv4PrivateSubnetPools
	(*IPv4PublicSubnetPools)(nil),      // 4: nebius.vpc.v1.IPv4PublicSubnetPools
	(*SubnetPool)(nil),                 // 5: nebius.vpc.v1.SubnetPool
	(*SubnetCidr)(nil),                 // 6: nebius.vpc.v1.SubnetCidr
	(*SubnetStatus)(nil),               // 7: nebius.vpc.v1.SubnetStatus
	(*SubnetAssociatedRouteTable)(nil), // 8: nebius.vpc.v1.SubnetAssociatedRouteTable
	(*v1.ResourceMetadata)(nil),        // 9: nebius.common.v1.ResourceMetadata
	(AddressBlockState)(0),             // 10: nebius.vpc.v1.AddressBlockState
}
var file_nebius_vpc_v1_subnet_proto_depIdxs = []int32{
	9,  // 0: nebius.vpc.v1.Subnet.metadata:type_name -> nebius.common.v1.ResourceMetadata
	2,  // 1: nebius.vpc.v1.Subnet.spec:type_name -> nebius.vpc.v1.SubnetSpec
	7,  // 2: nebius.vpc.v1.Subnet.status:type_name -> nebius.vpc.v1.SubnetStatus
	3,  // 3: nebius.vpc.v1.SubnetSpec.ipv4_private_pools:type_name -> nebius.vpc.v1.IPv4PrivateSubnetPools
	4,  // 4: nebius.vpc.v1.SubnetSpec.ipv4_public_pools:type_name -> nebius.vpc.v1.IPv4PublicSubnetPools
	5,  // 5: nebius.vpc.v1.IPv4PrivateSubnetPools.pools:type_name -> nebius.vpc.v1.SubnetPool
	5,  // 6: nebius.vpc.v1.IPv4PublicSubnetPools.pools:type_name -> nebius.vpc.v1.SubnetPool
	6,  // 7: nebius.vpc.v1.SubnetPool.cidrs:type_name -> nebius.vpc.v1.SubnetCidr
	10, // 8: nebius.vpc.v1.SubnetCidr.state:type_name -> nebius.vpc.v1.AddressBlockState
	0,  // 9: nebius.vpc.v1.SubnetStatus.state:type_name -> nebius.vpc.v1.SubnetStatus.State
	8,  // 10: nebius.vpc.v1.SubnetStatus.route_table:type_name -> nebius.vpc.v1.SubnetAssociatedRouteTable
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_nebius_vpc_v1_subnet_proto_init() }
func file_nebius_vpc_v1_subnet_proto_init() {
	if File_nebius_vpc_v1_subnet_proto != nil {
		return
	}
	file_nebius_vpc_v1_pool_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nebius_vpc_v1_subnet_proto_rawDesc), len(file_nebius_vpc_v1_subnet_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nebius_vpc_v1_subnet_proto_goTypes,
		DependencyIndexes: file_nebius_vpc_v1_subnet_proto_depIdxs,
		EnumInfos:         file_nebius_vpc_v1_subnet_proto_enumTypes,
		MessageInfos:      file_nebius_vpc_v1_subnet_proto_msgTypes,
	}.Build()
	File_nebius_vpc_v1_subnet_proto = out.File
	file_nebius_vpc_v1_subnet_proto_goTypes = nil
	file_nebius_vpc_v1_subnet_proto_depIdxs = nil
}
