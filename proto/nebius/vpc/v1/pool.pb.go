// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v4.25.1
// source: nebius/vpc/v1/pool.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/nebius/gosdk/proto/nebius"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AddressBlockState int32

const (
	AddressBlockState_STATE_UNSPECIFIED AddressBlockState = 0 // Default, unspecified state.
	AddressBlockState_AVAILABLE         AddressBlockState = 1 // Allocation from range is available.
	AddressBlockState_DISABLED          AddressBlockState = 2 // New allocation would not be created.
)

// Enum value maps for AddressBlockState.
var (
	AddressBlockState_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "AVAILABLE",
		2: "DISABLED",
	}
	AddressBlockState_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"AVAILABLE":         1,
		"DISABLED":          2,
	}
)

func (x AddressBlockState) Enum() *AddressBlockState {
	p := new(AddressBlockState)
	*p = x
	return p
}

func (x AddressBlockState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AddressBlockState) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_vpc_v1_pool_proto_enumTypes[0].Descriptor()
}

func (AddressBlockState) Type() protoreflect.EnumType {
	return &file_nebius_vpc_v1_pool_proto_enumTypes[0]
}

func (x AddressBlockState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AddressBlockState.Descriptor instead.
func (AddressBlockState) EnumDescriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_pool_proto_rawDescGZIP(), []int{0}
}

type IpVersion int32

const (
	IpVersion_IP_VERSION_UNSPECIFIED IpVersion = 0 // Default, unspecified IP version.
	IpVersion_IPV4                   IpVersion = 1 // IPv4 address.
	IpVersion_IPV6                   IpVersion = 2 // IPv6 address.
)

// Enum value maps for IpVersion.
var (
	IpVersion_name = map[int32]string{
		0: "IP_VERSION_UNSPECIFIED",
		1: "IPV4",
		2: "IPV6",
	}
	IpVersion_value = map[string]int32{
		"IP_VERSION_UNSPECIFIED": 0,
		"IPV4":                   1,
		"IPV6":                   2,
	}
)

func (x IpVersion) Enum() *IpVersion {
	p := new(IpVersion)
	*p = x
	return p
}

func (x IpVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_vpc_v1_pool_proto_enumTypes[1].Descriptor()
}

func (IpVersion) Type() protoreflect.EnumType {
	return &file_nebius_vpc_v1_pool_proto_enumTypes[1]
}

func (x IpVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpVersion.Descriptor instead.
func (IpVersion) EnumDescriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_pool_proto_rawDescGZIP(), []int{1}
}

type IpVisibility int32

const (
	IpVisibility_IP_VISIBILITY_UNSPECIFIED IpVisibility = 0 // Default, unspecified IP visibility.
	IpVisibility_PRIVATE                   IpVisibility = 1 // Private address.
	IpVisibility_PUBLIC                    IpVisibility = 2 // Public address.
)

// Enum value maps for IpVisibility.
var (
	IpVisibility_name = map[int32]string{
		0: "IP_VISIBILITY_UNSPECIFIED",
		1: "PRIVATE",
		2: "PUBLIC",
	}
	IpVisibility_value = map[string]int32{
		"IP_VISIBILITY_UNSPECIFIED": 0,
		"PRIVATE":                   1,
		"PUBLIC":                    2,
	}
)

func (x IpVisibility) Enum() *IpVisibility {
	p := new(IpVisibility)
	*p = x
	return p
}

func (x IpVisibility) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpVisibility) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_vpc_v1_pool_proto_enumTypes[2].Descriptor()
}

func (IpVisibility) Type() protoreflect.EnumType {
	return &file_nebius_vpc_v1_pool_proto_enumTypes[2]
}

func (x IpVisibility) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpVisibility.Descriptor instead.
func (IpVisibility) EnumDescriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_pool_proto_rawDescGZIP(), []int{2}
}

// Possible states of the Pool.
type PoolStatus_State int32

const (
	PoolStatus_STATE_UNSPECIFIED PoolStatus_State = 0 // Default, unspecified state.
	PoolStatus_CREATING          PoolStatus_State = 1 // Pool is being created.
	PoolStatus_READY             PoolStatus_State = 2 // Pool is ready for use.
	PoolStatus_DELETING          PoolStatus_State = 3 // Pool is being deleted.
)

// Enum value maps for PoolStatus_State.
var (
	PoolStatus_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATING",
		2: "READY",
		3: "DELETING",
	}
	PoolStatus_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"CREATING":          1,
		"READY":             2,
		"DELETING":          3,
	}
)

func (x PoolStatus_State) Enum() *PoolStatus_State {
	p := new(PoolStatus_State)
	*p = x
	return p
}

func (x PoolStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoolStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_vpc_v1_pool_proto_enumTypes[3].Descriptor()
}

func (PoolStatus_State) Type() protoreflect.EnumType {
	return &file_nebius_vpc_v1_pool_proto_enumTypes[3]
}

func (x PoolStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoolStatus_State.Descriptor instead.
func (PoolStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_pool_proto_rawDescGZIP(), []int{3, 0}
}

type Pool struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata associated with the Pool.
	// `metadata.parent_id` represents the Project.
	Metadata *v1.ResourceMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Specification of the Pool.
	Spec *PoolSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status information for the Pool.
	Status        *PoolStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pool) Reset() {
	*x = Pool{}
	mi := &file_nebius_vpc_v1_pool_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

func (x *Pool) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_pool_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_pool_proto_rawDescGZIP(), []int{0}
}

func (x *Pool) GetMetadata() *v1.ResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Pool) GetSpec() *PoolSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Pool) GetStatus() *PoolStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type PoolSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of source pool. Current pool will be created with the same scope.
	// Pool is a root-pool if this field is empty
	SourcePoolId string `protobuf:"bytes,1,opt,name=source_pool_id,json=sourcePoolId,proto3" json:"source_pool_id,omitempty"`
	// IP version for the Pool.
	Version    IpVersion    `protobuf:"varint,3,opt,name=version,proto3,enum=nebius.vpc.v1.IpVersion" json:"version,omitempty"`
	Visibility IpVisibility `protobuf:"varint,5,opt,name=visibility,proto3,enum=nebius.vpc.v1.IpVisibility" json:"visibility,omitempty"`
	// CIDR blocks.
	Cidrs         []*PoolCidr `protobuf:"bytes,4,rep,name=cidrs,proto3" json:"cidrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoolSpec) Reset() {
	*x = PoolSpec{}
	mi := &file_nebius_vpc_v1_pool_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolSpec) ProtoMessage() {}

func (x *PoolSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_pool_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolSpec.ProtoReflect.Descriptor instead.
func (*PoolSpec) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_pool_proto_rawDescGZIP(), []int{1}
}

func (x *PoolSpec) GetSourcePoolId() string {
	if x != nil {
		return x.SourcePoolId
	}
	return ""
}

func (x *PoolSpec) GetVersion() IpVersion {
	if x != nil {
		return x.Version
	}
	return IpVersion_IP_VERSION_UNSPECIFIED
}

func (x *PoolSpec) GetVisibility() IpVisibility {
	if x != nil {
		return x.Visibility
	}
	return IpVisibility_IP_VISIBILITY_UNSPECIFIED
}

func (x *PoolSpec) GetCidrs() []*PoolCidr {
	if x != nil {
		return x.Cidrs
	}
	return nil
}

type PoolCidr struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CIDR block.
	// May be a prefix length (such as /24) for non-top-level pools
	// or a CIDR-formatted string (such as 10.1.2.0/24).
	Cidr string `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	// State of the Cidr.
	// Default state is AVAILABLE
	State AddressBlockState `protobuf:"varint,2,opt,name=state,proto3,enum=nebius.vpc.v1.AddressBlockState" json:"state,omitempty"`
	// Maximum mask length for allocation from this cidr including creation of sub-pools
	// Default max_mask_length is 32 for IPv4 and 128 for IPv6
	MaxMaskLength int64 `protobuf:"varint,3,opt,name=max_mask_length,json=maxMaskLength,proto3" json:"max_mask_length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoolCidr) Reset() {
	*x = PoolCidr{}
	mi := &file_nebius_vpc_v1_pool_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolCidr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolCidr) ProtoMessage() {}

func (x *PoolCidr) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_pool_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolCidr.ProtoReflect.Descriptor instead.
func (*PoolCidr) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_pool_proto_rawDescGZIP(), []int{2}
}

func (x *PoolCidr) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *PoolCidr) GetState() AddressBlockState {
	if x != nil {
		return x.State
	}
	return AddressBlockState_STATE_UNSPECIFIED
}

func (x *PoolCidr) GetMaxMaskLength() int64 {
	if x != nil {
		return x.MaxMaskLength
	}
	return 0
}

type PoolStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current state of the Pool.
	State PoolStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=nebius.vpc.v1.PoolStatus_State" json:"state,omitempty"`
	// CIDR blocks.
	Cidrs []string `protobuf:"bytes,2,rep,name=cidrs,proto3" json:"cidrs,omitempty"`
	// Scope is the unique identifier for single pool tree.
	ScopeId string `protobuf:"bytes,3,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty"`
	// Assignment details for this Pool
	Assignment    *PoolAssignment `protobuf:"bytes,4,opt,name=assignment,proto3" json:"assignment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoolStatus) Reset() {
	*x = PoolStatus{}
	mi := &file_nebius_vpc_v1_pool_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolStatus) ProtoMessage() {}

func (x *PoolStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_pool_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolStatus.ProtoReflect.Descriptor instead.
func (*PoolStatus) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_pool_proto_rawDescGZIP(), []int{3}
}

func (x *PoolStatus) GetState() PoolStatus_State {
	if x != nil {
		return x.State
	}
	return PoolStatus_STATE_UNSPECIFIED
}

func (x *PoolStatus) GetCidrs() []string {
	if x != nil {
		return x.Cidrs
	}
	return nil
}

func (x *PoolStatus) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

func (x *PoolStatus) GetAssignment() *PoolAssignment {
	if x != nil {
		return x.Assignment
	}
	return nil
}

type PoolAssignment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// IDs of Networks to which the Pool is assigned.
	Networks []string `protobuf:"bytes,1,rep,name=networks,proto3" json:"networks,omitempty"`
	// IDs of Subnets to which the Pool is assigned.
	Subnets       []string `protobuf:"bytes,2,rep,name=subnets,proto3" json:"subnets,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoolAssignment) Reset() {
	*x = PoolAssignment{}
	mi := &file_nebius_vpc_v1_pool_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolAssignment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolAssignment) ProtoMessage() {}

func (x *PoolAssignment) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1_pool_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolAssignment.ProtoReflect.Descriptor instead.
func (*PoolAssignment) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1_pool_proto_rawDescGZIP(), []int{4}
}

func (x *PoolAssignment) GetNetworks() []string {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *PoolAssignment) GetSubnets() []string {
	if x != nil {
		return x.Subnets
	}
	return nil
}

var File_nebius_vpc_v1_pool_proto protoreflect.FileDescriptor

var file_nebius_vpc_v1_pool_proto_rawDesc = []byte{
	0x0a, 0x18, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x76, 0x70, 0x63, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x6f, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x6e, 0x65, 0x62, 0x69,
	0x75, 0x73, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa6, 0x01, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e,
	0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75,
	0x73, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x70, 0x65,
	0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73,
	0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x08, 0x50,
	0x6f, 0x6f, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x5f, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x04, 0xba, 0x4a, 0x01, 0x02, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6f,
	0x6c, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x76, 0x70,
	0x63, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0a,
	0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0xba, 0x4a, 0x01, 0x02, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73,
	0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x70, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x42, 0x0a, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0xba, 0x4a, 0x01, 0x02,
	0x52, 0x0a, 0x76, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x2d, 0x0a, 0x05,
	0x63, 0x69, 0x64, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6e, 0x65,
	0x62, 0x69, 0x75, 0x73, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c,
	0x43, 0x69, 0x64, 0x72, 0x52, 0x05, 0x63, 0x69, 0x64, 0x72, 0x73, 0x22, 0x91, 0x03, 0x0a, 0x08,
	0x50, 0x6f, 0x6f, 0x6c, 0x43, 0x69, 0x64, 0x72, 0x12, 0x8e, 0x02, 0x0a, 0x04, 0x63, 0x69, 0x64,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0xf9, 0x01, 0xba, 0x48, 0xf5, 0x01, 0xba, 0x01,
	0x9d, 0x01, 0x0a, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x5f, 0x63, 0x69, 0x64, 0x72, 0x12, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x6d, 0x75, 0x73,
	0x74, 0x20, 0x62, 0x65, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x49, 0x50, 0x20,
	0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x43, 0x49, 0x44, 0x52, 0x20, 0x6f, 0x72,
	0x20, 0x6d, 0x61, 0x73, 0x6b, 0x1a, 0x58, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3d, 0x3d, 0x20, 0x27,
	0x27, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x28, 0x27, 0x5e, 0x2f, 0x28, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x5b, 0x31, 0x2d, 0x39,
	0x5d, 0x5b, 0x30, 0x2d, 0x39, 0x5d, 0x7c, 0x31, 0x5b, 0x30, 0x2d, 0x32, 0x5d, 0x5b, 0x30, 0x2d,
	0x38, 0x5d, 0x29, 0x24, 0x27, 0x29, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x69,
	0x73, 0x49, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x28, 0x74, 0x72, 0x75, 0x65, 0x29, 0xba,
	0x01, 0x4e, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x2e, 0x69, 0x70, 0x5f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x2f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x20, 0x69, 0x73, 0x20, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2c, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f,
	0x74, 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x1a, 0x0a, 0x74, 0x68, 0x69, 0x73, 0x20, 0x21, 0x3d, 0x20, 0x27, 0x27,
	0xc8, 0x01, 0x01, 0x52, 0x04, 0x63, 0x69, 0x64, 0x72, 0x12, 0x3c, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75,
	0x73, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x04, 0xba, 0x4a, 0x01, 0x07,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x6d,
	0x61, 0x73, 0x6b, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x0e, 0xba, 0x48, 0x07, 0x22, 0x05, 0x18, 0x80, 0x01, 0x28, 0x00, 0xba, 0x4a, 0x01, 0x07,
	0x52, 0x0d, 0x6d, 0x61, 0x78, 0x4d, 0x61, 0x73, 0x6b, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22,
	0xfa, 0x01, 0x0a, 0x0a, 0x50, 0x6f, 0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x35,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e,
	0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f,
	0x6f, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x69, 0x64, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x63, 0x69, 0x64, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6e, 0x65, 0x62,
	0x69, 0x75, 0x73, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6f, 0x6c, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x45, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15,
	0x0a, 0x11, 0x53, 0x54, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x22, 0x46, 0x0a, 0x0e,
	0x50, 0x6f, 0x6f, 0x6c, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x08, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x62, 0x6e, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x62,
	0x6e, 0x65, 0x74, 0x73, 0x2a, 0x47, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00,
	0x12, 0x0d, 0x0a, 0x09, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x2a, 0x3b, 0x0a,
	0x09, 0x49, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x50,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x34, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x49, 0x50, 0x56, 0x36, 0x10, 0x02, 0x2a, 0x46, 0x0a, 0x0c, 0x49, 0x70,
	0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x50,
	0x5f, 0x56, 0x49, 0x53, 0x49, 0x42, 0x49, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x52, 0x49,
	0x56, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x55, 0x42, 0x4c, 0x49, 0x43,
	0x10, 0x02, 0x42, 0x50, 0x0a, 0x14, 0x61, 0x69, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e,
	0x70, 0x75, 0x62, 0x2e, 0x76, 0x70, 0x63, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x50, 0x6f, 0x6f, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x67, 0x6f, 0x73, 0x64, 0x6b,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x76, 0x70,
	0x63, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nebius_vpc_v1_pool_proto_rawDescOnce sync.Once
	file_nebius_vpc_v1_pool_proto_rawDescData = file_nebius_vpc_v1_pool_proto_rawDesc
)

func file_nebius_vpc_v1_pool_proto_rawDescGZIP() []byte {
	file_nebius_vpc_v1_pool_proto_rawDescOnce.Do(func() {
		file_nebius_vpc_v1_pool_proto_rawDescData = protoimpl.X.CompressGZIP(file_nebius_vpc_v1_pool_proto_rawDescData)
	})
	return file_nebius_vpc_v1_pool_proto_rawDescData
}

var file_nebius_vpc_v1_pool_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_nebius_vpc_v1_pool_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_nebius_vpc_v1_pool_proto_goTypes = []any{
	(AddressBlockState)(0),      // 0: nebius.vpc.v1.AddressBlockState
	(IpVersion)(0),              // 1: nebius.vpc.v1.IpVersion
	(IpVisibility)(0),           // 2: nebius.vpc.v1.IpVisibility
	(PoolStatus_State)(0),       // 3: nebius.vpc.v1.PoolStatus.State
	(*Pool)(nil),                // 4: nebius.vpc.v1.Pool
	(*PoolSpec)(nil),            // 5: nebius.vpc.v1.PoolSpec
	(*PoolCidr)(nil),            // 6: nebius.vpc.v1.PoolCidr
	(*PoolStatus)(nil),          // 7: nebius.vpc.v1.PoolStatus
	(*PoolAssignment)(nil),      // 8: nebius.vpc.v1.PoolAssignment
	(*v1.ResourceMetadata)(nil), // 9: nebius.common.v1.ResourceMetadata
}
var file_nebius_vpc_v1_pool_proto_depIdxs = []int32{
	9, // 0: nebius.vpc.v1.Pool.metadata:type_name -> nebius.common.v1.ResourceMetadata
	5, // 1: nebius.vpc.v1.Pool.spec:type_name -> nebius.vpc.v1.PoolSpec
	7, // 2: nebius.vpc.v1.Pool.status:type_name -> nebius.vpc.v1.PoolStatus
	1, // 3: nebius.vpc.v1.PoolSpec.version:type_name -> nebius.vpc.v1.IpVersion
	2, // 4: nebius.vpc.v1.PoolSpec.visibility:type_name -> nebius.vpc.v1.IpVisibility
	6, // 5: nebius.vpc.v1.PoolSpec.cidrs:type_name -> nebius.vpc.v1.PoolCidr
	0, // 6: nebius.vpc.v1.PoolCidr.state:type_name -> nebius.vpc.v1.AddressBlockState
	3, // 7: nebius.vpc.v1.PoolStatus.state:type_name -> nebius.vpc.v1.PoolStatus.State
	8, // 8: nebius.vpc.v1.PoolStatus.assignment:type_name -> nebius.vpc.v1.PoolAssignment
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_nebius_vpc_v1_pool_proto_init() }
func file_nebius_vpc_v1_pool_proto_init() {
	if File_nebius_vpc_v1_pool_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nebius_vpc_v1_pool_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nebius_vpc_v1_pool_proto_goTypes,
		DependencyIndexes: file_nebius_vpc_v1_pool_proto_depIdxs,
		EnumInfos:         file_nebius_vpc_v1_pool_proto_enumTypes,
		MessageInfos:      file_nebius_vpc_v1_pool_proto_msgTypes,
	}.Build()
	File_nebius_vpc_v1_pool_proto = out.File
	file_nebius_vpc_v1_pool_proto_rawDesc = nil
	file_nebius_vpc_v1_pool_proto_goTypes = nil
	file_nebius_vpc_v1_pool_proto_depIdxs = nil
}
