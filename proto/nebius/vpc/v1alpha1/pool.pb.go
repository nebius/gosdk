// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.3
// source: nebius/vpc/v1alpha1/pool.proto

package v1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/nebius/gosdk/proto/nebius"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PoolCidrState int32

const (
	PoolCidrState_STATE_UNSPECIFIED PoolCidrState = 0 // Default, unspecified state.
	PoolCidrState_AVAILABLE         PoolCidrState = 1 // Allocation from range is available.
	PoolCidrState_DISABLED          PoolCidrState = 2 // New allocation would not be created.
)

// Enum value maps for PoolCidrState.
var (
	PoolCidrState_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "AVAILABLE",
		2: "DISABLED",
	}
	PoolCidrState_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"AVAILABLE":         1,
		"DISABLED":          2,
	}
)

func (x PoolCidrState) Enum() *PoolCidrState {
	p := new(PoolCidrState)
	*p = x
	return p
}

func (x PoolCidrState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoolCidrState) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_vpc_v1alpha1_pool_proto_enumTypes[0].Descriptor()
}

func (PoolCidrState) Type() protoreflect.EnumType {
	return &file_nebius_vpc_v1alpha1_pool_proto_enumTypes[0]
}

func (x PoolCidrState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoolCidrState.Descriptor instead.
func (PoolCidrState) EnumDescriptor() ([]byte, []int) {
	return file_nebius_vpc_v1alpha1_pool_proto_rawDescGZIP(), []int{0}
}

type IpVersion int32

const (
	IpVersion_IP_VERSION_UNSPECIFIED IpVersion = 0 // Default, unspecified IP version.
	IpVersion_IPV4                   IpVersion = 1 // IPv4 address.
	IpVersion_IPV6                   IpVersion = 2 // IPv6 address.
)

// Enum value maps for IpVersion.
var (
	IpVersion_name = map[int32]string{
		0: "IP_VERSION_UNSPECIFIED",
		1: "IPV4",
		2: "IPV6",
	}
	IpVersion_value = map[string]int32{
		"IP_VERSION_UNSPECIFIED": 0,
		"IPV4":                   1,
		"IPV6":                   2,
	}
)

func (x IpVersion) Enum() *IpVersion {
	p := new(IpVersion)
	*p = x
	return p
}

func (x IpVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IpVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_vpc_v1alpha1_pool_proto_enumTypes[1].Descriptor()
}

func (IpVersion) Type() protoreflect.EnumType {
	return &file_nebius_vpc_v1alpha1_pool_proto_enumTypes[1]
}

func (x IpVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IpVersion.Descriptor instead.
func (IpVersion) EnumDescriptor() ([]byte, []int) {
	return file_nebius_vpc_v1alpha1_pool_proto_rawDescGZIP(), []int{1}
}

// Possible states of the Pool.
type PoolStatus_State int32

const (
	PoolStatus_STATE_UNSPECIFIED PoolStatus_State = 0 // Default, unspecified state.
	PoolStatus_CREATING          PoolStatus_State = 1 // Pool is being created.
	PoolStatus_READY             PoolStatus_State = 2 // Pool is ready for use.
	PoolStatus_DELETING          PoolStatus_State = 3 // Pool is being deleted.
)

// Enum value maps for PoolStatus_State.
var (
	PoolStatus_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATING",
		2: "READY",
		3: "DELETING",
	}
	PoolStatus_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"CREATING":          1,
		"READY":             2,
		"DELETING":          3,
	}
)

func (x PoolStatus_State) Enum() *PoolStatus_State {
	p := new(PoolStatus_State)
	*p = x
	return p
}

func (x PoolStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PoolStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_vpc_v1alpha1_pool_proto_enumTypes[2].Descriptor()
}

func (PoolStatus_State) Type() protoreflect.EnumType {
	return &file_nebius_vpc_v1alpha1_pool_proto_enumTypes[2]
}

func (x PoolStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PoolStatus_State.Descriptor instead.
func (PoolStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_nebius_vpc_v1alpha1_pool_proto_rawDescGZIP(), []int{3, 0}
}

type Pool struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata associated with the Pool.
	// `metadata.parent_id` represents the Project.
	Metadata *v1.ResourceMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Specification of the Pool.
	Spec *PoolSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status information for the Pool.
	Status        *PoolStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pool) Reset() {
	*x = Pool{}
	mi := &file_nebius_vpc_v1alpha1_pool_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pool) ProtoMessage() {}

func (x *Pool) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1alpha1_pool_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pool.ProtoReflect.Descriptor instead.
func (*Pool) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1alpha1_pool_proto_rawDescGZIP(), []int{0}
}

func (x *Pool) GetMetadata() *v1.ResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Pool) GetSpec() *PoolSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Pool) GetStatus() *PoolStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type PoolSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Source:
	//
	//	*PoolSpec_SourcePoolId
	//	*PoolSpec_SourceScopeId
	Source isPoolSpec_Source `protobuf_oneof:"source"`
	// IP version for the Pool.
	Version IpVersion `protobuf:"varint,3,opt,name=version,proto3,enum=nebius.vpc.v1alpha1.IpVersion" json:"version,omitempty"`
	// CIDR blocks.
	Cidrs         []*PoolCidr `protobuf:"bytes,4,rep,name=cidrs,proto3" json:"cidrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoolSpec) Reset() {
	*x = PoolSpec{}
	mi := &file_nebius_vpc_v1alpha1_pool_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolSpec) ProtoMessage() {}

func (x *PoolSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1alpha1_pool_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolSpec.ProtoReflect.Descriptor instead.
func (*PoolSpec) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1alpha1_pool_proto_rawDescGZIP(), []int{1}
}

func (x *PoolSpec) GetSource() isPoolSpec_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *PoolSpec) GetSourcePoolId() string {
	if x != nil {
		if x, ok := x.Source.(*PoolSpec_SourcePoolId); ok {
			return x.SourcePoolId
		}
	}
	return ""
}

func (x *PoolSpec) GetSourceScopeId() string {
	if x != nil {
		if x, ok := x.Source.(*PoolSpec_SourceScopeId); ok {
			return x.SourceScopeId
		}
	}
	return ""
}

func (x *PoolSpec) GetVersion() IpVersion {
	if x != nil {
		return x.Version
	}
	return IpVersion_IP_VERSION_UNSPECIFIED
}

func (x *PoolSpec) GetCidrs() []*PoolCidr {
	if x != nil {
		return x.Cidrs
	}
	return nil
}

type isPoolSpec_Source interface {
	isPoolSpec_Source()
}

type PoolSpec_SourcePoolId struct {
	// ID of source pool. Current pool will be created with the same scope.
	SourcePoolId string `protobuf:"bytes,1,opt,name=source_pool_id,json=sourcePoolId,proto3,oneof"`
}

type PoolSpec_SourceScopeId struct {
	// ID of the scope. Pool will be considered as top-level pool within scope.
	SourceScopeId string `protobuf:"bytes,2,opt,name=source_scope_id,json=sourceScopeId,proto3,oneof"`
}

func (*PoolSpec_SourcePoolId) isPoolSpec_Source() {}

func (*PoolSpec_SourceScopeId) isPoolSpec_Source() {}

type PoolCidr struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CIDR block.
	// May be a prefix length (such as /24) for non-top-level pools
	// or a CIDR-formatted string (such as 10.1.2.0/24).
	Cidr string `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	// State of the Cidr.
	State PoolCidrState `protobuf:"varint,2,opt,name=state,proto3,enum=nebius.vpc.v1alpha1.PoolCidrState" json:"state,omitempty"`
	// Maximum mask length for allocation from this IP pool including creation of sub-pools
	AllowedMask   int64 `protobuf:"varint,3,opt,name=allowed_mask,json=allowedMask,proto3" json:"allowed_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoolCidr) Reset() {
	*x = PoolCidr{}
	mi := &file_nebius_vpc_v1alpha1_pool_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolCidr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolCidr) ProtoMessage() {}

func (x *PoolCidr) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1alpha1_pool_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolCidr.ProtoReflect.Descriptor instead.
func (*PoolCidr) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1alpha1_pool_proto_rawDescGZIP(), []int{2}
}

func (x *PoolCidr) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *PoolCidr) GetState() PoolCidrState {
	if x != nil {
		return x.State
	}
	return PoolCidrState_STATE_UNSPECIFIED
}

func (x *PoolCidr) GetAllowedMask() int64 {
	if x != nil {
		return x.AllowedMask
	}
	return 0
}

type PoolStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current state of the Pool.
	State PoolStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=nebius.vpc.v1alpha1.PoolStatus_State" json:"state,omitempty"`
	// CIDR blocks.
	Cidrs []string `protobuf:"bytes,2,rep,name=cidrs,proto3" json:"cidrs,omitempty"`
	// ID of the scope
	ScopeId       string `protobuf:"bytes,3,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PoolStatus) Reset() {
	*x = PoolStatus{}
	mi := &file_nebius_vpc_v1alpha1_pool_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolStatus) ProtoMessage() {}

func (x *PoolStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1alpha1_pool_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolStatus.ProtoReflect.Descriptor instead.
func (*PoolStatus) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1alpha1_pool_proto_rawDescGZIP(), []int{3}
}

func (x *PoolStatus) GetState() PoolStatus_State {
	if x != nil {
		return x.State
	}
	return PoolStatus_STATE_UNSPECIFIED
}

func (x *PoolStatus) GetCidrs() []string {
	if x != nil {
		return x.Cidrs
	}
	return nil
}

func (x *PoolStatus) GetScopeId() string {
	if x != nil {
		return x.ScopeId
	}
	return ""
}

var File_nebius_vpc_v1alpha1_pool_proto protoreflect.FileDescriptor

const file_nebius_vpc_v1alpha1_pool_proto_rawDesc = "" +
	"\n" +
	"\x1enebius/vpc/v1alpha1/pool.proto\x12\x13nebius.vpc.v1alpha1\x1a\x1bbuf/validate/validate.proto\x1a\x1fnebius/common/v1/metadata.proto\x1a\x18nebius/annotations.proto\"\xb2\x01\n" +
	"\x04Pool\x12>\n" +
	"\bmetadata\x18\x01 \x01(\v2\".nebius.common.v1.ResourceMetadataR\bmetadata\x121\n" +
	"\x04spec\x18\x02 \x01(\v2\x1d.nebius.vpc.v1alpha1.PoolSpecR\x04spec\x127\n" +
	"\x06status\x18\x03 \x01(\v2\x1f.nebius.vpc.v1alpha1.PoolStatusR\x06status\"\xf4\x01\n" +
	"\bPoolSpec\x12,\n" +
	"\x0esource_pool_id\x18\x01 \x01(\tB\x04\xbaJ\x01\x02H\x00R\fsourcePoolId\x12.\n" +
	"\x0fsource_scope_id\x18\x02 \x01(\tB\x04\xbaJ\x01\x02H\x00R\rsourceScopeId\x12D\n" +
	"\aversion\x18\x03 \x01(\x0e2\x1e.nebius.vpc.v1alpha1.IpVersionB\n" +
	"\xbaH\x03\xc8\x01\x01\xbaJ\x01\x02R\aversion\x123\n" +
	"\x05cidrs\x18\x04 \x03(\v2\x1d.nebius.vpc.v1alpha1.PoolCidrR\x05cidrsB\x0f\n" +
	"\x06source\x12\x05\xbaH\x02\b\x01\"\x8f\x03\n" +
	"\bPoolCidr\x12\x8e\x02\n" +
	"\x04cidr\x18\x01 \x01(\tB\xf9\x01\xbaH\xf5\x01\xba\x01\x9d\x01\n" +
	"\x11string.valid_cidr\x12.value must be a valid IP address, CIDR or mask\x1aXthis == '' || this.matches('^/([0-9]|[1-9][0-9]|1[0-2][0-8])$') || this.isIpPrefix(true)\xba\x01N\n" +
	"\x0fstring.ip_empty\x12/value is empty, which is not a valid IP address\x1a\n" +
	"this != ''\xc8\x01\x01R\x04cidr\x12@\n" +
	"\x05state\x18\x02 \x01(\x0e2\".nebius.vpc.v1alpha1.PoolCidrStateB\x06\xbaH\x03\xc8\x01\x01R\x05state\x120\n" +
	"\fallowed_mask\x18\x03 \x01(\x03B\r\xbaH\n" +
	"\xc8\x01\x01\"\x05\x18\x80\x01(\x00R\vallowedMask\"\xc1\x01\n" +
	"\n" +
	"PoolStatus\x12;\n" +
	"\x05state\x18\x01 \x01(\x0e2%.nebius.vpc.v1alpha1.PoolStatus.StateR\x05state\x12\x14\n" +
	"\x05cidrs\x18\x02 \x03(\tR\x05cidrs\x12\x19\n" +
	"\bscope_id\x18\x03 \x01(\tR\ascopeId\"E\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bCREATING\x10\x01\x12\t\n" +
	"\x05READY\x10\x02\x12\f\n" +
	"\bDELETING\x10\x03*C\n" +
	"\rPoolCidrState\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\r\n" +
	"\tAVAILABLE\x10\x01\x12\f\n" +
	"\bDISABLED\x10\x02*;\n" +
	"\tIpVersion\x12\x1a\n" +
	"\x16IP_VERSION_UNSPECIFIED\x10\x00\x12\b\n" +
	"\x04IPV4\x10\x01\x12\b\n" +
	"\x04IPV6\x10\x02B\\\n" +
	"\x1aai.nebius.pub.vpc.v1alpha1B\tPoolProtoP\x01Z1github.com/nebius/gosdk/proto/nebius/vpc/v1alpha1b\x06proto3"

var (
	file_nebius_vpc_v1alpha1_pool_proto_rawDescOnce sync.Once
	file_nebius_vpc_v1alpha1_pool_proto_rawDescData []byte
)

func file_nebius_vpc_v1alpha1_pool_proto_rawDescGZIP() []byte {
	file_nebius_vpc_v1alpha1_pool_proto_rawDescOnce.Do(func() {
		file_nebius_vpc_v1alpha1_pool_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nebius_vpc_v1alpha1_pool_proto_rawDesc), len(file_nebius_vpc_v1alpha1_pool_proto_rawDesc)))
	})
	return file_nebius_vpc_v1alpha1_pool_proto_rawDescData
}

var file_nebius_vpc_v1alpha1_pool_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_nebius_vpc_v1alpha1_pool_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_nebius_vpc_v1alpha1_pool_proto_goTypes = []any{
	(PoolCidrState)(0),          // 0: nebius.vpc.v1alpha1.PoolCidrState
	(IpVersion)(0),              // 1: nebius.vpc.v1alpha1.IpVersion
	(PoolStatus_State)(0),       // 2: nebius.vpc.v1alpha1.PoolStatus.State
	(*Pool)(nil),                // 3: nebius.vpc.v1alpha1.Pool
	(*PoolSpec)(nil),            // 4: nebius.vpc.v1alpha1.PoolSpec
	(*PoolCidr)(nil),            // 5: nebius.vpc.v1alpha1.PoolCidr
	(*PoolStatus)(nil),          // 6: nebius.vpc.v1alpha1.PoolStatus
	(*v1.ResourceMetadata)(nil), // 7: nebius.common.v1.ResourceMetadata
}
var file_nebius_vpc_v1alpha1_pool_proto_depIdxs = []int32{
	7, // 0: nebius.vpc.v1alpha1.Pool.metadata:type_name -> nebius.common.v1.ResourceMetadata
	4, // 1: nebius.vpc.v1alpha1.Pool.spec:type_name -> nebius.vpc.v1alpha1.PoolSpec
	6, // 2: nebius.vpc.v1alpha1.Pool.status:type_name -> nebius.vpc.v1alpha1.PoolStatus
	1, // 3: nebius.vpc.v1alpha1.PoolSpec.version:type_name -> nebius.vpc.v1alpha1.IpVersion
	5, // 4: nebius.vpc.v1alpha1.PoolSpec.cidrs:type_name -> nebius.vpc.v1alpha1.PoolCidr
	0, // 5: nebius.vpc.v1alpha1.PoolCidr.state:type_name -> nebius.vpc.v1alpha1.PoolCidrState
	2, // 6: nebius.vpc.v1alpha1.PoolStatus.state:type_name -> nebius.vpc.v1alpha1.PoolStatus.State
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_nebius_vpc_v1alpha1_pool_proto_init() }
func file_nebius_vpc_v1alpha1_pool_proto_init() {
	if File_nebius_vpc_v1alpha1_pool_proto != nil {
		return
	}
	file_nebius_vpc_v1alpha1_pool_proto_msgTypes[1].OneofWrappers = []any{
		(*PoolSpec_SourcePoolId)(nil),
		(*PoolSpec_SourceScopeId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nebius_vpc_v1alpha1_pool_proto_rawDesc), len(file_nebius_vpc_v1alpha1_pool_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nebius_vpc_v1alpha1_pool_proto_goTypes,
		DependencyIndexes: file_nebius_vpc_v1alpha1_pool_proto_depIdxs,
		EnumInfos:         file_nebius_vpc_v1alpha1_pool_proto_enumTypes,
		MessageInfos:      file_nebius_vpc_v1alpha1_pool_proto_msgTypes,
	}.Build()
	File_nebius_vpc_v1alpha1_pool_proto = out.File
	file_nebius_vpc_v1alpha1_pool_proto_goTypes = nil
	file_nebius_vpc_v1alpha1_pool_proto_depIdxs = nil
}
