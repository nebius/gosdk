// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.3
// source: nebius/vpc/v1alpha1/subnet.proto

package v1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumeration of possible states of the subnet.
type SubnetStatus_State int32

const (
	SubnetStatus_STATE_UNSPECIFIED SubnetStatus_State = 0 // Default state, unspecified.
	SubnetStatus_CREATING          SubnetStatus_State = 1 // Subnet is being created.
	SubnetStatus_READY             SubnetStatus_State = 2 // Subnet is ready for use.
	SubnetStatus_DELETING          SubnetStatus_State = 3 // Subnet is being deleted.
)

// Enum value maps for SubnetStatus_State.
var (
	SubnetStatus_State_name = map[int32]string{
		0: "STATE_UNSPECIFIED",
		1: "CREATING",
		2: "READY",
		3: "DELETING",
	}
	SubnetStatus_State_value = map[string]int32{
		"STATE_UNSPECIFIED": 0,
		"CREATING":          1,
		"READY":             2,
		"DELETING":          3,
	}
)

func (x SubnetStatus_State) Enum() *SubnetStatus_State {
	p := new(SubnetStatus_State)
	*p = x
	return p
}

func (x SubnetStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubnetStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_vpc_v1alpha1_subnet_proto_enumTypes[0].Descriptor()
}

func (SubnetStatus_State) Type() protoreflect.EnumType {
	return &file_nebius_vpc_v1alpha1_subnet_proto_enumTypes[0]
}

func (x SubnetStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubnetStatus_State.Descriptor instead.
func (SubnetStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_nebius_vpc_v1alpha1_subnet_proto_rawDescGZIP(), []int{5, 0}
}

// Defines a Subnet, a segment of a network used for more granular control and management.
// Subnet uses pools to organize address space.
type Subnet struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata for the subnet resource.
	// `metadata.parent_id` represents IAM container
	Metadata *v1.ResourceMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Specification of the subnet.
	Spec *SubnetSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	// Status of the subnet.
	Status        *SubnetStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Subnet) Reset() {
	*x = Subnet{}
	mi := &file_nebius_vpc_v1alpha1_subnet_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Subnet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subnet) ProtoMessage() {}

func (x *Subnet) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1alpha1_subnet_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subnet.ProtoReflect.Descriptor instead.
func (*Subnet) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1alpha1_subnet_proto_rawDescGZIP(), []int{0}
}

func (x *Subnet) GetMetadata() *v1.ResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Subnet) GetSpec() *SubnetSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Subnet) GetStatus() *SubnetStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type SubnetSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Network ID.
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Pool for addresses
	Pools []*SubnetPool `protobuf:"bytes,2,rep,name=pools,proto3" json:"pools,omitempty"`
	// Enable egress NAT gateway
	EnableEgressNat bool `protobuf:"varint,3,opt,name=enable_egress_nat,json=enableEgressNat,proto3" json:"enable_egress_nat,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SubnetSpec) Reset() {
	*x = SubnetSpec{}
	mi := &file_nebius_vpc_v1alpha1_subnet_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubnetSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetSpec) ProtoMessage() {}

func (x *SubnetSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1alpha1_subnet_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetSpec.ProtoReflect.Descriptor instead.
func (*SubnetSpec) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1alpha1_subnet_proto_rawDescGZIP(), []int{1}
}

func (x *SubnetSpec) GetNetworkId() string {
	if x != nil {
		return x.NetworkId
	}
	return ""
}

func (x *SubnetSpec) GetPools() []*SubnetPool {
	if x != nil {
		return x.Pools
	}
	return nil
}

func (x *SubnetSpec) GetEnableEgressNat() bool {
	if x != nil {
		return x.EnableEgressNat
	}
	return false
}

type SubnetPool struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Pool:
	//
	//	*SubnetPool_Spec
	//	*SubnetPool_PoolId
	Pool          isSubnetPool_Pool `protobuf_oneof:"pool"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubnetPool) Reset() {
	*x = SubnetPool{}
	mi := &file_nebius_vpc_v1alpha1_subnet_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubnetPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetPool) ProtoMessage() {}

func (x *SubnetPool) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1alpha1_subnet_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetPool.ProtoReflect.Descriptor instead.
func (*SubnetPool) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1alpha1_subnet_proto_rawDescGZIP(), []int{2}
}

func (x *SubnetPool) GetPool() isSubnetPool_Pool {
	if x != nil {
		return x.Pool
	}
	return nil
}

func (x *SubnetPool) GetSpec() *SubnetPoolSpec {
	if x != nil {
		if x, ok := x.Pool.(*SubnetPool_Spec); ok {
			return x.Spec
		}
	}
	return nil
}

func (x *SubnetPool) GetPoolId() string {
	if x != nil {
		if x, ok := x.Pool.(*SubnetPool_PoolId); ok {
			return x.PoolId
		}
	}
	return ""
}

type isSubnetPool_Pool interface {
	isSubnetPool_Pool()
}

type SubnetPool_Spec struct {
	Spec *SubnetPoolSpec `protobuf:"bytes,1,opt,name=spec,proto3,oneof"`
}

type SubnetPool_PoolId struct {
	PoolId string `protobuf:"bytes,2,opt,name=pool_id,json=poolId,proto3,oneof"`
}

func (*SubnetPool_Spec) isSubnetPool_Pool() {}

func (*SubnetPool_PoolId) isSubnetPool_Pool() {}

type SubnetPoolSpec struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       IpVersion              `protobuf:"varint,1,opt,name=version,proto3,enum=nebius.vpc.v1alpha1.IpVersion" json:"version,omitempty"`
	Cidrs         []*SubnetCidr          `protobuf:"bytes,2,rep,name=cidrs,proto3" json:"cidrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubnetPoolSpec) Reset() {
	*x = SubnetPoolSpec{}
	mi := &file_nebius_vpc_v1alpha1_subnet_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubnetPoolSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetPoolSpec) ProtoMessage() {}

func (x *SubnetPoolSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1alpha1_subnet_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetPoolSpec.ProtoReflect.Descriptor instead.
func (*SubnetPoolSpec) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1alpha1_subnet_proto_rawDescGZIP(), []int{3}
}

func (x *SubnetPoolSpec) GetVersion() IpVersion {
	if x != nil {
		return x.Version
	}
	return IpVersion_IP_VERSION_UNSPECIFIED
}

func (x *SubnetPoolSpec) GetCidrs() []*SubnetCidr {
	if x != nil {
		return x.Cidrs
	}
	return nil
}

type SubnetCidr struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// CIDR block.
	// May be a prefix length (such as /24) or a CIDR-formatted string (such as 10.1.2.0/24).
	Cidr string `protobuf:"bytes,1,opt,name=cidr,proto3" json:"cidr,omitempty"`
	// State of the Cidr.
	State PoolCidrState `protobuf:"varint,2,opt,name=state,proto3,enum=nebius.vpc.v1alpha1.PoolCidrState" json:"state,omitempty"`
	// Maximum mask length for allocation from this cidr
	AllowedMask   int64 `protobuf:"varint,3,opt,name=allowed_mask,json=allowedMask,proto3" json:"allowed_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubnetCidr) Reset() {
	*x = SubnetCidr{}
	mi := &file_nebius_vpc_v1alpha1_subnet_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubnetCidr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetCidr) ProtoMessage() {}

func (x *SubnetCidr) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1alpha1_subnet_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetCidr.ProtoReflect.Descriptor instead.
func (*SubnetCidr) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1alpha1_subnet_proto_rawDescGZIP(), []int{4}
}

func (x *SubnetCidr) GetCidr() string {
	if x != nil {
		return x.Cidr
	}
	return ""
}

func (x *SubnetCidr) GetState() PoolCidrState {
	if x != nil {
		return x.State
	}
	return PoolCidrState_STATE_UNSPECIFIED
}

func (x *SubnetCidr) GetAllowedMask() int64 {
	if x != nil {
		return x.AllowedMask
	}
	return 0
}

type SubnetStatus struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current state of the subnet.
	State SubnetStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=nebius.vpc.v1alpha1.SubnetStatus_State" json:"state,omitempty"`
	// CIDR blocks.
	Ipv4Cidrs     []string `protobuf:"bytes,2,rep,name=ipv4_cidrs,json=ipv4Cidrs,proto3" json:"ipv4_cidrs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubnetStatus) Reset() {
	*x = SubnetStatus{}
	mi := &file_nebius_vpc_v1alpha1_subnet_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubnetStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubnetStatus) ProtoMessage() {}

func (x *SubnetStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_vpc_v1alpha1_subnet_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubnetStatus.ProtoReflect.Descriptor instead.
func (*SubnetStatus) Descriptor() ([]byte, []int) {
	return file_nebius_vpc_v1alpha1_subnet_proto_rawDescGZIP(), []int{5}
}

func (x *SubnetStatus) GetState() SubnetStatus_State {
	if x != nil {
		return x.State
	}
	return SubnetStatus_STATE_UNSPECIFIED
}

func (x *SubnetStatus) GetIpv4Cidrs() []string {
	if x != nil {
		return x.Ipv4Cidrs
	}
	return nil
}

var File_nebius_vpc_v1alpha1_subnet_proto protoreflect.FileDescriptor

const file_nebius_vpc_v1alpha1_subnet_proto_rawDesc = "" +
	"\n" +
	" nebius/vpc/v1alpha1/subnet.proto\x12\x13nebius.vpc.v1alpha1\x1a\x1bbuf/validate/validate.proto\x1a\x1fnebius/common/v1/metadata.proto\x1a\x1enebius/vpc/v1alpha1/pool.proto\"\xb8\x01\n" +
	"\x06Subnet\x12>\n" +
	"\bmetadata\x18\x01 \x01(\v2\".nebius.common.v1.ResourceMetadataR\bmetadata\x123\n" +
	"\x04spec\x18\x02 \x01(\v2\x1f.nebius.vpc.v1alpha1.SubnetSpecR\x04spec\x129\n" +
	"\x06status\x18\x03 \x01(\v2!.nebius.vpc.v1alpha1.SubnetStatusR\x06status\"\x9e\x01\n" +
	"\n" +
	"SubnetSpec\x12%\n" +
	"\n" +
	"network_id\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\tnetworkId\x12=\n" +
	"\x05pools\x18\x02 \x03(\v2\x1f.nebius.vpc.v1alpha1.SubnetPoolB\x06\xbaH\x03\xc8\x01\x01R\x05pools\x12*\n" +
	"\x11enable_egress_nat\x18\x03 \x01(\bR\x0fenableEgressNat\"q\n" +
	"\n" +
	"SubnetPool\x129\n" +
	"\x04spec\x18\x01 \x01(\v2#.nebius.vpc.v1alpha1.SubnetPoolSpecH\x00R\x04spec\x12\x19\n" +
	"\apool_id\x18\x02 \x01(\tH\x00R\x06poolIdB\r\n" +
	"\x04pool\x12\x05\xbaH\x02\b\x01\"\x89\x01\n" +
	"\x0eSubnetPoolSpec\x12@\n" +
	"\aversion\x18\x01 \x01(\x0e2\x1e.nebius.vpc.v1alpha1.IpVersionB\x06\xbaH\x03\xc8\x01\x01R\aversion\x125\n" +
	"\x05cidrs\x18\x02 \x03(\v2\x1f.nebius.vpc.v1alpha1.SubnetCidrR\x05cidrs\"\xa0\x03\n" +
	"\n" +
	"SubnetCidr\x12\x9d\x02\n" +
	"\x04cidr\x18\x01 \x01(\tB\x88\x02\xbaH\x84\x02\xba\x01\xac\x01\n" +
	"\x11string.valid_cidr\x12.value must be a valid IP address, CIDR or mask\x1agthis == '' || this.matches('^/([0-9]|[1-9][0-9]|1[0-2][0-8])$') || this.isIp() || this.isIpPrefix(true)\xba\x01N\n" +
	"\x0fstring.ip_empty\x12/value is empty, which is not a valid IP address\x1a\n" +
	"this != ''\xc8\x01\x01R\x04cidr\x12@\n" +
	"\x05state\x18\x02 \x01(\x0e2\".nebius.vpc.v1alpha1.PoolCidrStateB\x06\xbaH\x03\xc8\x01\x01R\x05state\x120\n" +
	"\fallowed_mask\x18\x03 \x01(\x03B\r\xbaH\n" +
	"\xc8\x01\x01\"\x05\x18\x80\x01(\x00R\vallowedMask\"\xb3\x01\n" +
	"\fSubnetStatus\x12=\n" +
	"\x05state\x18\x01 \x01(\x0e2'.nebius.vpc.v1alpha1.SubnetStatus.StateR\x05state\x12\x1d\n" +
	"\n" +
	"ipv4_cidrs\x18\x02 \x03(\tR\tipv4Cidrs\"E\n" +
	"\x05State\x12\x15\n" +
	"\x11STATE_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bCREATING\x10\x01\x12\t\n" +
	"\x05READY\x10\x02\x12\f\n" +
	"\bDELETING\x10\x03B^\n" +
	"\x1aai.nebius.pub.vpc.v1alpha1B\vSubnetProtoP\x01Z1github.com/nebius/gosdk/proto/nebius/vpc/v1alpha1b\x06proto3"

var (
	file_nebius_vpc_v1alpha1_subnet_proto_rawDescOnce sync.Once
	file_nebius_vpc_v1alpha1_subnet_proto_rawDescData []byte
)

func file_nebius_vpc_v1alpha1_subnet_proto_rawDescGZIP() []byte {
	file_nebius_vpc_v1alpha1_subnet_proto_rawDescOnce.Do(func() {
		file_nebius_vpc_v1alpha1_subnet_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nebius_vpc_v1alpha1_subnet_proto_rawDesc), len(file_nebius_vpc_v1alpha1_subnet_proto_rawDesc)))
	})
	return file_nebius_vpc_v1alpha1_subnet_proto_rawDescData
}

var file_nebius_vpc_v1alpha1_subnet_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_nebius_vpc_v1alpha1_subnet_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_nebius_vpc_v1alpha1_subnet_proto_goTypes = []any{
	(SubnetStatus_State)(0),     // 0: nebius.vpc.v1alpha1.SubnetStatus.State
	(*Subnet)(nil),              // 1: nebius.vpc.v1alpha1.Subnet
	(*SubnetSpec)(nil),          // 2: nebius.vpc.v1alpha1.SubnetSpec
	(*SubnetPool)(nil),          // 3: nebius.vpc.v1alpha1.SubnetPool
	(*SubnetPoolSpec)(nil),      // 4: nebius.vpc.v1alpha1.SubnetPoolSpec
	(*SubnetCidr)(nil),          // 5: nebius.vpc.v1alpha1.SubnetCidr
	(*SubnetStatus)(nil),        // 6: nebius.vpc.v1alpha1.SubnetStatus
	(*v1.ResourceMetadata)(nil), // 7: nebius.common.v1.ResourceMetadata
	(IpVersion)(0),              // 8: nebius.vpc.v1alpha1.IpVersion
	(PoolCidrState)(0),          // 9: nebius.vpc.v1alpha1.PoolCidrState
}
var file_nebius_vpc_v1alpha1_subnet_proto_depIdxs = []int32{
	7, // 0: nebius.vpc.v1alpha1.Subnet.metadata:type_name -> nebius.common.v1.ResourceMetadata
	2, // 1: nebius.vpc.v1alpha1.Subnet.spec:type_name -> nebius.vpc.v1alpha1.SubnetSpec
	6, // 2: nebius.vpc.v1alpha1.Subnet.status:type_name -> nebius.vpc.v1alpha1.SubnetStatus
	3, // 3: nebius.vpc.v1alpha1.SubnetSpec.pools:type_name -> nebius.vpc.v1alpha1.SubnetPool
	4, // 4: nebius.vpc.v1alpha1.SubnetPool.spec:type_name -> nebius.vpc.v1alpha1.SubnetPoolSpec
	8, // 5: nebius.vpc.v1alpha1.SubnetPoolSpec.version:type_name -> nebius.vpc.v1alpha1.IpVersion
	5, // 6: nebius.vpc.v1alpha1.SubnetPoolSpec.cidrs:type_name -> nebius.vpc.v1alpha1.SubnetCidr
	9, // 7: nebius.vpc.v1alpha1.SubnetCidr.state:type_name -> nebius.vpc.v1alpha1.PoolCidrState
	0, // 8: nebius.vpc.v1alpha1.SubnetStatus.state:type_name -> nebius.vpc.v1alpha1.SubnetStatus.State
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_nebius_vpc_v1alpha1_subnet_proto_init() }
func file_nebius_vpc_v1alpha1_subnet_proto_init() {
	if File_nebius_vpc_v1alpha1_subnet_proto != nil {
		return
	}
	file_nebius_vpc_v1alpha1_pool_proto_init()
	file_nebius_vpc_v1alpha1_subnet_proto_msgTypes[2].OneofWrappers = []any{
		(*SubnetPool_Spec)(nil),
		(*SubnetPool_PoolId)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nebius_vpc_v1alpha1_subnet_proto_rawDesc), len(file_nebius_vpc_v1alpha1_subnet_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nebius_vpc_v1alpha1_subnet_proto_goTypes,
		DependencyIndexes: file_nebius_vpc_v1alpha1_subnet_proto_depIdxs,
		EnumInfos:         file_nebius_vpc_v1alpha1_subnet_proto_enumTypes,
		MessageInfos:      file_nebius_vpc_v1alpha1_subnet_proto_msgTypes,
	}.Build()
	File_nebius_vpc_v1alpha1_subnet_proto = out.File
	file_nebius_vpc_v1alpha1_subnet_proto_goTypes = nil
	file_nebius_vpc_v1alpha1_subnet_proto_depIdxs = nil
}
