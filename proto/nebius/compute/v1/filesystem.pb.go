// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v4.25.1
// source: nebius/compute/v1/filesystem.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/nebius/gosdk/proto/nebius"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FilesystemSpec_FilesystemType int32

const (
	FilesystemSpec_UNSPECIFIED FilesystemSpec_FilesystemType = 0
	// the list of available types will be clarified later, it is not final version
	FilesystemSpec_NETWORK_SSD FilesystemSpec_FilesystemType = 1
	FilesystemSpec_NETWORK_HDD FilesystemSpec_FilesystemType = 2
)

// Enum value maps for FilesystemSpec_FilesystemType.
var (
	FilesystemSpec_FilesystemType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NETWORK_SSD",
		2: "NETWORK_HDD",
	}
	FilesystemSpec_FilesystemType_value = map[string]int32{
		"UNSPECIFIED": 0,
		"NETWORK_SSD": 1,
		"NETWORK_HDD": 2,
	}
)

func (x FilesystemSpec_FilesystemType) Enum() *FilesystemSpec_FilesystemType {
	p := new(FilesystemSpec_FilesystemType)
	*p = x
	return p
}

func (x FilesystemSpec_FilesystemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilesystemSpec_FilesystemType) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_compute_v1_filesystem_proto_enumTypes[0].Descriptor()
}

func (FilesystemSpec_FilesystemType) Type() protoreflect.EnumType {
	return &file_nebius_compute_v1_filesystem_proto_enumTypes[0]
}

func (x FilesystemSpec_FilesystemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilesystemSpec_FilesystemType.Descriptor instead.
func (FilesystemSpec_FilesystemType) EnumDescriptor() ([]byte, []int) {
	return file_nebius_compute_v1_filesystem_proto_rawDescGZIP(), []int{1, 0}
}

type FilesystemStatus_State int32

const (
	FilesystemStatus_UNSPECIFIED FilesystemStatus_State = 0
	FilesystemStatus_CREATING    FilesystemStatus_State = 1
	FilesystemStatus_READY       FilesystemStatus_State = 2
	FilesystemStatus_UPDATING    FilesystemStatus_State = 3
	FilesystemStatus_DELETING    FilesystemStatus_State = 4
	FilesystemStatus_ERROR       FilesystemStatus_State = 5
)

// Enum value maps for FilesystemStatus_State.
var (
	FilesystemStatus_State_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "CREATING",
		2: "READY",
		3: "UPDATING",
		4: "DELETING",
		5: "ERROR",
	}
	FilesystemStatus_State_value = map[string]int32{
		"UNSPECIFIED": 0,
		"CREATING":    1,
		"READY":       2,
		"UPDATING":    3,
		"DELETING":    4,
		"ERROR":       5,
	}
)

func (x FilesystemStatus_State) Enum() *FilesystemStatus_State {
	p := new(FilesystemStatus_State)
	*p = x
	return p
}

func (x FilesystemStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilesystemStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_compute_v1_filesystem_proto_enumTypes[1].Descriptor()
}

func (FilesystemStatus_State) Type() protoreflect.EnumType {
	return &file_nebius_compute_v1_filesystem_proto_enumTypes[1]
}

func (x FilesystemStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilesystemStatus_State.Descriptor instead.
func (FilesystemStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_nebius_compute_v1_filesystem_proto_rawDescGZIP(), []int{2, 0}
}

type Filesystem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      *v1.ResourceMetadata   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *FilesystemSpec        `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *FilesystemStatus      `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Filesystem) Reset() {
	*x = Filesystem{}
	mi := &file_nebius_compute_v1_filesystem_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filesystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filesystem) ProtoMessage() {}

func (x *Filesystem) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_compute_v1_filesystem_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filesystem.ProtoReflect.Descriptor instead.
func (*Filesystem) Descriptor() ([]byte, []int) {
	return file_nebius_compute_v1_filesystem_proto_rawDescGZIP(), []int{0}
}

func (x *Filesystem) GetMetadata() *v1.ResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Filesystem) GetSpec() *FilesystemSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Filesystem) GetStatus() *FilesystemStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type FilesystemSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Size:
	//
	//	*FilesystemSpec_SizeBytes
	//	*FilesystemSpec_SizeKibibytes
	//	*FilesystemSpec_SizeMebibytes
	//	*FilesystemSpec_SizeGibibytes
	Size           isFilesystemSpec_Size         `protobuf_oneof:"size"`
	BlockSizeBytes int64                         `protobuf:"varint,5,opt,name=block_size_bytes,json=blockSizeBytes,proto3" json:"block_size_bytes,omitempty"`
	Type           FilesystemSpec_FilesystemType `protobuf:"varint,6,opt,name=type,proto3,enum=nebius.compute.v1.FilesystemSpec_FilesystemType" json:"type,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *FilesystemSpec) Reset() {
	*x = FilesystemSpec{}
	mi := &file_nebius_compute_v1_filesystem_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesystemSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemSpec) ProtoMessage() {}

func (x *FilesystemSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_compute_v1_filesystem_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemSpec.ProtoReflect.Descriptor instead.
func (*FilesystemSpec) Descriptor() ([]byte, []int) {
	return file_nebius_compute_v1_filesystem_proto_rawDescGZIP(), []int{1}
}

func (x *FilesystemSpec) GetSize() isFilesystemSpec_Size {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *FilesystemSpec) GetSizeBytes() int64 {
	if x != nil {
		if x, ok := x.Size.(*FilesystemSpec_SizeBytes); ok {
			return x.SizeBytes
		}
	}
	return 0
}

func (x *FilesystemSpec) GetSizeKibibytes() int64 {
	if x != nil {
		if x, ok := x.Size.(*FilesystemSpec_SizeKibibytes); ok {
			return x.SizeKibibytes
		}
	}
	return 0
}

func (x *FilesystemSpec) GetSizeMebibytes() int64 {
	if x != nil {
		if x, ok := x.Size.(*FilesystemSpec_SizeMebibytes); ok {
			return x.SizeMebibytes
		}
	}
	return 0
}

func (x *FilesystemSpec) GetSizeGibibytes() int64 {
	if x != nil {
		if x, ok := x.Size.(*FilesystemSpec_SizeGibibytes); ok {
			return x.SizeGibibytes
		}
	}
	return 0
}

func (x *FilesystemSpec) GetBlockSizeBytes() int64 {
	if x != nil {
		return x.BlockSizeBytes
	}
	return 0
}

func (x *FilesystemSpec) GetType() FilesystemSpec_FilesystemType {
	if x != nil {
		return x.Type
	}
	return FilesystemSpec_UNSPECIFIED
}

type isFilesystemSpec_Size interface {
	isFilesystemSpec_Size()
}

type FilesystemSpec_SizeBytes struct {
	SizeBytes int64 `protobuf:"varint,1,opt,name=size_bytes,json=sizeBytes,proto3,oneof"`
}

type FilesystemSpec_SizeKibibytes struct {
	SizeKibibytes int64 `protobuf:"varint,2,opt,name=size_kibibytes,json=sizeKibibytes,proto3,oneof"`
}

type FilesystemSpec_SizeMebibytes struct {
	SizeMebibytes int64 `protobuf:"varint,3,opt,name=size_mebibytes,json=sizeMebibytes,proto3,oneof"`
}

type FilesystemSpec_SizeGibibytes struct {
	SizeGibibytes int64 `protobuf:"varint,4,opt,name=size_gibibytes,json=sizeGibibytes,proto3,oneof"`
}

func (*FilesystemSpec_SizeBytes) isFilesystemSpec_Size() {}

func (*FilesystemSpec_SizeKibibytes) isFilesystemSpec_Size() {}

func (*FilesystemSpec_SizeMebibytes) isFilesystemSpec_Size() {}

func (*FilesystemSpec_SizeGibibytes) isFilesystemSpec_Size() {}

type FilesystemStatus struct {
	state                protoimpl.MessageState `protogen:"open.v1"`
	State                FilesystemStatus_State `protobuf:"varint,1,opt,name=state,proto3,enum=nebius.compute.v1.FilesystemStatus_State" json:"state,omitempty"`
	StateDescription     string                 `protobuf:"bytes,2,opt,name=state_description,json=stateDescription,proto3" json:"state_description,omitempty"`
	ReadWriteAttachments []string               `protobuf:"bytes,3,rep,name=read_write_attachments,json=readWriteAttachments,proto3" json:"read_write_attachments,omitempty"`
	ReadOnlyAttachments  []string               `protobuf:"bytes,4,rep,name=read_only_attachments,json=readOnlyAttachments,proto3" json:"read_only_attachments,omitempty"`
	SizeBytes            int64                  `protobuf:"varint,5,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// Indicates whether there is an ongoing operation
	Reconciling   bool `protobuf:"varint,6,opt,name=reconciling,proto3" json:"reconciling,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FilesystemStatus) Reset() {
	*x = FilesystemStatus{}
	mi := &file_nebius_compute_v1_filesystem_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FilesystemStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilesystemStatus) ProtoMessage() {}

func (x *FilesystemStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_compute_v1_filesystem_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilesystemStatus.ProtoReflect.Descriptor instead.
func (*FilesystemStatus) Descriptor() ([]byte, []int) {
	return file_nebius_compute_v1_filesystem_proto_rawDescGZIP(), []int{2}
}

func (x *FilesystemStatus) GetState() FilesystemStatus_State {
	if x != nil {
		return x.State
	}
	return FilesystemStatus_UNSPECIFIED
}

func (x *FilesystemStatus) GetStateDescription() string {
	if x != nil {
		return x.StateDescription
	}
	return ""
}

func (x *FilesystemStatus) GetReadWriteAttachments() []string {
	if x != nil {
		return x.ReadWriteAttachments
	}
	return nil
}

func (x *FilesystemStatus) GetReadOnlyAttachments() []string {
	if x != nil {
		return x.ReadOnlyAttachments
	}
	return nil
}

func (x *FilesystemStatus) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *FilesystemStatus) GetReconciling() bool {
	if x != nil {
		return x.Reconciling
	}
	return false
}

var File_nebius_compute_v1_filesystem_proto protoreflect.FileDescriptor

var file_nebius_compute_v1_filesystem_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc0, 0x01, 0x0a, 0x0a, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x3e,
	0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x35,
	0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e,
	0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63,
	0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x22, 0x82, 0x03, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x73, 0x69, 0x7a,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6b,
	0x69, 0x62, 0x69, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00,
	0x52, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x4b, 0x69, 0x62, 0x69, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x27, 0x0a, 0x0e, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x6d, 0x65, 0x62, 0x69, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x4d,
	0x65, 0x62, 0x69, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x69, 0x7a, 0x65,
	0x5f, 0x67, 0x69, 0x62, 0x69, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x48, 0x00, 0x52, 0x0d, 0x73, 0x69, 0x7a, 0x65, 0x47, 0x69, 0x62, 0x69, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x10, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x04, 0xba, 0x4a, 0x01,
	0x02, 0x52, 0x0e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x50, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x30, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70,
	0x65, 0x63, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x0a, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0xba, 0x4a, 0x01, 0x02, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x22, 0x43, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52,
	0x4b, 0x5f, 0x53, 0x53, 0x44, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x45, 0x54, 0x57, 0x4f,
	0x52, 0x4b, 0x5f, 0x48, 0x44, 0x44, 0x10, 0x02, 0x42, 0x0d, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65,
	0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x85, 0x03, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3f, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x6e, 0x65,
	0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73, 0x74, 0x61, 0x74, 0x65, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65,
	0x61, 0x64, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x14, 0x72, 0x65, 0x61, 0x64,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x32, 0x0a, 0x15, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x13, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x69, 0x7a, 0x65, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63,
	0x69, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x58, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x44, 0x41,
	0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49,
	0x4e, 0x47, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x42,
	0x5e, 0x0a, 0x18, 0x61, 0x69, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x70, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0f, 0x46, 0x69, 0x6c,
	0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65, 0x62, 0x69, 0x75,
	0x73, 0x2f, 0x67, 0x6f, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x65,
	0x62, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nebius_compute_v1_filesystem_proto_rawDescOnce sync.Once
	file_nebius_compute_v1_filesystem_proto_rawDescData = file_nebius_compute_v1_filesystem_proto_rawDesc
)

func file_nebius_compute_v1_filesystem_proto_rawDescGZIP() []byte {
	file_nebius_compute_v1_filesystem_proto_rawDescOnce.Do(func() {
		file_nebius_compute_v1_filesystem_proto_rawDescData = protoimpl.X.CompressGZIP(file_nebius_compute_v1_filesystem_proto_rawDescData)
	})
	return file_nebius_compute_v1_filesystem_proto_rawDescData
}

var file_nebius_compute_v1_filesystem_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_nebius_compute_v1_filesystem_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_nebius_compute_v1_filesystem_proto_goTypes = []any{
	(FilesystemSpec_FilesystemType)(0), // 0: nebius.compute.v1.FilesystemSpec.FilesystemType
	(FilesystemStatus_State)(0),        // 1: nebius.compute.v1.FilesystemStatus.State
	(*Filesystem)(nil),                 // 2: nebius.compute.v1.Filesystem
	(*FilesystemSpec)(nil),             // 3: nebius.compute.v1.FilesystemSpec
	(*FilesystemStatus)(nil),           // 4: nebius.compute.v1.FilesystemStatus
	(*v1.ResourceMetadata)(nil),        // 5: nebius.common.v1.ResourceMetadata
}
var file_nebius_compute_v1_filesystem_proto_depIdxs = []int32{
	5, // 0: nebius.compute.v1.Filesystem.metadata:type_name -> nebius.common.v1.ResourceMetadata
	3, // 1: nebius.compute.v1.Filesystem.spec:type_name -> nebius.compute.v1.FilesystemSpec
	4, // 2: nebius.compute.v1.Filesystem.status:type_name -> nebius.compute.v1.FilesystemStatus
	0, // 3: nebius.compute.v1.FilesystemSpec.type:type_name -> nebius.compute.v1.FilesystemSpec.FilesystemType
	1, // 4: nebius.compute.v1.FilesystemStatus.state:type_name -> nebius.compute.v1.FilesystemStatus.State
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_nebius_compute_v1_filesystem_proto_init() }
func file_nebius_compute_v1_filesystem_proto_init() {
	if File_nebius_compute_v1_filesystem_proto != nil {
		return
	}
	file_nebius_compute_v1_filesystem_proto_msgTypes[1].OneofWrappers = []any{
		(*FilesystemSpec_SizeBytes)(nil),
		(*FilesystemSpec_SizeKibibytes)(nil),
		(*FilesystemSpec_SizeMebibytes)(nil),
		(*FilesystemSpec_SizeGibibytes)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nebius_compute_v1_filesystem_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nebius_compute_v1_filesystem_proto_goTypes,
		DependencyIndexes: file_nebius_compute_v1_filesystem_proto_depIdxs,
		EnumInfos:         file_nebius_compute_v1_filesystem_proto_enumTypes,
		MessageInfos:      file_nebius_compute_v1_filesystem_proto_msgTypes,
	}.Build()
	File_nebius_compute_v1_filesystem_proto = out.File
	file_nebius_compute_v1_filesystem_proto_rawDesc = nil
	file_nebius_compute_v1_filesystem_proto_goTypes = nil
	file_nebius_compute_v1_filesystem_proto_depIdxs = nil
}
