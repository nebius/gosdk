// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: nebius/compute/v1/node_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NodeService_SetUnhealthy_FullMethodName = "/nebius.compute.v1.NodeService/SetUnhealthy"
)

// NodeServiceClient is the client API for NodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeServiceClient interface {
	// SetUnhealthy marks the node underlying the Compute VM as unhealthy, which has the following effect:
	//
	//  1. Scheduler makes the best effort not to assign new VMs to the unhealthy node,
	//     but in case of no capacity, the VM can be assigned to an unhealthy node.
	//  2. The existing VMs continue to work on the node, but after stop/start via
	//     Compute API they most probably will be assigned to a different node.
	//
	// If the node was already marked unhealthy, the consecutive calls to SetUnhealthy
	// will return grpc code AlreadyExists.
	//
	// To use this rpc one needs to obtain `compute.node.setUnhealthy` permission
	// for the VM's parent container. The permission is granted to the TSA inside the VM.
	SetUnhealthy(ctx context.Context, in *NodeSetUnhealthyRequest, opts ...grpc.CallOption) (*NodeSetUnhealthyResponse, error)
}

type nodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeServiceClient(cc grpc.ClientConnInterface) NodeServiceClient {
	return &nodeServiceClient{cc}
}

func (c *nodeServiceClient) SetUnhealthy(ctx context.Context, in *NodeSetUnhealthyRequest, opts ...grpc.CallOption) (*NodeSetUnhealthyResponse, error) {
	out := new(NodeSetUnhealthyResponse)
	err := c.cc.Invoke(ctx, NodeService_SetUnhealthy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeServiceServer is the server API for NodeService service.
// All implementations should embed UnimplementedNodeServiceServer
// for forward compatibility
type NodeServiceServer interface {
	// SetUnhealthy marks the node underlying the Compute VM as unhealthy, which has the following effect:
	//
	//  1. Scheduler makes the best effort not to assign new VMs to the unhealthy node,
	//     but in case of no capacity, the VM can be assigned to an unhealthy node.
	//  2. The existing VMs continue to work on the node, but after stop/start via
	//     Compute API they most probably will be assigned to a different node.
	//
	// If the node was already marked unhealthy, the consecutive calls to SetUnhealthy
	// will return grpc code AlreadyExists.
	//
	// To use this rpc one needs to obtain `compute.node.setUnhealthy` permission
	// for the VM's parent container. The permission is granted to the TSA inside the VM.
	SetUnhealthy(context.Context, *NodeSetUnhealthyRequest) (*NodeSetUnhealthyResponse, error)
}

// UnimplementedNodeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNodeServiceServer struct {
}

func (UnimplementedNodeServiceServer) SetUnhealthy(context.Context, *NodeSetUnhealthyRequest) (*NodeSetUnhealthyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUnhealthy not implemented")
}

// UnsafeNodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeServiceServer will
// result in compilation errors.
type UnsafeNodeServiceServer interface {
	mustEmbedUnimplementedNodeServiceServer()
}

func RegisterNodeServiceServer(s grpc.ServiceRegistrar, srv NodeServiceServer) {
	s.RegisterService(&NodeService_ServiceDesc, srv)
}

func _NodeService_SetUnhealthy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeSetUnhealthyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeServiceServer).SetUnhealthy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeService_SetUnhealthy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeServiceServer).SetUnhealthy(ctx, req.(*NodeSetUnhealthyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeService_ServiceDesc is the grpc.ServiceDesc for NodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebius.compute.v1.NodeService",
	HandlerType: (*NodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetUnhealthy",
			Handler:    _NodeService_SetUnhealthy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebius/compute/v1/node_service.proto",
}
