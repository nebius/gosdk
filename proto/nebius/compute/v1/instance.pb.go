// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v4.25.1
// source: nebius/compute/v1/instance.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/nebius/gosdk/proto/nebius"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InstanceRecoveryPolicy int32

const (
	InstanceRecoveryPolicy_RECOVER InstanceRecoveryPolicy = 0
	InstanceRecoveryPolicy_FAIL    InstanceRecoveryPolicy = 1
)

// Enum value maps for InstanceRecoveryPolicy.
var (
	InstanceRecoveryPolicy_name = map[int32]string{
		0: "RECOVER",
		1: "FAIL",
	}
	InstanceRecoveryPolicy_value = map[string]int32{
		"RECOVER": 0,
		"FAIL":    1,
	}
)

func (x InstanceRecoveryPolicy) Enum() *InstanceRecoveryPolicy {
	p := new(InstanceRecoveryPolicy)
	*p = x
	return p
}

func (x InstanceRecoveryPolicy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceRecoveryPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_compute_v1_instance_proto_enumTypes[0].Descriptor()
}

func (InstanceRecoveryPolicy) Type() protoreflect.EnumType {
	return &file_nebius_compute_v1_instance_proto_enumTypes[0]
}

func (x InstanceRecoveryPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceRecoveryPolicy.Descriptor instead.
func (InstanceRecoveryPolicy) EnumDescriptor() ([]byte, []int) {
	return file_nebius_compute_v1_instance_proto_rawDescGZIP(), []int{0}
}

type AttachedDiskSpec_AttachMode int32

const (
	AttachedDiskSpec_UNSPECIFIED AttachedDiskSpec_AttachMode = 0
	AttachedDiskSpec_READ_ONLY   AttachedDiskSpec_AttachMode = 1
	AttachedDiskSpec_READ_WRITE  AttachedDiskSpec_AttachMode = 2
)

// Enum value maps for AttachedDiskSpec_AttachMode.
var (
	AttachedDiskSpec_AttachMode_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "READ_ONLY",
		2: "READ_WRITE",
	}
	AttachedDiskSpec_AttachMode_value = map[string]int32{
		"UNSPECIFIED": 0,
		"READ_ONLY":   1,
		"READ_WRITE":  2,
	}
)

func (x AttachedDiskSpec_AttachMode) Enum() *AttachedDiskSpec_AttachMode {
	p := new(AttachedDiskSpec_AttachMode)
	*p = x
	return p
}

func (x AttachedDiskSpec_AttachMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttachedDiskSpec_AttachMode) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_compute_v1_instance_proto_enumTypes[1].Descriptor()
}

func (AttachedDiskSpec_AttachMode) Type() protoreflect.EnumType {
	return &file_nebius_compute_v1_instance_proto_enumTypes[1]
}

func (x AttachedDiskSpec_AttachMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttachedDiskSpec_AttachMode.Descriptor instead.
func (AttachedDiskSpec_AttachMode) EnumDescriptor() ([]byte, []int) {
	return file_nebius_compute_v1_instance_proto_rawDescGZIP(), []int{4, 0}
}

type AttachedFilesystemSpec_AttachMode int32

const (
	AttachedFilesystemSpec_UNSPECIFIED AttachedFilesystemSpec_AttachMode = 0
	AttachedFilesystemSpec_READ_ONLY   AttachedFilesystemSpec_AttachMode = 1
	AttachedFilesystemSpec_READ_WRITE  AttachedFilesystemSpec_AttachMode = 2
)

// Enum value maps for AttachedFilesystemSpec_AttachMode.
var (
	AttachedFilesystemSpec_AttachMode_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "READ_ONLY",
		2: "READ_WRITE",
	}
	AttachedFilesystemSpec_AttachMode_value = map[string]int32{
		"UNSPECIFIED": 0,
		"READ_ONLY":   1,
		"READ_WRITE":  2,
	}
)

func (x AttachedFilesystemSpec_AttachMode) Enum() *AttachedFilesystemSpec_AttachMode {
	p := new(AttachedFilesystemSpec_AttachMode)
	*p = x
	return p
}

func (x AttachedFilesystemSpec_AttachMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AttachedFilesystemSpec_AttachMode) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_compute_v1_instance_proto_enumTypes[2].Descriptor()
}

func (AttachedFilesystemSpec_AttachMode) Type() protoreflect.EnumType {
	return &file_nebius_compute_v1_instance_proto_enumTypes[2]
}

func (x AttachedFilesystemSpec_AttachMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AttachedFilesystemSpec_AttachMode.Descriptor instead.
func (AttachedFilesystemSpec_AttachMode) EnumDescriptor() ([]byte, []int) {
	return file_nebius_compute_v1_instance_proto_rawDescGZIP(), []int{7, 0}
}

type InstanceStatus_InstanceState int32

const (
	InstanceStatus_UNSPECIFIED InstanceStatus_InstanceState = 0
	InstanceStatus_CREATING    InstanceStatus_InstanceState = 1
	InstanceStatus_UPDATING    InstanceStatus_InstanceState = 2
	InstanceStatus_STARTING    InstanceStatus_InstanceState = 3
	InstanceStatus_RUNNING     InstanceStatus_InstanceState = 4
	InstanceStatus_STOPPING    InstanceStatus_InstanceState = 5
	InstanceStatus_STOPPED     InstanceStatus_InstanceState = 6
	InstanceStatus_DELETING    InstanceStatus_InstanceState = 7
	InstanceStatus_ERROR       InstanceStatus_InstanceState = 8
)

// Enum value maps for InstanceStatus_InstanceState.
var (
	InstanceStatus_InstanceState_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "CREATING",
		2: "UPDATING",
		3: "STARTING",
		4: "RUNNING",
		5: "STOPPING",
		6: "STOPPED",
		7: "DELETING",
		8: "ERROR",
	}
	InstanceStatus_InstanceState_value = map[string]int32{
		"UNSPECIFIED": 0,
		"CREATING":    1,
		"UPDATING":    2,
		"STARTING":    3,
		"RUNNING":     4,
		"STOPPING":    5,
		"STOPPED":     6,
		"DELETING":    7,
		"ERROR":       8,
	}
)

func (x InstanceStatus_InstanceState) Enum() *InstanceStatus_InstanceState {
	p := new(InstanceStatus_InstanceState)
	*p = x
	return p
}

func (x InstanceStatus_InstanceState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InstanceStatus_InstanceState) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_compute_v1_instance_proto_enumTypes[3].Descriptor()
}

func (InstanceStatus_InstanceState) Type() protoreflect.EnumType {
	return &file_nebius_compute_v1_instance_proto_enumTypes[3]
}

func (x InstanceStatus_InstanceState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InstanceStatus_InstanceState.Descriptor instead.
func (InstanceStatus_InstanceState) EnumDescriptor() ([]byte, []int) {
	return file_nebius_compute_v1_instance_proto_rawDescGZIP(), []int{8, 0}
}

type Instance struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metadata *v1.ResourceMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec     *InstanceSpec        `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status   *InstanceStatus      `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *Instance) Reset() {
	*x = Instance{}
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Instance) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Instance) ProtoMessage() {}

func (x *Instance) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Instance.ProtoReflect.Descriptor instead.
func (*Instance) Descriptor() ([]byte, []int) {
	return file_nebius_compute_v1_instance_proto_rawDescGZIP(), []int{0}
}

func (x *Instance) GetMetadata() *v1.ResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Instance) GetSpec() *InstanceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Instance) GetStatus() *InstanceStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type InstanceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceAccountId  string                    `protobuf:"bytes,1,opt,name=service_account_id,json=serviceAccountId,proto3" json:"service_account_id,omitempty"`
	Resources         *ResourcesSpec            `protobuf:"bytes,2,opt,name=resources,proto3" json:"resources,omitempty"`
	GpuCluster        *InstanceGpuClusterSpec   `protobuf:"bytes,3,opt,name=gpu_cluster,json=gpuCluster,proto3" json:"gpu_cluster,omitempty"`
	NetworkInterfaces []*NetworkInterfaceSpec   `protobuf:"bytes,4,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`
	BootDisk          *AttachedDiskSpec         `protobuf:"bytes,5,opt,name=boot_disk,json=bootDisk,proto3" json:"boot_disk,omitempty"`
	SecondaryDisks    []*AttachedDiskSpec       `protobuf:"bytes,6,rep,name=secondary_disks,json=secondaryDisks,proto3" json:"secondary_disks,omitempty"`
	Filesystems       []*AttachedFilesystemSpec `protobuf:"bytes,7,rep,name=filesystems,proto3" json:"filesystems,omitempty"`
	CloudInitUserData string                    `protobuf:"bytes,8,opt,name=cloud_init_user_data,json=cloudInitUserData,proto3" json:"cloud_init_user_data,omitempty"`
	Stopped           bool                      `protobuf:"varint,13,opt,name=stopped,proto3" json:"stopped,omitempty"`
	RecoveryPolicy    InstanceRecoveryPolicy    `protobuf:"varint,15,opt,name=recovery_policy,json=recoveryPolicy,proto3,enum=nebius.compute.v1.InstanceRecoveryPolicy" json:"recovery_policy,omitempty"`
}

func (x *InstanceSpec) Reset() {
	*x = InstanceSpec{}
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstanceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceSpec) ProtoMessage() {}

func (x *InstanceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceSpec.ProtoReflect.Descriptor instead.
func (*InstanceSpec) Descriptor() ([]byte, []int) {
	return file_nebius_compute_v1_instance_proto_rawDescGZIP(), []int{1}
}

func (x *InstanceSpec) GetServiceAccountId() string {
	if x != nil {
		return x.ServiceAccountId
	}
	return ""
}

func (x *InstanceSpec) GetResources() *ResourcesSpec {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *InstanceSpec) GetGpuCluster() *InstanceGpuClusterSpec {
	if x != nil {
		return x.GpuCluster
	}
	return nil
}

func (x *InstanceSpec) GetNetworkInterfaces() []*NetworkInterfaceSpec {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

func (x *InstanceSpec) GetBootDisk() *AttachedDiskSpec {
	if x != nil {
		return x.BootDisk
	}
	return nil
}

func (x *InstanceSpec) GetSecondaryDisks() []*AttachedDiskSpec {
	if x != nil {
		return x.SecondaryDisks
	}
	return nil
}

func (x *InstanceSpec) GetFilesystems() []*AttachedFilesystemSpec {
	if x != nil {
		return x.Filesystems
	}
	return nil
}

func (x *InstanceSpec) GetCloudInitUserData() string {
	if x != nil {
		return x.CloudInitUserData
	}
	return ""
}

func (x *InstanceSpec) GetStopped() bool {
	if x != nil {
		return x.Stopped
	}
	return false
}

func (x *InstanceSpec) GetRecoveryPolicy() InstanceRecoveryPolicy {
	if x != nil {
		return x.RecoveryPolicy
	}
	return InstanceRecoveryPolicy_RECOVER
}

type ResourcesSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	// Types that are assignable to Size:
	//
	//	*ResourcesSpec_Preset
	Size isResourcesSpec_Size `protobuf_oneof:"size"`
}

func (x *ResourcesSpec) Reset() {
	*x = ResourcesSpec{}
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourcesSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcesSpec) ProtoMessage() {}

func (x *ResourcesSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcesSpec.ProtoReflect.Descriptor instead.
func (*ResourcesSpec) Descriptor() ([]byte, []int) {
	return file_nebius_compute_v1_instance_proto_rawDescGZIP(), []int{2}
}

func (x *ResourcesSpec) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (m *ResourcesSpec) GetSize() isResourcesSpec_Size {
	if m != nil {
		return m.Size
	}
	return nil
}

func (x *ResourcesSpec) GetPreset() string {
	if x, ok := x.GetSize().(*ResourcesSpec_Preset); ok {
		return x.Preset
	}
	return ""
}

type isResourcesSpec_Size interface {
	isResourcesSpec_Size()
}

type ResourcesSpec_Preset struct {
	Preset string `protobuf:"bytes,2,opt,name=preset,proto3,oneof"`
}

func (*ResourcesSpec_Preset) isResourcesSpec_Size() {}

type InstanceGpuClusterSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *InstanceGpuClusterSpec) Reset() {
	*x = InstanceGpuClusterSpec{}
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstanceGpuClusterSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceGpuClusterSpec) ProtoMessage() {}

func (x *InstanceGpuClusterSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceGpuClusterSpec.ProtoReflect.Descriptor instead.
func (*InstanceGpuClusterSpec) Descriptor() ([]byte, []int) {
	return file_nebius_compute_v1_instance_proto_rawDescGZIP(), []int{3}
}

func (x *InstanceGpuClusterSpec) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AttachedDiskSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachMode AttachedDiskSpec_AttachMode `protobuf:"varint,1,opt,name=attach_mode,json=attachMode,proto3,enum=nebius.compute.v1.AttachedDiskSpec_AttachMode" json:"attach_mode,omitempty"`
	// Types that are assignable to Type:
	//
	//	*AttachedDiskSpec_ExistingDisk
	Type isAttachedDiskSpec_Type `protobuf_oneof:"type"`
	// Specifies the user-defined identifier, allowing to use '/dev/disk/by-id/virtio-{device_id}' as a device path in mount command.
	DeviceId string `protobuf:"bytes,3,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (x *AttachedDiskSpec) Reset() {
	*x = AttachedDiskSpec{}
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachedDiskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachedDiskSpec) ProtoMessage() {}

func (x *AttachedDiskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachedDiskSpec.ProtoReflect.Descriptor instead.
func (*AttachedDiskSpec) Descriptor() ([]byte, []int) {
	return file_nebius_compute_v1_instance_proto_rawDescGZIP(), []int{4}
}

func (x *AttachedDiskSpec) GetAttachMode() AttachedDiskSpec_AttachMode {
	if x != nil {
		return x.AttachMode
	}
	return AttachedDiskSpec_UNSPECIFIED
}

func (m *AttachedDiskSpec) GetType() isAttachedDiskSpec_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *AttachedDiskSpec) GetExistingDisk() *ExistingDisk {
	if x, ok := x.GetType().(*AttachedDiskSpec_ExistingDisk); ok {
		return x.ExistingDisk
	}
	return nil
}

func (x *AttachedDiskSpec) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

type isAttachedDiskSpec_Type interface {
	isAttachedDiskSpec_Type()
}

type AttachedDiskSpec_ExistingDisk struct {
	ExistingDisk *ExistingDisk `protobuf:"bytes,2,opt,name=existing_disk,json=existingDisk,proto3,oneof"`
}

func (*AttachedDiskSpec_ExistingDisk) isAttachedDiskSpec_Type() {}

type ExistingDisk struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ExistingDisk) Reset() {
	*x = ExistingDisk{}
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExistingDisk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistingDisk) ProtoMessage() {}

func (x *ExistingDisk) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistingDisk.ProtoReflect.Descriptor instead.
func (*ExistingDisk) Descriptor() ([]byte, []int) {
	return file_nebius_compute_v1_instance_proto_rawDescGZIP(), []int{5}
}

func (x *ExistingDisk) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ExistingFilesystem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ExistingFilesystem) Reset() {
	*x = ExistingFilesystem{}
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ExistingFilesystem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExistingFilesystem) ProtoMessage() {}

func (x *ExistingFilesystem) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExistingFilesystem.ProtoReflect.Descriptor instead.
func (*ExistingFilesystem) Descriptor() ([]byte, []int) {
	return file_nebius_compute_v1_instance_proto_rawDescGZIP(), []int{6}
}

func (x *ExistingFilesystem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type AttachedFilesystemSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AttachMode AttachedFilesystemSpec_AttachMode `protobuf:"varint,1,opt,name=attach_mode,json=attachMode,proto3,enum=nebius.compute.v1.AttachedFilesystemSpec_AttachMode" json:"attach_mode,omitempty"`
	// Specifies the user-defined identifier, allowing to use it as a device in mount command.
	MountTag string `protobuf:"bytes,2,opt,name=mount_tag,json=mountTag,proto3" json:"mount_tag,omitempty"`
	// Types that are assignable to Type:
	//
	//	*AttachedFilesystemSpec_ExistingFilesystem
	Type isAttachedFilesystemSpec_Type `protobuf_oneof:"type"`
}

func (x *AttachedFilesystemSpec) Reset() {
	*x = AttachedFilesystemSpec{}
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AttachedFilesystemSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachedFilesystemSpec) ProtoMessage() {}

func (x *AttachedFilesystemSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachedFilesystemSpec.ProtoReflect.Descriptor instead.
func (*AttachedFilesystemSpec) Descriptor() ([]byte, []int) {
	return file_nebius_compute_v1_instance_proto_rawDescGZIP(), []int{7}
}

func (x *AttachedFilesystemSpec) GetAttachMode() AttachedFilesystemSpec_AttachMode {
	if x != nil {
		return x.AttachMode
	}
	return AttachedFilesystemSpec_UNSPECIFIED
}

func (x *AttachedFilesystemSpec) GetMountTag() string {
	if x != nil {
		return x.MountTag
	}
	return ""
}

func (m *AttachedFilesystemSpec) GetType() isAttachedFilesystemSpec_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *AttachedFilesystemSpec) GetExistingFilesystem() *ExistingFilesystem {
	if x, ok := x.GetType().(*AttachedFilesystemSpec_ExistingFilesystem); ok {
		return x.ExistingFilesystem
	}
	return nil
}

type isAttachedFilesystemSpec_Type interface {
	isAttachedFilesystemSpec_Type()
}

type AttachedFilesystemSpec_ExistingFilesystem struct {
	ExistingFilesystem *ExistingFilesystem `protobuf:"bytes,3,opt,name=existing_filesystem,json=existingFilesystem,proto3,oneof"`
}

func (*AttachedFilesystemSpec_ExistingFilesystem) isAttachedFilesystemSpec_Type() {}

type InstanceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State             InstanceStatus_InstanceState `protobuf:"varint,1,opt,name=state,proto3,enum=nebius.compute.v1.InstanceStatus_InstanceState" json:"state,omitempty"`
	NetworkInterfaces []*NetworkInterfaceStatus    `protobuf:"bytes,2,rep,name=network_interfaces,json=networkInterfaces,proto3" json:"network_interfaces,omitempty"`
	// Indicates whether there is an ongoing operation
	Reconciling bool `protobuf:"varint,5,opt,name=reconciling,proto3" json:"reconciling,omitempty"`
}

func (x *InstanceStatus) Reset() {
	*x = InstanceStatus{}
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InstanceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstanceStatus) ProtoMessage() {}

func (x *InstanceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_compute_v1_instance_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstanceStatus.ProtoReflect.Descriptor instead.
func (*InstanceStatus) Descriptor() ([]byte, []int) {
	return file_nebius_compute_v1_instance_proto_rawDescGZIP(), []int{8}
}

func (x *InstanceStatus) GetState() InstanceStatus_InstanceState {
	if x != nil {
		return x.State
	}
	return InstanceStatus_UNSPECIFIED
}

func (x *InstanceStatus) GetNetworkInterfaces() []*NetworkInterfaceStatus {
	if x != nil {
		return x.NetworkInterfaces
	}
	return nil
}

func (x *InstanceStatus) GetReconciling() bool {
	if x != nil {
		return x.Reconciling
	}
	return false
}

var File_nebius_compute_v1_instance_proto protoreflect.FileDescriptor

var file_nebius_compute_v1_instance_proto_rawDesc = []byte{
	0x0a, 0x20, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x11, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x29, 0x6e,
	0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31,
	0x2f, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d,
	0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x39, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x62,
	0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf7, 0x05, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x12, 0x32, 0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x04, 0xba, 0x4a, 0x01, 0x02, 0x52, 0x10, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x09, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63, 0x42,
	0x0a, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0xba, 0x4a, 0x01, 0x02, 0x52, 0x09, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x50, 0x0a, 0x0b, 0x67, 0x70, 0x75, 0x5f, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x65,
	0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x70, 0x75, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x42, 0x04, 0xba, 0x4a, 0x01, 0x02, 0x52, 0x0a, 0x67, 0x70,
	0x75, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x67, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x0f, 0xba,
	0x48, 0x08, 0xc8, 0x01, 0x01, 0x92, 0x01, 0x02, 0x10, 0x08, 0xba, 0x4a, 0x01, 0x02, 0x52, 0x11,
	0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x46, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x42, 0x04, 0xba, 0x4a, 0x01, 0x02, 0x52,
	0x08, 0x62, 0x6f, 0x6f, 0x74, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x56, 0x0a, 0x0f, 0x73, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44,
	0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x42, 0x08, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x10,
	0x08, 0x52, 0x0e, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x44, 0x69, 0x73, 0x6b,
	0x73, 0x12, 0x59, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65,
	0x63, 0x42, 0x0c, 0xba, 0x48, 0x05, 0x92, 0x01, 0x02, 0x10, 0x08, 0xba, 0x4a, 0x01, 0x02, 0x52,
	0x0b, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x3d, 0x0a, 0x14,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xba, 0x48, 0x06, 0x72,
	0x04, 0x18, 0x80, 0x80, 0x02, 0xc0, 0x4a, 0x01, 0x52, 0x11, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x49,
	0x6e, 0x69, 0x74, 0x55, 0x73, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x74, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x74,
	0x6f, 0x70, 0x70, 0x65, 0x64, 0x12, 0x58, 0x0a, 0x0f, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29,
	0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x42, 0x04, 0xba, 0x4a, 0x01, 0x02, 0x52,
	0x0e, 0x72, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22,
	0x5c, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x53, 0x70, 0x65, 0x63,
	0x12, 0x22, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74,
	0x66, 0x6f, 0x72, 0x6d, 0x12, 0x18, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x70, 0x72, 0x65, 0x73, 0x65, 0x74, 0x42, 0x0d,
	0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0x28, 0x0a,
	0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x47, 0x70, 0x75, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0xa6, 0x02, 0x0a, 0x10, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x44, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x12, 0x57, 0x0a, 0x0b,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2e, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75,
	0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x44, 0x69,
	0x73, 0x6b, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e,
	0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x6b, 0x48, 0x00, 0x52,
	0x0c, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x24, 0x0a,
	0x09, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xba, 0x48, 0x04, 0x72, 0x02, 0x18, 0x14, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x3c, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10,
	0x02, 0x42, 0x0d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01,
	0x22, 0x26, 0x0a, 0x0c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x73, 0x6b,
	0x12, 0x16, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x12, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x16,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8,
	0x01, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0xc3, 0x02, 0x0a, 0x16, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65,
	0x63, 0x12, 0x5d, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x34, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x42, 0x06, 0xba, 0x48,
	0x03, 0xc8, 0x01, 0x01, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x23, 0x0a, 0x09, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x06, 0xba, 0x48, 0x03, 0xc8, 0x01, 0x01, 0x52, 0x08, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x61, 0x67, 0x12, 0x58, 0x0a, 0x13, 0x65, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x48, 0x00, 0x52, 0x12, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22,
	0x3c, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0f, 0x0a,
	0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x0e, 0x0a,
	0x0a, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x02, 0x42, 0x0d, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x05, 0xba, 0x48, 0x02, 0x08, 0x01, 0x22, 0xe1, 0x02, 0x0a,
	0x0e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x45, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2f,
	0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x58, 0x0a, 0x12, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x70,
	0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x69,
	0x6e, 0x67, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e,
	0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x50, 0x44, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x54, 0x41, 0x52, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12,
	0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x54, 0x4f, 0x50, 0x50, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x54,
	0x4f, 0x50, 0x50, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x49, 0x4e, 0x47, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x08,
	0x2a, 0x2f, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45,
	0x43, 0x4f, 0x56, 0x45, 0x52, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10,
	0x01, 0x42, 0x5c, 0x0a, 0x18, 0x61, 0x69, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x70,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0d, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2f,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65, 0x62, 0x69, 0x75,
	0x73, 0x2f, 0x67, 0x6f, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x65,
	0x62, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x2f, 0x76, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_nebius_compute_v1_instance_proto_rawDescOnce sync.Once
	file_nebius_compute_v1_instance_proto_rawDescData = file_nebius_compute_v1_instance_proto_rawDesc
)

func file_nebius_compute_v1_instance_proto_rawDescGZIP() []byte {
	file_nebius_compute_v1_instance_proto_rawDescOnce.Do(func() {
		file_nebius_compute_v1_instance_proto_rawDescData = protoimpl.X.CompressGZIP(file_nebius_compute_v1_instance_proto_rawDescData)
	})
	return file_nebius_compute_v1_instance_proto_rawDescData
}

var file_nebius_compute_v1_instance_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_nebius_compute_v1_instance_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_nebius_compute_v1_instance_proto_goTypes = []any{
	(InstanceRecoveryPolicy)(0),            // 0: nebius.compute.v1.InstanceRecoveryPolicy
	(AttachedDiskSpec_AttachMode)(0),       // 1: nebius.compute.v1.AttachedDiskSpec.AttachMode
	(AttachedFilesystemSpec_AttachMode)(0), // 2: nebius.compute.v1.AttachedFilesystemSpec.AttachMode
	(InstanceStatus_InstanceState)(0),      // 3: nebius.compute.v1.InstanceStatus.InstanceState
	(*Instance)(nil),                       // 4: nebius.compute.v1.Instance
	(*InstanceSpec)(nil),                   // 5: nebius.compute.v1.InstanceSpec
	(*ResourcesSpec)(nil),                  // 6: nebius.compute.v1.ResourcesSpec
	(*InstanceGpuClusterSpec)(nil),         // 7: nebius.compute.v1.InstanceGpuClusterSpec
	(*AttachedDiskSpec)(nil),               // 8: nebius.compute.v1.AttachedDiskSpec
	(*ExistingDisk)(nil),                   // 9: nebius.compute.v1.ExistingDisk
	(*ExistingFilesystem)(nil),             // 10: nebius.compute.v1.ExistingFilesystem
	(*AttachedFilesystemSpec)(nil),         // 11: nebius.compute.v1.AttachedFilesystemSpec
	(*InstanceStatus)(nil),                 // 12: nebius.compute.v1.InstanceStatus
	(*v1.ResourceMetadata)(nil),            // 13: nebius.common.v1.ResourceMetadata
	(*NetworkInterfaceSpec)(nil),           // 14: nebius.compute.v1.NetworkInterfaceSpec
	(*NetworkInterfaceStatus)(nil),         // 15: nebius.compute.v1.NetworkInterfaceStatus
}
var file_nebius_compute_v1_instance_proto_depIdxs = []int32{
	13, // 0: nebius.compute.v1.Instance.metadata:type_name -> nebius.common.v1.ResourceMetadata
	5,  // 1: nebius.compute.v1.Instance.spec:type_name -> nebius.compute.v1.InstanceSpec
	12, // 2: nebius.compute.v1.Instance.status:type_name -> nebius.compute.v1.InstanceStatus
	6,  // 3: nebius.compute.v1.InstanceSpec.resources:type_name -> nebius.compute.v1.ResourcesSpec
	7,  // 4: nebius.compute.v1.InstanceSpec.gpu_cluster:type_name -> nebius.compute.v1.InstanceGpuClusterSpec
	14, // 5: nebius.compute.v1.InstanceSpec.network_interfaces:type_name -> nebius.compute.v1.NetworkInterfaceSpec
	8,  // 6: nebius.compute.v1.InstanceSpec.boot_disk:type_name -> nebius.compute.v1.AttachedDiskSpec
	8,  // 7: nebius.compute.v1.InstanceSpec.secondary_disks:type_name -> nebius.compute.v1.AttachedDiskSpec
	11, // 8: nebius.compute.v1.InstanceSpec.filesystems:type_name -> nebius.compute.v1.AttachedFilesystemSpec
	0,  // 9: nebius.compute.v1.InstanceSpec.recovery_policy:type_name -> nebius.compute.v1.InstanceRecoveryPolicy
	1,  // 10: nebius.compute.v1.AttachedDiskSpec.attach_mode:type_name -> nebius.compute.v1.AttachedDiskSpec.AttachMode
	9,  // 11: nebius.compute.v1.AttachedDiskSpec.existing_disk:type_name -> nebius.compute.v1.ExistingDisk
	2,  // 12: nebius.compute.v1.AttachedFilesystemSpec.attach_mode:type_name -> nebius.compute.v1.AttachedFilesystemSpec.AttachMode
	10, // 13: nebius.compute.v1.AttachedFilesystemSpec.existing_filesystem:type_name -> nebius.compute.v1.ExistingFilesystem
	3,  // 14: nebius.compute.v1.InstanceStatus.state:type_name -> nebius.compute.v1.InstanceStatus.InstanceState
	15, // 15: nebius.compute.v1.InstanceStatus.network_interfaces:type_name -> nebius.compute.v1.NetworkInterfaceStatus
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_nebius_compute_v1_instance_proto_init() }
func file_nebius_compute_v1_instance_proto_init() {
	if File_nebius_compute_v1_instance_proto != nil {
		return
	}
	file_nebius_compute_v1_network_interface_proto_init()
	file_nebius_compute_v1_instance_proto_msgTypes[2].OneofWrappers = []any{
		(*ResourcesSpec_Preset)(nil),
	}
	file_nebius_compute_v1_instance_proto_msgTypes[4].OneofWrappers = []any{
		(*AttachedDiskSpec_ExistingDisk)(nil),
	}
	file_nebius_compute_v1_instance_proto_msgTypes[7].OneofWrappers = []any{
		(*AttachedFilesystemSpec_ExistingFilesystem)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_nebius_compute_v1_instance_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nebius_compute_v1_instance_proto_goTypes,
		DependencyIndexes: file_nebius_compute_v1_instance_proto_depIdxs,
		EnumInfos:         file_nebius_compute_v1_instance_proto_enumTypes,
		MessageInfos:      file_nebius_compute_v1_instance_proto_msgTypes,
	}.Build()
	File_nebius_compute_v1_instance_proto = out.File
	file_nebius_compute_v1_instance_proto_rawDesc = nil
	file_nebius_compute_v1_instance_proto_goTypes = nil
	file_nebius_compute_v1_instance_proto_depIdxs = nil
}
