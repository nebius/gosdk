// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: nebius/compute/v1/gpu_cluster_service.proto

package v1

import (
	context "context"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GpuClusterService_Get_FullMethodName                    = "/nebius.compute.v1.GpuClusterService/Get"
	GpuClusterService_GetByName_FullMethodName              = "/nebius.compute.v1.GpuClusterService/GetByName"
	GpuClusterService_List_FullMethodName                   = "/nebius.compute.v1.GpuClusterService/List"
	GpuClusterService_Create_FullMethodName                 = "/nebius.compute.v1.GpuClusterService/Create"
	GpuClusterService_Update_FullMethodName                 = "/nebius.compute.v1.GpuClusterService/Update"
	GpuClusterService_Delete_FullMethodName                 = "/nebius.compute.v1.GpuClusterService/Delete"
	GpuClusterService_ListOperationsByParent_FullMethodName = "/nebius.compute.v1.GpuClusterService/ListOperationsByParent"
)

// GpuClusterServiceClient is the client API for GpuClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GpuClusterServiceClient interface {
	Get(ctx context.Context, in *GetGpuClusterRequest, opts ...grpc.CallOption) (*GpuCluster, error)
	GetByName(ctx context.Context, in *v1.GetByNameRequest, opts ...grpc.CallOption) (*GpuCluster, error)
	List(ctx context.Context, in *ListGpuClustersRequest, opts ...grpc.CallOption) (*ListGpuClustersResponse, error)
	Create(ctx context.Context, in *CreateGpuClusterRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Update(ctx context.Context, in *UpdateGpuClusterRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Delete(ctx context.Context, in *DeleteGpuClusterRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	ListOperationsByParent(ctx context.Context, in *ListOperationsByParentRequest, opts ...grpc.CallOption) (*v1.ListOperationsResponse, error)
}

type gpuClusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGpuClusterServiceClient(cc grpc.ClientConnInterface) GpuClusterServiceClient {
	return &gpuClusterServiceClient{cc}
}

func (c *gpuClusterServiceClient) Get(ctx context.Context, in *GetGpuClusterRequest, opts ...grpc.CallOption) (*GpuCluster, error) {
	out := new(GpuCluster)
	err := c.cc.Invoke(ctx, GpuClusterService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpuClusterServiceClient) GetByName(ctx context.Context, in *v1.GetByNameRequest, opts ...grpc.CallOption) (*GpuCluster, error) {
	out := new(GpuCluster)
	err := c.cc.Invoke(ctx, GpuClusterService_GetByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpuClusterServiceClient) List(ctx context.Context, in *ListGpuClustersRequest, opts ...grpc.CallOption) (*ListGpuClustersResponse, error) {
	out := new(ListGpuClustersResponse)
	err := c.cc.Invoke(ctx, GpuClusterService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpuClusterServiceClient) Create(ctx context.Context, in *CreateGpuClusterRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, GpuClusterService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpuClusterServiceClient) Update(ctx context.Context, in *UpdateGpuClusterRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, GpuClusterService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpuClusterServiceClient) Delete(ctx context.Context, in *DeleteGpuClusterRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, GpuClusterService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gpuClusterServiceClient) ListOperationsByParent(ctx context.Context, in *ListOperationsByParentRequest, opts ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	out := new(v1.ListOperationsResponse)
	err := c.cc.Invoke(ctx, GpuClusterService_ListOperationsByParent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GpuClusterServiceServer is the server API for GpuClusterService service.
// All implementations should embed UnimplementedGpuClusterServiceServer
// for forward compatibility
type GpuClusterServiceServer interface {
	Get(context.Context, *GetGpuClusterRequest) (*GpuCluster, error)
	GetByName(context.Context, *v1.GetByNameRequest) (*GpuCluster, error)
	List(context.Context, *ListGpuClustersRequest) (*ListGpuClustersResponse, error)
	Create(context.Context, *CreateGpuClusterRequest) (*v1.Operation, error)
	Update(context.Context, *UpdateGpuClusterRequest) (*v1.Operation, error)
	Delete(context.Context, *DeleteGpuClusterRequest) (*v1.Operation, error)
	ListOperationsByParent(context.Context, *ListOperationsByParentRequest) (*v1.ListOperationsResponse, error)
}

// UnimplementedGpuClusterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedGpuClusterServiceServer struct {
}

func (UnimplementedGpuClusterServiceServer) Get(context.Context, *GetGpuClusterRequest) (*GpuCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedGpuClusterServiceServer) GetByName(context.Context, *v1.GetByNameRequest) (*GpuCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedGpuClusterServiceServer) List(context.Context, *ListGpuClustersRequest) (*ListGpuClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedGpuClusterServiceServer) Create(context.Context, *CreateGpuClusterRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedGpuClusterServiceServer) Update(context.Context, *UpdateGpuClusterRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedGpuClusterServiceServer) Delete(context.Context, *DeleteGpuClusterRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedGpuClusterServiceServer) ListOperationsByParent(context.Context, *ListOperationsByParentRequest) (*v1.ListOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperationsByParent not implemented")
}

// UnsafeGpuClusterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GpuClusterServiceServer will
// result in compilation errors.
type UnsafeGpuClusterServiceServer interface {
	mustEmbedUnimplementedGpuClusterServiceServer()
}

func RegisterGpuClusterServiceServer(s grpc.ServiceRegistrar, srv GpuClusterServiceServer) {
	s.RegisterService(&GpuClusterService_ServiceDesc, srv)
}

func _GpuClusterService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGpuClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuClusterServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GpuClusterService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuClusterServiceServer).Get(ctx, req.(*GetGpuClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpuClusterService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuClusterServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GpuClusterService_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuClusterServiceServer).GetByName(ctx, req.(*v1.GetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpuClusterService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListGpuClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuClusterServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GpuClusterService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuClusterServiceServer).List(ctx, req.(*ListGpuClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpuClusterService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGpuClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuClusterServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GpuClusterService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuClusterServiceServer).Create(ctx, req.(*CreateGpuClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpuClusterService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGpuClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuClusterServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GpuClusterService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuClusterServiceServer).Update(ctx, req.(*UpdateGpuClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpuClusterService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGpuClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuClusterServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GpuClusterService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuClusterServiceServer).Delete(ctx, req.(*DeleteGpuClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GpuClusterService_ListOperationsByParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOperationsByParentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GpuClusterServiceServer).ListOperationsByParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GpuClusterService_ListOperationsByParent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GpuClusterServiceServer).ListOperationsByParent(ctx, req.(*ListOperationsByParentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GpuClusterService_ServiceDesc is the grpc.ServiceDesc for GpuClusterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GpuClusterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebius.compute.v1.GpuClusterService",
	HandlerType: (*GpuClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _GpuClusterService_Get_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _GpuClusterService_GetByName_Handler,
		},
		{
			MethodName: "List",
			Handler:    _GpuClusterService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _GpuClusterService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _GpuClusterService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _GpuClusterService_Delete_Handler,
		},
		{
			MethodName: "ListOperationsByParent",
			Handler:    _GpuClusterService_ListOperationsByParent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebius/compute/v1/gpu_cluster_service.proto",
}
