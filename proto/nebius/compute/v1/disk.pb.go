// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.3
// source: nebius/compute/v1/disk.proto

package v1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/nebius/gosdk/proto/nebius"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// the list of available types will be clarified later, it is not final version
type DiskSpec_DiskType int32

const (
	DiskSpec_UNSPECIFIED                DiskSpec_DiskType = 0
	DiskSpec_NETWORK_SSD                DiskSpec_DiskType = 1
	DiskSpec_NETWORK_HDD                DiskSpec_DiskType = 2
	DiskSpec_NETWORK_SSD_NON_REPLICATED DiskSpec_DiskType = 3
	DiskSpec_NETWORK_SSD_IO_M3          DiskSpec_DiskType = 4
)

// Enum value maps for DiskSpec_DiskType.
var (
	DiskSpec_DiskType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "NETWORK_SSD",
		2: "NETWORK_HDD",
		3: "NETWORK_SSD_NON_REPLICATED",
		4: "NETWORK_SSD_IO_M3",
	}
	DiskSpec_DiskType_value = map[string]int32{
		"UNSPECIFIED":                0,
		"NETWORK_SSD":                1,
		"NETWORK_HDD":                2,
		"NETWORK_SSD_NON_REPLICATED": 3,
		"NETWORK_SSD_IO_M3":          4,
	}
)

func (x DiskSpec_DiskType) Enum() *DiskSpec_DiskType {
	p := new(DiskSpec_DiskType)
	*p = x
	return p
}

func (x DiskSpec_DiskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskSpec_DiskType) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_compute_v1_disk_proto_enumTypes[0].Descriptor()
}

func (DiskSpec_DiskType) Type() protoreflect.EnumType {
	return &file_nebius_compute_v1_disk_proto_enumTypes[0]
}

func (x DiskSpec_DiskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskSpec_DiskType.Descriptor instead.
func (DiskSpec_DiskType) EnumDescriptor() ([]byte, []int) {
	return file_nebius_compute_v1_disk_proto_rawDescGZIP(), []int{1, 0}
}

type DiskStatus_State int32

const (
	DiskStatus_UNSPECIFIED DiskStatus_State = 0
	DiskStatus_CREATING    DiskStatus_State = 1
	DiskStatus_READY       DiskStatus_State = 2
	DiskStatus_UPDATING    DiskStatus_State = 3
	DiskStatus_DELETING    DiskStatus_State = 4
	// Indicates that error happened during disk creation, and the disk cannot be recovered.
	DiskStatus_ERROR DiskStatus_State = 5
	// Indicates that an error has occurred during the disk's life cycle, and the disk is broken or unhealthy, but can still be recovered.
	DiskStatus_BROKEN DiskStatus_State = 6
)

// Enum value maps for DiskStatus_State.
var (
	DiskStatus_State_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "CREATING",
		2: "READY",
		3: "UPDATING",
		4: "DELETING",
		5: "ERROR",
		6: "BROKEN",
	}
	DiskStatus_State_value = map[string]int32{
		"UNSPECIFIED": 0,
		"CREATING":    1,
		"READY":       2,
		"UPDATING":    3,
		"DELETING":    4,
		"ERROR":       5,
		"BROKEN":      6,
	}
)

func (x DiskStatus_State) Enum() *DiskStatus_State {
	p := new(DiskStatus_State)
	*p = x
	return p
}

func (x DiskStatus_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskStatus_State) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_compute_v1_disk_proto_enumTypes[1].Descriptor()
}

func (DiskStatus_State) Type() protoreflect.EnumType {
	return &file_nebius_compute_v1_disk_proto_enumTypes[1]
}

func (x DiskStatus_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskStatus_State.Descriptor instead.
func (DiskStatus_State) EnumDescriptor() ([]byte, []int) {
	return file_nebius_compute_v1_disk_proto_rawDescGZIP(), []int{3, 0}
}

type DiskStatus_SourceImageCPUArchitecture int32

const (
	DiskStatus_SOURCE_IMAGE_CPU_UNSPECIFIED DiskStatus_SourceImageCPUArchitecture = 0
	DiskStatus_AMD64                        DiskStatus_SourceImageCPUArchitecture = 1
	DiskStatus_ARM64                        DiskStatus_SourceImageCPUArchitecture = 2
)

// Enum value maps for DiskStatus_SourceImageCPUArchitecture.
var (
	DiskStatus_SourceImageCPUArchitecture_name = map[int32]string{
		0: "SOURCE_IMAGE_CPU_UNSPECIFIED",
		1: "AMD64",
		2: "ARM64",
	}
	DiskStatus_SourceImageCPUArchitecture_value = map[string]int32{
		"SOURCE_IMAGE_CPU_UNSPECIFIED": 0,
		"AMD64":                        1,
		"ARM64":                        2,
	}
)

func (x DiskStatus_SourceImageCPUArchitecture) Enum() *DiskStatus_SourceImageCPUArchitecture {
	p := new(DiskStatus_SourceImageCPUArchitecture)
	*p = x
	return p
}

func (x DiskStatus_SourceImageCPUArchitecture) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskStatus_SourceImageCPUArchitecture) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_compute_v1_disk_proto_enumTypes[2].Descriptor()
}

func (DiskStatus_SourceImageCPUArchitecture) Type() protoreflect.EnumType {
	return &file_nebius_compute_v1_disk_proto_enumTypes[2]
}

func (x DiskStatus_SourceImageCPUArchitecture) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskStatus_SourceImageCPUArchitecture.Descriptor instead.
func (DiskStatus_SourceImageCPUArchitecture) EnumDescriptor() ([]byte, []int) {
	return file_nebius_compute_v1_disk_proto_rawDescGZIP(), []int{3, 1}
}

type DiskEncryption_DiskEncryptionType int32

const (
	// No encryption is applied unless explicitly specified.
	DiskEncryption_DISK_ENCRYPTION_UNSPECIFIED DiskEncryption_DiskEncryptionType = 0
	// Enables encryption using the platform's default root key from KMS.
	// Available for blank disks only.
	// Available for disks with NETWORK_SSD_NON_REPLICATED and NETWORK_SSD_IO_M3 types only.
	DiskEncryption_DISK_ENCRYPTION_MANAGED DiskEncryption_DiskEncryptionType = 1
)

// Enum value maps for DiskEncryption_DiskEncryptionType.
var (
	DiskEncryption_DiskEncryptionType_name = map[int32]string{
		0: "DISK_ENCRYPTION_UNSPECIFIED",
		1: "DISK_ENCRYPTION_MANAGED",
	}
	DiskEncryption_DiskEncryptionType_value = map[string]int32{
		"DISK_ENCRYPTION_UNSPECIFIED": 0,
		"DISK_ENCRYPTION_MANAGED":     1,
	}
)

func (x DiskEncryption_DiskEncryptionType) Enum() *DiskEncryption_DiskEncryptionType {
	p := new(DiskEncryption_DiskEncryptionType)
	*p = x
	return p
}

func (x DiskEncryption_DiskEncryptionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DiskEncryption_DiskEncryptionType) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_compute_v1_disk_proto_enumTypes[3].Descriptor()
}

func (DiskEncryption_DiskEncryptionType) Type() protoreflect.EnumType {
	return &file_nebius_compute_v1_disk_proto_enumTypes[3]
}

func (x DiskEncryption_DiskEncryptionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DiskEncryption_DiskEncryptionType.Descriptor instead.
func (DiskEncryption_DiskEncryptionType) EnumDescriptor() ([]byte, []int) {
	return file_nebius_compute_v1_disk_proto_rawDescGZIP(), []int{4, 0}
}

type Disk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Metadata      *v1.ResourceMetadata   `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Spec          *DiskSpec              `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	Status        *DiskStatus            `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Disk) Reset() {
	*x = Disk{}
	mi := &file_nebius_compute_v1_disk_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Disk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Disk) ProtoMessage() {}

func (x *Disk) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_compute_v1_disk_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Disk.ProtoReflect.Descriptor instead.
func (*Disk) Descriptor() ([]byte, []int) {
	return file_nebius_compute_v1_disk_proto_rawDescGZIP(), []int{0}
}

func (x *Disk) GetMetadata() *v1.ResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Disk) GetSpec() *DiskSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *Disk) GetStatus() *DiskStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type DiskSpec struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Size of the disk. The size must be within the limits for the selected disk type.
	// For current limits, see https://docs.nebius.com/compute/storage/types#disks-types-comparison
	//
	// Types that are valid to be assigned to Size:
	//
	//	*DiskSpec_SizeBytes
	//	*DiskSpec_SizeKibibytes
	//	*DiskSpec_SizeMebibytes
	//	*DiskSpec_SizeGibibytes
	Size isDiskSpec_Size `protobuf_oneof:"size"`
	// Block size in bytes.
	// The block size must be a power of two between 4096 bytes (4 KiB) and 131072 bytes (128 KiB).
	// The default value is 4096 bytes (4 KiB).
	BlockSizeBytes int64 `protobuf:"varint,5,opt,name=block_size_bytes,json=blockSizeBytes,proto3" json:"block_size_bytes,omitempty"`
	// The type of disk defines the performance and reliability characteristics of the block device.
	// For details, see https://docs.nebius.com/compute/storage/types#disks-types
	Type DiskSpec_DiskType `protobuf:"varint,6,opt,name=type,proto3,enum=nebius.compute.v1.DiskSpec_DiskType" json:"type,omitempty"`
	// Source for disk creation.
	// Boot disk must be created from an image https://docs.nebius.com/compute/storage/manage#boot
	// Additional disks can be created as an empty volume https://docs.nebius.com/compute/storage/manage#additional
	//
	// Types that are valid to be assigned to Source:
	//
	//	*DiskSpec_SourceImageId
	//	*DiskSpec_SourceImageFamily
	Source isDiskSpec_Source `protobuf_oneof:"source"`
	// Defines how data on the disk is encrypted. By default, no encryption is applied.
	DiskEncryption *DiskEncryption `protobuf:"bytes,11,opt,name=disk_encryption,json=diskEncryption,proto3" json:"disk_encryption,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *DiskSpec) Reset() {
	*x = DiskSpec{}
	mi := &file_nebius_compute_v1_disk_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskSpec) ProtoMessage() {}

func (x *DiskSpec) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_compute_v1_disk_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskSpec.ProtoReflect.Descriptor instead.
func (*DiskSpec) Descriptor() ([]byte, []int) {
	return file_nebius_compute_v1_disk_proto_rawDescGZIP(), []int{1}
}

func (x *DiskSpec) GetSize() isDiskSpec_Size {
	if x != nil {
		return x.Size
	}
	return nil
}

func (x *DiskSpec) GetSizeBytes() int64 {
	if x != nil {
		if x, ok := x.Size.(*DiskSpec_SizeBytes); ok {
			return x.SizeBytes
		}
	}
	return 0
}

func (x *DiskSpec) GetSizeKibibytes() int64 {
	if x != nil {
		if x, ok := x.Size.(*DiskSpec_SizeKibibytes); ok {
			return x.SizeKibibytes
		}
	}
	return 0
}

func (x *DiskSpec) GetSizeMebibytes() int64 {
	if x != nil {
		if x, ok := x.Size.(*DiskSpec_SizeMebibytes); ok {
			return x.SizeMebibytes
		}
	}
	return 0
}

func (x *DiskSpec) GetSizeGibibytes() int64 {
	if x != nil {
		if x, ok := x.Size.(*DiskSpec_SizeGibibytes); ok {
			return x.SizeGibibytes
		}
	}
	return 0
}

func (x *DiskSpec) GetBlockSizeBytes() int64 {
	if x != nil {
		return x.BlockSizeBytes
	}
	return 0
}

func (x *DiskSpec) GetType() DiskSpec_DiskType {
	if x != nil {
		return x.Type
	}
	return DiskSpec_UNSPECIFIED
}

func (x *DiskSpec) GetSource() isDiskSpec_Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *DiskSpec) GetSourceImageId() string {
	if x != nil {
		if x, ok := x.Source.(*DiskSpec_SourceImageId); ok {
			return x.SourceImageId
		}
	}
	return ""
}

func (x *DiskSpec) GetSourceImageFamily() *SourceImageFamily {
	if x != nil {
		if x, ok := x.Source.(*DiskSpec_SourceImageFamily); ok {
			return x.SourceImageFamily
		}
	}
	return nil
}

func (x *DiskSpec) GetDiskEncryption() *DiskEncryption {
	if x != nil {
		return x.DiskEncryption
	}
	return nil
}

type isDiskSpec_Size interface {
	isDiskSpec_Size()
}

type DiskSpec_SizeBytes struct {
	SizeBytes int64 `protobuf:"varint,1,opt,name=size_bytes,json=sizeBytes,proto3,oneof"`
}

type DiskSpec_SizeKibibytes struct {
	SizeKibibytes int64 `protobuf:"varint,2,opt,name=size_kibibytes,json=sizeKibibytes,proto3,oneof"`
}

type DiskSpec_SizeMebibytes struct {
	SizeMebibytes int64 `protobuf:"varint,3,opt,name=size_mebibytes,json=sizeMebibytes,proto3,oneof"`
}

type DiskSpec_SizeGibibytes struct {
	SizeGibibytes int64 `protobuf:"varint,4,opt,name=size_gibibytes,json=sizeGibibytes,proto3,oneof"`
}

func (*DiskSpec_SizeBytes) isDiskSpec_Size() {}

func (*DiskSpec_SizeKibibytes) isDiskSpec_Size() {}

func (*DiskSpec_SizeMebibytes) isDiskSpec_Size() {}

func (*DiskSpec_SizeGibibytes) isDiskSpec_Size() {}

type isDiskSpec_Source interface {
	isDiskSpec_Source()
}

type DiskSpec_SourceImageId struct {
	SourceImageId string `protobuf:"bytes,8,opt,name=source_image_id,json=sourceImageId,proto3,oneof"`
}

type DiskSpec_SourceImageFamily struct {
	SourceImageFamily *SourceImageFamily `protobuf:"bytes,10,opt,name=source_image_family,json=sourceImageFamily,proto3,oneof"`
}

func (*DiskSpec_SourceImageId) isDiskSpec_Source() {}

func (*DiskSpec_SourceImageFamily) isDiskSpec_Source() {}

type SourceImageFamily struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImageFamily   string                 `protobuf:"bytes,1,opt,name=image_family,json=imageFamily,proto3" json:"image_family,omitempty"`
	ParentId      string                 `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SourceImageFamily) Reset() {
	*x = SourceImageFamily{}
	mi := &file_nebius_compute_v1_disk_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SourceImageFamily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceImageFamily) ProtoMessage() {}

func (x *SourceImageFamily) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_compute_v1_disk_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceImageFamily.ProtoReflect.Descriptor instead.
func (*SourceImageFamily) Descriptor() ([]byte, []int) {
	return file_nebius_compute_v1_disk_proto_rawDescGZIP(), []int{2}
}

func (x *SourceImageFamily) GetImageFamily() string {
	if x != nil {
		return x.ImageFamily
	}
	return ""
}

func (x *SourceImageFamily) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

type DiskStatus struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	State               DiskStatus_State       `protobuf:"varint,1,opt,name=state,proto3,enum=nebius.compute.v1.DiskStatus_State" json:"state,omitempty"`
	StateDescription    string                 `protobuf:"bytes,2,opt,name=state_description,json=stateDescription,proto3" json:"state_description,omitempty"`
	ReadWriteAttachment string                 `protobuf:"bytes,3,opt,name=read_write_attachment,json=readWriteAttachment,proto3" json:"read_write_attachment,omitempty"`
	ReadOnlyAttachments []string               `protobuf:"bytes,4,rep,name=read_only_attachments,json=readOnlyAttachments,proto3" json:"read_only_attachments,omitempty"`
	SourceImageId       string                 `protobuf:"bytes,5,opt,name=source_image_id,json=sourceImageId,proto3" json:"source_image_id,omitempty"`
	SizeBytes           int64                  `protobuf:"varint,6,opt,name=size_bytes,json=sizeBytes,proto3" json:"size_bytes,omitempty"`
	// Indicates whether there is an ongoing operation
	Reconciling                bool                                  `protobuf:"varint,7,opt,name=reconciling,proto3" json:"reconciling,omitempty"`
	BlockSizeBytes             int64                                 `protobuf:"varint,8,opt,name=block_size_bytes,json=blockSizeBytes,proto3" json:"block_size_bytes,omitempty"`
	SourceImageCpuArchitecture DiskStatus_SourceImageCPUArchitecture `protobuf:"varint,9,opt,name=source_image_cpu_architecture,json=sourceImageCpuArchitecture,proto3,enum=nebius.compute.v1.DiskStatus_SourceImageCPUArchitecture" json:"source_image_cpu_architecture,omitempty"`
	unknownFields              protoimpl.UnknownFields
	sizeCache                  protoimpl.SizeCache
}

func (x *DiskStatus) Reset() {
	*x = DiskStatus{}
	mi := &file_nebius_compute_v1_disk_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskStatus) ProtoMessage() {}

func (x *DiskStatus) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_compute_v1_disk_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskStatus.ProtoReflect.Descriptor instead.
func (*DiskStatus) Descriptor() ([]byte, []int) {
	return file_nebius_compute_v1_disk_proto_rawDescGZIP(), []int{3}
}

func (x *DiskStatus) GetState() DiskStatus_State {
	if x != nil {
		return x.State
	}
	return DiskStatus_UNSPECIFIED
}

func (x *DiskStatus) GetStateDescription() string {
	if x != nil {
		return x.StateDescription
	}
	return ""
}

func (x *DiskStatus) GetReadWriteAttachment() string {
	if x != nil {
		return x.ReadWriteAttachment
	}
	return ""
}

func (x *DiskStatus) GetReadOnlyAttachments() []string {
	if x != nil {
		return x.ReadOnlyAttachments
	}
	return nil
}

func (x *DiskStatus) GetSourceImageId() string {
	if x != nil {
		return x.SourceImageId
	}
	return ""
}

func (x *DiskStatus) GetSizeBytes() int64 {
	if x != nil {
		return x.SizeBytes
	}
	return 0
}

func (x *DiskStatus) GetReconciling() bool {
	if x != nil {
		return x.Reconciling
	}
	return false
}

func (x *DiskStatus) GetBlockSizeBytes() int64 {
	if x != nil {
		return x.BlockSizeBytes
	}
	return 0
}

func (x *DiskStatus) GetSourceImageCpuArchitecture() DiskStatus_SourceImageCPUArchitecture {
	if x != nil {
		return x.SourceImageCpuArchitecture
	}
	return DiskStatus_SOURCE_IMAGE_CPU_UNSPECIFIED
}

type DiskEncryption struct {
	state         protoimpl.MessageState            `protogen:"open.v1"`
	Type          DiskEncryption_DiskEncryptionType `protobuf:"varint,1,opt,name=type,proto3,enum=nebius.compute.v1.DiskEncryption_DiskEncryptionType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DiskEncryption) Reset() {
	*x = DiskEncryption{}
	mi := &file_nebius_compute_v1_disk_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DiskEncryption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskEncryption) ProtoMessage() {}

func (x *DiskEncryption) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_compute_v1_disk_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskEncryption.ProtoReflect.Descriptor instead.
func (*DiskEncryption) Descriptor() ([]byte, []int) {
	return file_nebius_compute_v1_disk_proto_rawDescGZIP(), []int{4}
}

func (x *DiskEncryption) GetType() DiskEncryption_DiskEncryptionType {
	if x != nil {
		return x.Type
	}
	return DiskEncryption_DISK_ENCRYPTION_UNSPECIFIED
}

var File_nebius_compute_v1_disk_proto protoreflect.FileDescriptor

const file_nebius_compute_v1_disk_proto_rawDesc = "" +
	"\n" +
	"\x1cnebius/compute/v1/disk.proto\x12\x11nebius.compute.v1\x1a\x1bbuf/validate/validate.proto\x1a\x1fnebius/common/v1/metadata.proto\x1a\x18nebius/annotations.proto\"\xae\x01\n" +
	"\x04Disk\x12>\n" +
	"\bmetadata\x18\x01 \x01(\v2\".nebius.common.v1.ResourceMetadataR\bmetadata\x12/\n" +
	"\x04spec\x18\x02 \x01(\v2\x1b.nebius.compute.v1.DiskSpecR\x04spec\x125\n" +
	"\x06status\x18\x03 \x01(\v2\x1d.nebius.compute.v1.DiskStatusR\x06status\"\x97\x05\n" +
	"\bDiskSpec\x12\x1f\n" +
	"\n" +
	"size_bytes\x18\x01 \x01(\x03H\x00R\tsizeBytes\x12'\n" +
	"\x0esize_kibibytes\x18\x02 \x01(\x03H\x00R\rsizeKibibytes\x12'\n" +
	"\x0esize_mebibytes\x18\x03 \x01(\x03H\x00R\rsizeMebibytes\x12'\n" +
	"\x0esize_gibibytes\x18\x04 \x01(\x03H\x00R\rsizeGibibytes\x12.\n" +
	"\x10block_size_bytes\x18\x05 \x01(\x03B\x04\xbaJ\x01\x02R\x0eblockSizeBytes\x12D\n" +
	"\x04type\x18\x06 \x01(\x0e2$.nebius.compute.v1.DiskSpec.DiskTypeB\n" +
	"\xbaH\x03\xc8\x01\x01\xbaJ\x01\x02R\x04type\x12.\n" +
	"\x0fsource_image_id\x18\b \x01(\tB\x04\xbaJ\x01\x02H\x01R\rsourceImageId\x12\\\n" +
	"\x13source_image_family\x18\n" +
	" \x01(\v2$.nebius.compute.v1.SourceImageFamilyB\x04\xbaJ\x01\x02H\x01R\x11sourceImageFamily\x12P\n" +
	"\x0fdisk_encryption\x18\v \x01(\v2!.nebius.compute.v1.DiskEncryptionB\x04\xbaJ\x01\x02R\x0ediskEncryption\"t\n" +
	"\bDiskType\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\x0f\n" +
	"\vNETWORK_SSD\x10\x01\x12\x0f\n" +
	"\vNETWORK_HDD\x10\x02\x12\x1e\n" +
	"\x1aNETWORK_SSD_NON_REPLICATED\x10\x03\x12\x15\n" +
	"\x11NETWORK_SSD_IO_M3\x10\x04B\r\n" +
	"\x04size\x12\x05\xbaH\x02\b\x01B\b\n" +
	"\x06sourceJ\x04\b\a\x10\bJ\x04\b\t\x10\n" +
	"\"[\n" +
	"\x11SourceImageFamily\x12)\n" +
	"\fimage_family\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\vimageFamily\x12\x1b\n" +
	"\tparent_id\x18\x02 \x01(\tR\bparentId\"\xa8\x05\n" +
	"\n" +
	"DiskStatus\x129\n" +
	"\x05state\x18\x01 \x01(\x0e2#.nebius.compute.v1.DiskStatus.StateR\x05state\x12+\n" +
	"\x11state_description\x18\x02 \x01(\tR\x10stateDescription\x122\n" +
	"\x15read_write_attachment\x18\x03 \x01(\tR\x13readWriteAttachment\x122\n" +
	"\x15read_only_attachments\x18\x04 \x03(\tR\x13readOnlyAttachments\x12&\n" +
	"\x0fsource_image_id\x18\x05 \x01(\tR\rsourceImageId\x12\x1d\n" +
	"\n" +
	"size_bytes\x18\x06 \x01(\x03R\tsizeBytes\x12 \n" +
	"\vreconciling\x18\a \x01(\bR\vreconciling\x12(\n" +
	"\x10block_size_bytes\x18\b \x01(\x03R\x0eblockSizeBytes\x12{\n" +
	"\x1dsource_image_cpu_architecture\x18\t \x01(\x0e28.nebius.compute.v1.DiskStatus.SourceImageCPUArchitectureR\x1asourceImageCpuArchitecture\"d\n" +
	"\x05State\x12\x0f\n" +
	"\vUNSPECIFIED\x10\x00\x12\f\n" +
	"\bCREATING\x10\x01\x12\t\n" +
	"\x05READY\x10\x02\x12\f\n" +
	"\bUPDATING\x10\x03\x12\f\n" +
	"\bDELETING\x10\x04\x12\t\n" +
	"\x05ERROR\x10\x05\x12\n" +
	"\n" +
	"\x06BROKEN\x10\x06\"T\n" +
	"\x1aSourceImageCPUArchitecture\x12 \n" +
	"\x1cSOURCE_IMAGE_CPU_UNSPECIFIED\x10\x00\x12\t\n" +
	"\x05AMD64\x10\x01\x12\t\n" +
	"\x05ARM64\x10\x02\"\xae\x01\n" +
	"\x0eDiskEncryption\x12H\n" +
	"\x04type\x18\x01 \x01(\x0e24.nebius.compute.v1.DiskEncryption.DiskEncryptionTypeR\x04type\"R\n" +
	"\x12DiskEncryptionType\x12\x1f\n" +
	"\x1bDISK_ENCRYPTION_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17DISK_ENCRYPTION_MANAGED\x10\x01BX\n" +
	"\x18ai.nebius.pub.compute.v1B\tDiskProtoP\x01Z/github.com/nebius/gosdk/proto/nebius/compute/v1b\x06proto3"

var (
	file_nebius_compute_v1_disk_proto_rawDescOnce sync.Once
	file_nebius_compute_v1_disk_proto_rawDescData []byte
)

func file_nebius_compute_v1_disk_proto_rawDescGZIP() []byte {
	file_nebius_compute_v1_disk_proto_rawDescOnce.Do(func() {
		file_nebius_compute_v1_disk_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nebius_compute_v1_disk_proto_rawDesc), len(file_nebius_compute_v1_disk_proto_rawDesc)))
	})
	return file_nebius_compute_v1_disk_proto_rawDescData
}

var file_nebius_compute_v1_disk_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_nebius_compute_v1_disk_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_nebius_compute_v1_disk_proto_goTypes = []any{
	(DiskSpec_DiskType)(0),                     // 0: nebius.compute.v1.DiskSpec.DiskType
	(DiskStatus_State)(0),                      // 1: nebius.compute.v1.DiskStatus.State
	(DiskStatus_SourceImageCPUArchitecture)(0), // 2: nebius.compute.v1.DiskStatus.SourceImageCPUArchitecture
	(DiskEncryption_DiskEncryptionType)(0),     // 3: nebius.compute.v1.DiskEncryption.DiskEncryptionType
	(*Disk)(nil),                               // 4: nebius.compute.v1.Disk
	(*DiskSpec)(nil),                           // 5: nebius.compute.v1.DiskSpec
	(*SourceImageFamily)(nil),                  // 6: nebius.compute.v1.SourceImageFamily
	(*DiskStatus)(nil),                         // 7: nebius.compute.v1.DiskStatus
	(*DiskEncryption)(nil),                     // 8: nebius.compute.v1.DiskEncryption
	(*v1.ResourceMetadata)(nil),                // 9: nebius.common.v1.ResourceMetadata
}
var file_nebius_compute_v1_disk_proto_depIdxs = []int32{
	9, // 0: nebius.compute.v1.Disk.metadata:type_name -> nebius.common.v1.ResourceMetadata
	5, // 1: nebius.compute.v1.Disk.spec:type_name -> nebius.compute.v1.DiskSpec
	7, // 2: nebius.compute.v1.Disk.status:type_name -> nebius.compute.v1.DiskStatus
	0, // 3: nebius.compute.v1.DiskSpec.type:type_name -> nebius.compute.v1.DiskSpec.DiskType
	6, // 4: nebius.compute.v1.DiskSpec.source_image_family:type_name -> nebius.compute.v1.SourceImageFamily
	8, // 5: nebius.compute.v1.DiskSpec.disk_encryption:type_name -> nebius.compute.v1.DiskEncryption
	1, // 6: nebius.compute.v1.DiskStatus.state:type_name -> nebius.compute.v1.DiskStatus.State
	2, // 7: nebius.compute.v1.DiskStatus.source_image_cpu_architecture:type_name -> nebius.compute.v1.DiskStatus.SourceImageCPUArchitecture
	3, // 8: nebius.compute.v1.DiskEncryption.type:type_name -> nebius.compute.v1.DiskEncryption.DiskEncryptionType
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_nebius_compute_v1_disk_proto_init() }
func file_nebius_compute_v1_disk_proto_init() {
	if File_nebius_compute_v1_disk_proto != nil {
		return
	}
	file_nebius_compute_v1_disk_proto_msgTypes[1].OneofWrappers = []any{
		(*DiskSpec_SizeBytes)(nil),
		(*DiskSpec_SizeKibibytes)(nil),
		(*DiskSpec_SizeMebibytes)(nil),
		(*DiskSpec_SizeGibibytes)(nil),
		(*DiskSpec_SourceImageId)(nil),
		(*DiskSpec_SourceImageFamily)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nebius_compute_v1_disk_proto_rawDesc), len(file_nebius_compute_v1_disk_proto_rawDesc)),
			NumEnums:      4,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nebius_compute_v1_disk_proto_goTypes,
		DependencyIndexes: file_nebius_compute_v1_disk_proto_depIdxs,
		EnumInfos:         file_nebius_compute_v1_disk_proto_enumTypes,
		MessageInfos:      file_nebius_compute_v1_disk_proto_msgTypes,
	}.Build()
	File_nebius_compute_v1_disk_proto = out.File
	file_nebius_compute_v1_disk_proto_goTypes = nil
	file_nebius_compute_v1_disk_proto_depIdxs = nil
}
