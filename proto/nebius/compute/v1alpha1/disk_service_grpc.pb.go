// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// nebius/compute/v1alpha1/disk_service.proto is a deprecated file.

package v1alpha1

import (
	context "context"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v1alpha1 "github.com/nebius/gosdk/proto/nebius/common/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DiskService_Get_FullMethodName                    = "/nebius.compute.v1alpha1.DiskService/Get"
	DiskService_GetByName_FullMethodName              = "/nebius.compute.v1alpha1.DiskService/GetByName"
	DiskService_List_FullMethodName                   = "/nebius.compute.v1alpha1.DiskService/List"
	DiskService_Create_FullMethodName                 = "/nebius.compute.v1alpha1.DiskService/Create"
	DiskService_Update_FullMethodName                 = "/nebius.compute.v1alpha1.DiskService/Update"
	DiskService_Delete_FullMethodName                 = "/nebius.compute.v1alpha1.DiskService/Delete"
	DiskService_ListOperationsByParent_FullMethodName = "/nebius.compute.v1alpha1.DiskService/ListOperationsByParent"
)

// DiskServiceClient is the client API for DiskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Deprecated: Do not use.
type DiskServiceClient interface {
	Get(ctx context.Context, in *GetDiskRequest, opts ...grpc.CallOption) (*Disk, error)
	GetByName(ctx context.Context, in *v1.GetByNameRequest, opts ...grpc.CallOption) (*Disk, error)
	List(ctx context.Context, in *ListDisksRequest, opts ...grpc.CallOption) (*ListDisksResponse, error)
	Create(ctx context.Context, in *CreateDiskRequest, opts ...grpc.CallOption) (*v1alpha1.Operation, error)
	Update(ctx context.Context, in *UpdateDiskRequest, opts ...grpc.CallOption) (*v1alpha1.Operation, error)
	Delete(ctx context.Context, in *DeleteDiskRequest, opts ...grpc.CallOption) (*v1alpha1.Operation, error)
	ListOperationsByParent(ctx context.Context, in *v1alpha1.ListOperationsByParentRequest, opts ...grpc.CallOption) (*v1alpha1.ListOperationsResponse, error)
}

type diskServiceClient struct {
	cc grpc.ClientConnInterface
}

// Deprecated: Do not use.
func NewDiskServiceClient(cc grpc.ClientConnInterface) DiskServiceClient {
	return &diskServiceClient{cc}
}

func (c *diskServiceClient) Get(ctx context.Context, in *GetDiskRequest, opts ...grpc.CallOption) (*Disk, error) {
	out := new(Disk)
	err := c.cc.Invoke(ctx, DiskService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) GetByName(ctx context.Context, in *v1.GetByNameRequest, opts ...grpc.CallOption) (*Disk, error) {
	out := new(Disk)
	err := c.cc.Invoke(ctx, DiskService_GetByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) List(ctx context.Context, in *ListDisksRequest, opts ...grpc.CallOption) (*ListDisksResponse, error) {
	out := new(ListDisksResponse)
	err := c.cc.Invoke(ctx, DiskService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) Create(ctx context.Context, in *CreateDiskRequest, opts ...grpc.CallOption) (*v1alpha1.Operation, error) {
	out := new(v1alpha1.Operation)
	err := c.cc.Invoke(ctx, DiskService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) Update(ctx context.Context, in *UpdateDiskRequest, opts ...grpc.CallOption) (*v1alpha1.Operation, error) {
	out := new(v1alpha1.Operation)
	err := c.cc.Invoke(ctx, DiskService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) Delete(ctx context.Context, in *DeleteDiskRequest, opts ...grpc.CallOption) (*v1alpha1.Operation, error) {
	out := new(v1alpha1.Operation)
	err := c.cc.Invoke(ctx, DiskService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diskServiceClient) ListOperationsByParent(ctx context.Context, in *v1alpha1.ListOperationsByParentRequest, opts ...grpc.CallOption) (*v1alpha1.ListOperationsResponse, error) {
	out := new(v1alpha1.ListOperationsResponse)
	err := c.cc.Invoke(ctx, DiskService_ListOperationsByParent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiskServiceServer is the server API for DiskService service.
// All implementations should embed UnimplementedDiskServiceServer
// for forward compatibility
//
// Deprecated: Do not use.
type DiskServiceServer interface {
	Get(context.Context, *GetDiskRequest) (*Disk, error)
	GetByName(context.Context, *v1.GetByNameRequest) (*Disk, error)
	List(context.Context, *ListDisksRequest) (*ListDisksResponse, error)
	Create(context.Context, *CreateDiskRequest) (*v1alpha1.Operation, error)
	Update(context.Context, *UpdateDiskRequest) (*v1alpha1.Operation, error)
	Delete(context.Context, *DeleteDiskRequest) (*v1alpha1.Operation, error)
	ListOperationsByParent(context.Context, *v1alpha1.ListOperationsByParentRequest) (*v1alpha1.ListOperationsResponse, error)
}

// UnimplementedDiskServiceServer should be embedded to have forward compatible implementations.
type UnimplementedDiskServiceServer struct {
}

func (UnimplementedDiskServiceServer) Get(context.Context, *GetDiskRequest) (*Disk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDiskServiceServer) GetByName(context.Context, *v1.GetByNameRequest) (*Disk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedDiskServiceServer) List(context.Context, *ListDisksRequest) (*ListDisksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDiskServiceServer) Create(context.Context, *CreateDiskRequest) (*v1alpha1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDiskServiceServer) Update(context.Context, *UpdateDiskRequest) (*v1alpha1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDiskServiceServer) Delete(context.Context, *DeleteDiskRequest) (*v1alpha1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDiskServiceServer) ListOperationsByParent(context.Context, *v1alpha1.ListOperationsByParentRequest) (*v1alpha1.ListOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOperationsByParent not implemented")
}

// UnsafeDiskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiskServiceServer will
// result in compilation errors.
type UnsafeDiskServiceServer interface {
	mustEmbedUnimplementedDiskServiceServer()
}

// Deprecated: Do not use.
func RegisterDiskServiceServer(s grpc.ServiceRegistrar, srv DiskServiceServer) {
	s.RegisterService(&DiskService_ServiceDesc, srv)
}

func _DiskService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiskService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).Get(ctx, req.(*GetDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1.GetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiskService_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).GetByName(ctx, req.(*v1.GetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDisksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiskService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).List(ctx, req.(*ListDisksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiskService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).Create(ctx, req.(*CreateDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiskService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).Update(ctx, req.(*UpdateDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDiskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiskService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).Delete(ctx, req.(*DeleteDiskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DiskService_ListOperationsByParent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v1alpha1.ListOperationsByParentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiskServiceServer).ListOperationsByParent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DiskService_ListOperationsByParent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiskServiceServer).ListOperationsByParent(ctx, req.(*v1alpha1.ListOperationsByParentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DiskService_ServiceDesc is the grpc.ServiceDesc for DiskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DiskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebius.compute.v1alpha1.DiskService",
	HandlerType: (*DiskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DiskService_Get_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _DiskService_GetByName_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DiskService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _DiskService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DiskService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DiskService_Delete_Handler,
		},
		{
			MethodName: "ListOperationsByParent",
			Handler:    _DiskService_ListOperationsByParent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebius/compute/v1alpha1/disk_service.proto",
}
