// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.28.3
// source: nebius/mk8s/v1/condition.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Condition_Severity int32

const (
	// Should apply only if the condition is in state "True".
	Condition_NONE Condition_Severity = 0
	// Specifies that a failure of a condition type
	// should be viewed as purely informational
	Condition_INFO Condition_Severity = 1
	// Specifies that a failure of a condition type
	// should be viewed as an error.
	Condition_ERROR Condition_Severity = 2
)

// Enum value maps for Condition_Severity.
var (
	Condition_Severity_name = map[int32]string{
		0: "NONE",
		1: "INFO",
		2: "ERROR",
	}
	Condition_Severity_value = map[string]int32{
		"NONE":  0,
		"INFO":  1,
		"ERROR": 2,
	}
)

func (x Condition_Severity) Enum() *Condition_Severity {
	p := new(Condition_Severity)
	*p = x
	return p
}

func (x Condition_Severity) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Condition_Severity) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_mk8s_v1_condition_proto_enumTypes[0].Descriptor()
}

func (Condition_Severity) Type() protoreflect.EnumType {
	return &file_nebius_mk8s_v1_condition_proto_enumTypes[0]
}

func (x Condition_Severity) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Condition_Severity.Descriptor instead.
func (Condition_Severity) EnumDescriptor() ([]byte, []int) {
	return file_nebius_mk8s_v1_condition_proto_rawDescGZIP(), []int{0, 0}
}

type Condition_Status int32

const (
	Condition_UNKNOWN Condition_Status = 0
	Condition_TRUE    Condition_Status = 1
	Condition_FALSE   Condition_Status = 2
)

// Enum value maps for Condition_Status.
var (
	Condition_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "TRUE",
		2: "FALSE",
	}
	Condition_Status_value = map[string]int32{
		"UNKNOWN": 0,
		"TRUE":    1,
		"FALSE":   2,
	}
)

func (x Condition_Status) Enum() *Condition_Status {
	p := new(Condition_Status)
	*p = x
	return p
}

func (x Condition_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Condition_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_mk8s_v1_condition_proto_enumTypes[1].Descriptor()
}

func (Condition_Status) Type() protoreflect.EnumType {
	return &file_nebius_mk8s_v1_condition_proto_enumTypes[1]
}

func (x Condition_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Condition_Status.Descriptor instead.
func (Condition_Status) EnumDescriptor() ([]byte, []int) {
	return file_nebius_mk8s_v1_condition_proto_rawDescGZIP(), []int{0, 1}
}

type Condition struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Type of condition. Should be CamelCase
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Status of the condition, one of TRUE, FALSE or UNKNOWN.
	Status Condition_Status `protobuf:"varint,2,opt,name=status,proto3,enum=nebius.mk8s.v1.Condition_Status" json:"status,omitempty"`
	// The last time the condition transitioned from one status to another.
	LastTransitionAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_transition_at,json=lastTransitionAt,proto3" json:"last_transition_at,omitempty"`
	// The reason for the condition's last transition in CamelCase.
	// The values are considered a guaranteed API.
	Reason string `protobuf:"bytes,4,opt,name=reason,proto3" json:"reason,omitempty"`
	// Explicit classification of Reason code, so the users or machines can immediately
	// understand the current situation and act accordingly.
	Severity Condition_Severity `protobuf:"varint,5,opt,name=severity,proto3,enum=nebius.mk8s.v1.Condition_Severity" json:"severity,omitempty"`
	// A human readable description message of this detail.
	Description         string                     `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	LastTransitionError *Condition_TransitionError `protobuf:"bytes,7,opt,name=last_transition_error,json=lastTransitionError,proto3" json:"last_transition_error,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *Condition) Reset() {
	*x = Condition{}
	mi := &file_nebius_mk8s_v1_condition_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition) ProtoMessage() {}

func (x *Condition) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_mk8s_v1_condition_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition.ProtoReflect.Descriptor instead.
func (*Condition) Descriptor() ([]byte, []int) {
	return file_nebius_mk8s_v1_condition_proto_rawDescGZIP(), []int{0}
}

func (x *Condition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Condition) GetStatus() Condition_Status {
	if x != nil {
		return x.Status
	}
	return Condition_UNKNOWN
}

func (x *Condition) GetLastTransitionAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastTransitionAt
	}
	return nil
}

func (x *Condition) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Condition) GetSeverity() Condition_Severity {
	if x != nil {
		return x.Severity
	}
	return Condition_NONE
}

func (x *Condition) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Condition) GetLastTransitionError() *Condition_TransitionError {
	if x != nil {
		return x.LastTransitionError
	}
	return nil
}

type Condition_TransitionError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Reason        string                 `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
	Description   string                 `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Condition_TransitionError) Reset() {
	*x = Condition_TransitionError{}
	mi := &file_nebius_mk8s_v1_condition_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Condition_TransitionError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Condition_TransitionError) ProtoMessage() {}

func (x *Condition_TransitionError) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_mk8s_v1_condition_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Condition_TransitionError.ProtoReflect.Descriptor instead.
func (*Condition_TransitionError) Descriptor() ([]byte, []int) {
	return file_nebius_mk8s_v1_condition_proto_rawDescGZIP(), []int{0, 0}
}

func (x *Condition_TransitionError) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *Condition_TransitionError) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

var File_nebius_mk8s_v1_condition_proto protoreflect.FileDescriptor

var file_nebius_mk8s_v1_condition_proto_rawDesc = string([]byte{
	0x0a, 0x1e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x6d, 0x6b, 0x38, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x6d, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xa0, 0x04, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x6d, 0x6b, 0x38,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x48, 0x0a,
	0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x3e, 0x0a, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x6d, 0x6b, 0x38, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x76,
	0x65, 0x72, 0x69, 0x74, 0x79, 0x52, 0x08, 0x73, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x5d, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x6d, 0x6b, 0x38, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x13, 0x6c, 0x61, 0x73,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x1a, 0x4b, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x29, 0x0a,
	0x08, 0x53, 0x65, 0x76, 0x65, 0x72, 0x69, 0x74, 0x79, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e,
	0x45, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x02, 0x22, 0x2a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x52, 0x55, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x41, 0x4c,
	0x53, 0x45, 0x10, 0x02, 0x42, 0x57, 0x0a, 0x15, 0x61, 0x69, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75,
	0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x6d, 0x6b, 0x38, 0x73, 0x2e, 0x76, 0x31, 0x42, 0x0e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65, 0x62, 0x69,
	0x75, 0x73, 0x2f, 0x67, 0x6f, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e,
	0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x6d, 0x6b, 0x38, 0x73, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_nebius_mk8s_v1_condition_proto_rawDescOnce sync.Once
	file_nebius_mk8s_v1_condition_proto_rawDescData []byte
)

func file_nebius_mk8s_v1_condition_proto_rawDescGZIP() []byte {
	file_nebius_mk8s_v1_condition_proto_rawDescOnce.Do(func() {
		file_nebius_mk8s_v1_condition_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nebius_mk8s_v1_condition_proto_rawDesc), len(file_nebius_mk8s_v1_condition_proto_rawDesc)))
	})
	return file_nebius_mk8s_v1_condition_proto_rawDescData
}

var file_nebius_mk8s_v1_condition_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_nebius_mk8s_v1_condition_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_nebius_mk8s_v1_condition_proto_goTypes = []any{
	(Condition_Severity)(0),           // 0: nebius.mk8s.v1.Condition.Severity
	(Condition_Status)(0),             // 1: nebius.mk8s.v1.Condition.Status
	(*Condition)(nil),                 // 2: nebius.mk8s.v1.Condition
	(*Condition_TransitionError)(nil), // 3: nebius.mk8s.v1.Condition.TransitionError
	(*timestamppb.Timestamp)(nil),     // 4: google.protobuf.Timestamp
}
var file_nebius_mk8s_v1_condition_proto_depIdxs = []int32{
	1, // 0: nebius.mk8s.v1.Condition.status:type_name -> nebius.mk8s.v1.Condition.Status
	4, // 1: nebius.mk8s.v1.Condition.last_transition_at:type_name -> google.protobuf.Timestamp
	0, // 2: nebius.mk8s.v1.Condition.severity:type_name -> nebius.mk8s.v1.Condition.Severity
	3, // 3: nebius.mk8s.v1.Condition.last_transition_error:type_name -> nebius.mk8s.v1.Condition.TransitionError
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_nebius_mk8s_v1_condition_proto_init() }
func file_nebius_mk8s_v1_condition_proto_init() {
	if File_nebius_mk8s_v1_condition_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nebius_mk8s_v1_condition_proto_rawDesc), len(file_nebius_mk8s_v1_condition_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nebius_mk8s_v1_condition_proto_goTypes,
		DependencyIndexes: file_nebius_mk8s_v1_condition_proto_depIdxs,
		EnumInfos:         file_nebius_mk8s_v1_condition_proto_enumTypes,
		MessageInfos:      file_nebius_mk8s_v1_condition_proto_msgTypes,
	}.Build()
	File_nebius_mk8s_v1_condition_proto = out.File
	file_nebius_mk8s_v1_condition_proto_goTypes = nil
	file_nebius_mk8s_v1_condition_proto_depIdxs = nil
}
