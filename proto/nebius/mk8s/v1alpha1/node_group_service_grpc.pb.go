// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: nebius/mk8s/v1alpha1/node_group_service.proto

package v1alpha1

import (
	context "context"
	v1alpha1 "github.com/nebius/gosdk/proto/nebius/common/v1alpha1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NodeGroupService_Get_FullMethodName       = "/nebius.mk8s.v1alpha1.NodeGroupService/Get"
	NodeGroupService_GetByName_FullMethodName = "/nebius.mk8s.v1alpha1.NodeGroupService/GetByName"
	NodeGroupService_List_FullMethodName      = "/nebius.mk8s.v1alpha1.NodeGroupService/List"
	NodeGroupService_Create_FullMethodName    = "/nebius.mk8s.v1alpha1.NodeGroupService/Create"
	NodeGroupService_Update_FullMethodName    = "/nebius.mk8s.v1alpha1.NodeGroupService/Update"
	NodeGroupService_Delete_FullMethodName    = "/nebius.mk8s.v1alpha1.NodeGroupService/Delete"
	NodeGroupService_Upgrade_FullMethodName   = "/nebius.mk8s.v1alpha1.NodeGroupService/Upgrade"
)

// NodeGroupServiceClient is the client API for NodeGroupService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeGroupServiceClient interface {
	Get(ctx context.Context, in *GetNodeGroupRequest, opts ...grpc.CallOption) (*NodeGroup, error)
	GetByName(ctx context.Context, in *GetNodeGroupByNameRequest, opts ...grpc.CallOption) (*NodeGroup, error)
	List(ctx context.Context, in *ListNodeGroupsRequest, opts ...grpc.CallOption) (*ListNodeGroupsResponse, error)
	Create(ctx context.Context, in *CreateNodeGroupRequest, opts ...grpc.CallOption) (*v1alpha1.Operation, error)
	Update(ctx context.Context, in *UpdateNodeGroupRequest, opts ...grpc.CallOption) (*v1alpha1.Operation, error)
	Delete(ctx context.Context, in *DeleteNodeGroupRequest, opts ...grpc.CallOption) (*v1alpha1.Operation, error)
	Upgrade(ctx context.Context, in *UpgradeNodeGroupRequest, opts ...grpc.CallOption) (*v1alpha1.Operation, error)
}

type nodeGroupServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeGroupServiceClient(cc grpc.ClientConnInterface) NodeGroupServiceClient {
	return &nodeGroupServiceClient{cc}
}

func (c *nodeGroupServiceClient) Get(ctx context.Context, in *GetNodeGroupRequest, opts ...grpc.CallOption) (*NodeGroup, error) {
	out := new(NodeGroup)
	err := c.cc.Invoke(ctx, NodeGroupService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGroupServiceClient) GetByName(ctx context.Context, in *GetNodeGroupByNameRequest, opts ...grpc.CallOption) (*NodeGroup, error) {
	out := new(NodeGroup)
	err := c.cc.Invoke(ctx, NodeGroupService_GetByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGroupServiceClient) List(ctx context.Context, in *ListNodeGroupsRequest, opts ...grpc.CallOption) (*ListNodeGroupsResponse, error) {
	out := new(ListNodeGroupsResponse)
	err := c.cc.Invoke(ctx, NodeGroupService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGroupServiceClient) Create(ctx context.Context, in *CreateNodeGroupRequest, opts ...grpc.CallOption) (*v1alpha1.Operation, error) {
	out := new(v1alpha1.Operation)
	err := c.cc.Invoke(ctx, NodeGroupService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGroupServiceClient) Update(ctx context.Context, in *UpdateNodeGroupRequest, opts ...grpc.CallOption) (*v1alpha1.Operation, error) {
	out := new(v1alpha1.Operation)
	err := c.cc.Invoke(ctx, NodeGroupService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGroupServiceClient) Delete(ctx context.Context, in *DeleteNodeGroupRequest, opts ...grpc.CallOption) (*v1alpha1.Operation, error) {
	out := new(v1alpha1.Operation)
	err := c.cc.Invoke(ctx, NodeGroupService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeGroupServiceClient) Upgrade(ctx context.Context, in *UpgradeNodeGroupRequest, opts ...grpc.CallOption) (*v1alpha1.Operation, error) {
	out := new(v1alpha1.Operation)
	err := c.cc.Invoke(ctx, NodeGroupService_Upgrade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeGroupServiceServer is the server API for NodeGroupService service.
// All implementations should embed UnimplementedNodeGroupServiceServer
// for forward compatibility
type NodeGroupServiceServer interface {
	Get(context.Context, *GetNodeGroupRequest) (*NodeGroup, error)
	GetByName(context.Context, *GetNodeGroupByNameRequest) (*NodeGroup, error)
	List(context.Context, *ListNodeGroupsRequest) (*ListNodeGroupsResponse, error)
	Create(context.Context, *CreateNodeGroupRequest) (*v1alpha1.Operation, error)
	Update(context.Context, *UpdateNodeGroupRequest) (*v1alpha1.Operation, error)
	Delete(context.Context, *DeleteNodeGroupRequest) (*v1alpha1.Operation, error)
	Upgrade(context.Context, *UpgradeNodeGroupRequest) (*v1alpha1.Operation, error)
}

// UnimplementedNodeGroupServiceServer should be embedded to have forward compatible implementations.
type UnimplementedNodeGroupServiceServer struct {
}

func (UnimplementedNodeGroupServiceServer) Get(context.Context, *GetNodeGroupRequest) (*NodeGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedNodeGroupServiceServer) GetByName(context.Context, *GetNodeGroupByNameRequest) (*NodeGroup, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}
func (UnimplementedNodeGroupServiceServer) List(context.Context, *ListNodeGroupsRequest) (*ListNodeGroupsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedNodeGroupServiceServer) Create(context.Context, *CreateNodeGroupRequest) (*v1alpha1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedNodeGroupServiceServer) Update(context.Context, *UpdateNodeGroupRequest) (*v1alpha1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedNodeGroupServiceServer) Delete(context.Context, *DeleteNodeGroupRequest) (*v1alpha1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedNodeGroupServiceServer) Upgrade(context.Context, *UpgradeNodeGroupRequest) (*v1alpha1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upgrade not implemented")
}

// UnsafeNodeGroupServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeGroupServiceServer will
// result in compilation errors.
type UnsafeNodeGroupServiceServer interface {
	mustEmbedUnimplementedNodeGroupServiceServer()
}

func RegisterNodeGroupServiceServer(s grpc.ServiceRegistrar, srv NodeGroupServiceServer) {
	s.RegisterService(&NodeGroupService_ServiceDesc, srv)
}

func _NodeGroupService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGroupServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGroupService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGroupServiceServer).Get(ctx, req.(*GetNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGroupService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeGroupByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGroupServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGroupService_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGroupServiceServer).GetByName(ctx, req.(*GetNodeGroupByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGroupService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodeGroupsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGroupServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGroupService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGroupServiceServer).List(ctx, req.(*ListNodeGroupsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGroupService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGroupServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGroupService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGroupServiceServer).Create(ctx, req.(*CreateNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGroupService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGroupServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGroupService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGroupServiceServer).Update(ctx, req.(*UpdateNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGroupService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGroupServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGroupService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGroupServiceServer).Delete(ctx, req.(*DeleteNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeGroupService_Upgrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpgradeNodeGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeGroupServiceServer).Upgrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeGroupService_Upgrade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeGroupServiceServer).Upgrade(ctx, req.(*UpgradeNodeGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeGroupService_ServiceDesc is the grpc.ServiceDesc for NodeGroupService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeGroupService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebius.mk8s.v1alpha1.NodeGroupService",
	HandlerType: (*NodeGroupServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _NodeGroupService_Get_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _NodeGroupService_GetByName_Handler,
		},
		{
			MethodName: "List",
			Handler:    _NodeGroupService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _NodeGroupService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _NodeGroupService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _NodeGroupService_Delete_Handler,
		},
		{
			MethodName: "Upgrade",
			Handler:    _NodeGroupService_Upgrade_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebius/mk8s/v1alpha1/node_group_service.proto",
}
