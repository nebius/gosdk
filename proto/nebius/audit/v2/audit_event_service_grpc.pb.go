// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: nebius/audit/v2/audit_event_service.proto

package v2

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuditEventService_List_FullMethodName = "/nebius.audit.v2.AuditEventService/List"
)

// AuditEventServiceClient is the client API for AuditEventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuditEventServiceClient interface {
	List(ctx context.Context, in *ListAuditEventRequest, opts ...grpc.CallOption) (*ListAuditEventResponse, error)
}

type auditEventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditEventServiceClient(cc grpc.ClientConnInterface) AuditEventServiceClient {
	return &auditEventServiceClient{cc}
}

func (c *auditEventServiceClient) List(ctx context.Context, in *ListAuditEventRequest, opts ...grpc.CallOption) (*ListAuditEventResponse, error) {
	out := new(ListAuditEventResponse)
	err := c.cc.Invoke(ctx, AuditEventService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditEventServiceServer is the server API for AuditEventService service.
// All implementations should embed UnimplementedAuditEventServiceServer
// for forward compatibility
type AuditEventServiceServer interface {
	List(context.Context, *ListAuditEventRequest) (*ListAuditEventResponse, error)
}

// UnimplementedAuditEventServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuditEventServiceServer struct {
}

func (UnimplementedAuditEventServiceServer) List(context.Context, *ListAuditEventRequest) (*ListAuditEventResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeAuditEventServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuditEventServiceServer will
// result in compilation errors.
type UnsafeAuditEventServiceServer interface {
	mustEmbedUnimplementedAuditEventServiceServer()
}

func RegisterAuditEventServiceServer(s grpc.ServiceRegistrar, srv AuditEventServiceServer) {
	s.RegisterService(&AuditEventService_ServiceDesc, srv)
}

func _AuditEventService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuditEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditEventServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuditEventService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditEventServiceServer).List(ctx, req.(*ListAuditEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuditEventService_ServiceDesc is the grpc.ServiceDesc for AuditEventService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuditEventService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebius.audit.v2.AuditEventService",
	HandlerType: (*AuditEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _AuditEventService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebius/audit/v2/audit_event_service.proto",
}
