// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: nebius/iam/v1/access_permit_service.proto

package v1

import (
	context "context"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccessPermitService_Create_FullMethodName = "/nebius.iam.v1.AccessPermitService/Create"
	AccessPermitService_List_FullMethodName   = "/nebius.iam.v1.AccessPermitService/List"
	AccessPermitService_Delete_FullMethodName = "/nebius.iam.v1.AccessPermitService/Delete"
	AccessPermitService_Get_FullMethodName    = "/nebius.iam.v1.AccessPermitService/Get"
)

// AccessPermitServiceClient is the client API for AccessPermitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessPermitServiceClient interface {
	// Creates access permit for provided resource with provided role.
	// Subject of access permit is also a parent of access permit.
	// If resource is unknown - NOT_FOUND will be thrown.
	// If parent of subject is not from resource's hierarchy - NOT_FOUND will be thrown.
	Create(ctx context.Context, in *CreateAccessPermitRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	// Lists access permits for provided parent
	List(ctx context.Context, in *ListAccessPermitRequest, opts ...grpc.CallOption) (*ListAccessPermitResponse, error)
	// Delete access permit by id
	Delete(ctx context.Context, in *DeleteAccessPermitRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	// Gets access permit by id
	Get(ctx context.Context, in *GetAccessPermitRequest, opts ...grpc.CallOption) (*AccessPermit, error)
}

type accessPermitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessPermitServiceClient(cc grpc.ClientConnInterface) AccessPermitServiceClient {
	return &accessPermitServiceClient{cc}
}

func (c *accessPermitServiceClient) Create(ctx context.Context, in *CreateAccessPermitRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, AccessPermitService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessPermitServiceClient) List(ctx context.Context, in *ListAccessPermitRequest, opts ...grpc.CallOption) (*ListAccessPermitResponse, error) {
	out := new(ListAccessPermitResponse)
	err := c.cc.Invoke(ctx, AccessPermitService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessPermitServiceClient) Delete(ctx context.Context, in *DeleteAccessPermitRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, AccessPermitService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessPermitServiceClient) Get(ctx context.Context, in *GetAccessPermitRequest, opts ...grpc.CallOption) (*AccessPermit, error) {
	out := new(AccessPermit)
	err := c.cc.Invoke(ctx, AccessPermitService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessPermitServiceServer is the server API for AccessPermitService service.
// All implementations should embed UnimplementedAccessPermitServiceServer
// for forward compatibility
type AccessPermitServiceServer interface {
	// Creates access permit for provided resource with provided role.
	// Subject of access permit is also a parent of access permit.
	// If resource is unknown - NOT_FOUND will be thrown.
	// If parent of subject is not from resource's hierarchy - NOT_FOUND will be thrown.
	Create(context.Context, *CreateAccessPermitRequest) (*v1.Operation, error)
	// Lists access permits for provided parent
	List(context.Context, *ListAccessPermitRequest) (*ListAccessPermitResponse, error)
	// Delete access permit by id
	Delete(context.Context, *DeleteAccessPermitRequest) (*v1.Operation, error)
	// Gets access permit by id
	Get(context.Context, *GetAccessPermitRequest) (*AccessPermit, error)
}

// UnimplementedAccessPermitServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAccessPermitServiceServer struct {
}

func (UnimplementedAccessPermitServiceServer) Create(context.Context, *CreateAccessPermitRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAccessPermitServiceServer) List(context.Context, *ListAccessPermitRequest) (*ListAccessPermitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAccessPermitServiceServer) Delete(context.Context, *DeleteAccessPermitRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAccessPermitServiceServer) Get(context.Context, *GetAccessPermitRequest) (*AccessPermit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}

// UnsafeAccessPermitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessPermitServiceServer will
// result in compilation errors.
type UnsafeAccessPermitServiceServer interface {
	mustEmbedUnimplementedAccessPermitServiceServer()
}

func RegisterAccessPermitServiceServer(s grpc.ServiceRegistrar, srv AccessPermitServiceServer) {
	s.RegisterService(&AccessPermitService_ServiceDesc, srv)
}

func _AccessPermitService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessPermitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessPermitServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessPermitService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessPermitServiceServer).Create(ctx, req.(*CreateAccessPermitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessPermitService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessPermitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessPermitServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessPermitService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessPermitServiceServer).List(ctx, req.(*ListAccessPermitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessPermitService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessPermitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessPermitServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessPermitService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessPermitServiceServer).Delete(ctx, req.(*DeleteAccessPermitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessPermitService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessPermitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessPermitServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessPermitService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessPermitServiceServer).Get(ctx, req.(*GetAccessPermitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessPermitService_ServiceDesc is the grpc.ServiceDesc for AccessPermitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessPermitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebius.iam.v1.AccessPermitService",
	HandlerType: (*AccessPermitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AccessPermitService_Create_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AccessPermitService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AccessPermitService_Delete_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AccessPermitService_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebius/iam/v1/access_permit_service.proto",
}
