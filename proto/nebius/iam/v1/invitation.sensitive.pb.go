// Code generated by protoc-gen-sensitive. DO NOT EDIT.

package v1

import (
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	slog "log/slog"
)

// Sanitize mutates [Invitation] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *Invitation) Sanitize() {
	if x == nil {
		return
	}
	x.Spec.Sanitize()
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [Invitation].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with `***`, other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *Invitation
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [Invitation], use the following code:
//
//	var original *Invitation
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*Invitation)
func (x *Invitation) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*Invitation) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperInvitation)(c))
}

// wrapperInvitation is used to return [Invitation] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperInvitation Invitation

func (w *wrapperInvitation) String() string {
	return (*Invitation)(w).String()
}

func (*wrapperInvitation) ProtoMessage() {}

func (w *wrapperInvitation) ProtoReflect() protoreflect.Message {
	return (*Invitation)(w).ProtoReflect()
}

// Sanitize mutates [InvitationSpec] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *InvitationSpec) Sanitize() {
	if x == nil {
		return
	}
	if o, ok := x.Contact.(*InvitationSpec_Email); ok && o != nil {
		o.Email = "***"
	}
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [InvitationSpec].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with `***`, other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *InvitationSpec
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [InvitationSpec], use the following code:
//
//	var original *InvitationSpec
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*InvitationSpec)
func (x *InvitationSpec) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*InvitationSpec) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperInvitationSpec)(c))
}

// wrapperInvitationSpec is used to return [InvitationSpec] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperInvitationSpec InvitationSpec

func (w *wrapperInvitationSpec) String() string {
	return (*InvitationSpec)(w).String()
}

func (*wrapperInvitationSpec) ProtoMessage() {}

func (w *wrapperInvitationSpec) ProtoReflect() protoreflect.Message {
	return (*InvitationSpec)(w).ProtoReflect()
}

// func (x *InvitationStatus) Sanitize()            // is not generated as no sensitive fields found
// func (x *InvitationStatus) LogValue() slog.Value // is not generated as no sensitive fields found
