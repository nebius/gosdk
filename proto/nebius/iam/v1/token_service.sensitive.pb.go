// Code generated by protoc-gen-sensitive. DO NOT EDIT.

package v1

import (
	tokensanitizer "github.com/nebius/gosdk/proto/tokensanitizer"
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	slog "log/slog"
)

// Sanitize mutates [ExchangeTokenRequest] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
// Fields with credentials are marked with [(nebius.credentials) = true].
func (x *ExchangeTokenRequest) Sanitize() {
	if x == nil {
		return
	}
	credsSanitizer := tokensanitizer.CredentialsSanitizer()
	sanitizeCreds := func(s string) string {
		if !credsSanitizer.IsSupported(s) {
			return "**HIDDEN**"
		}
		return credsSanitizer.Sanitize(s)
	}
	x.SubjectToken = sanitizeCreds(x.SubjectToken)
	x.ActorToken = sanitizeCreds(x.ActorToken)
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [ExchangeTokenRequest].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
// Signature is replaced by "**" in credentials.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *ExchangeTokenRequest
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [ExchangeTokenRequest], use the following code:
//
//	var original *ExchangeTokenRequest
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*ExchangeTokenRequest)
func (x *ExchangeTokenRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*ExchangeTokenRequest) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperExchangeTokenRequest)(c))
}

// wrapperExchangeTokenRequest is used to return [ExchangeTokenRequest] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperExchangeTokenRequest ExchangeTokenRequest

func (w *wrapperExchangeTokenRequest) String() string {
	return (*ExchangeTokenRequest)(w).String()
}

func (*wrapperExchangeTokenRequest) ProtoMessage() {}

func (w *wrapperExchangeTokenRequest) ProtoReflect() protoreflect.Message {
	return (*ExchangeTokenRequest)(w).ProtoReflect()
}

// Sanitize mutates [CreateTokenResponse] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
// Fields with credentials are marked with [(nebius.credentials) = true].
func (x *CreateTokenResponse) Sanitize() {
	if x == nil {
		return
	}
	credsSanitizer := tokensanitizer.CredentialsSanitizer()
	sanitizeCreds := func(s string) string {
		if !credsSanitizer.IsSupported(s) {
			return "**HIDDEN**"
		}
		return credsSanitizer.Sanitize(s)
	}
	x.AccessToken = sanitizeCreds(x.AccessToken)
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [CreateTokenResponse].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
// Signature is replaced by "**" in credentials.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *CreateTokenResponse
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [CreateTokenResponse], use the following code:
//
//	var original *CreateTokenResponse
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*CreateTokenResponse)
func (x *CreateTokenResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*CreateTokenResponse) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperCreateTokenResponse)(c))
}

// wrapperCreateTokenResponse is used to return [CreateTokenResponse] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperCreateTokenResponse CreateTokenResponse

func (w *wrapperCreateTokenResponse) String() string {
	return (*CreateTokenResponse)(w).String()
}

func (*wrapperCreateTokenResponse) ProtoMessage() {}

func (w *wrapperCreateTokenResponse) ProtoReflect() protoreflect.Message {
	return (*CreateTokenResponse)(w).ProtoReflect()
}
