// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: nebius/iam/v1/auth_public_key_service.proto

package v1

import (
	context "context"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthPublicKeyService_Create_FullMethodName        = "/nebius.iam.v1.AuthPublicKeyService/Create"
	AuthPublicKeyService_Get_FullMethodName           = "/nebius.iam.v1.AuthPublicKeyService/Get"
	AuthPublicKeyService_List_FullMethodName          = "/nebius.iam.v1.AuthPublicKeyService/List"
	AuthPublicKeyService_ListByAccount_FullMethodName = "/nebius.iam.v1.AuthPublicKeyService/ListByAccount"
	AuthPublicKeyService_Update_FullMethodName        = "/nebius.iam.v1.AuthPublicKeyService/Update"
	AuthPublicKeyService_Activate_FullMethodName      = "/nebius.iam.v1.AuthPublicKeyService/Activate"
	AuthPublicKeyService_Deactivate_FullMethodName    = "/nebius.iam.v1.AuthPublicKeyService/Deactivate"
	AuthPublicKeyService_Delete_FullMethodName        = "/nebius.iam.v1.AuthPublicKeyService/Delete"
)

// AuthPublicKeyServiceClient is the client API for AuthPublicKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthPublicKeyServiceClient interface {
	Create(ctx context.Context, in *CreateAuthPublicKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Get(ctx context.Context, in *GetAuthPublicKeyRequest, opts ...grpc.CallOption) (*AuthPublicKey, error)
	List(ctx context.Context, in *ListAuthPublicKeyRequest, opts ...grpc.CallOption) (*ListAuthPublicKeyResponse, error)
	ListByAccount(ctx context.Context, in *ListAuthPublicKeyByAccountRequest, opts ...grpc.CallOption) (*ListAuthPublicKeyResponse, error)
	Update(ctx context.Context, in *UpdateAuthPublicKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Activate(ctx context.Context, in *ActivateAuthPublicKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Deactivate(ctx context.Context, in *DeactivateAuthPublicKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Delete(ctx context.Context, in *DeleteAuthPublicKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error)
}

type authPublicKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthPublicKeyServiceClient(cc grpc.ClientConnInterface) AuthPublicKeyServiceClient {
	return &authPublicKeyServiceClient{cc}
}

func (c *authPublicKeyServiceClient) Create(ctx context.Context, in *CreateAuthPublicKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, AuthPublicKeyService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authPublicKeyServiceClient) Get(ctx context.Context, in *GetAuthPublicKeyRequest, opts ...grpc.CallOption) (*AuthPublicKey, error) {
	out := new(AuthPublicKey)
	err := c.cc.Invoke(ctx, AuthPublicKeyService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authPublicKeyServiceClient) List(ctx context.Context, in *ListAuthPublicKeyRequest, opts ...grpc.CallOption) (*ListAuthPublicKeyResponse, error) {
	out := new(ListAuthPublicKeyResponse)
	err := c.cc.Invoke(ctx, AuthPublicKeyService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authPublicKeyServiceClient) ListByAccount(ctx context.Context, in *ListAuthPublicKeyByAccountRequest, opts ...grpc.CallOption) (*ListAuthPublicKeyResponse, error) {
	out := new(ListAuthPublicKeyResponse)
	err := c.cc.Invoke(ctx, AuthPublicKeyService_ListByAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authPublicKeyServiceClient) Update(ctx context.Context, in *UpdateAuthPublicKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, AuthPublicKeyService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authPublicKeyServiceClient) Activate(ctx context.Context, in *ActivateAuthPublicKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, AuthPublicKeyService_Activate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authPublicKeyServiceClient) Deactivate(ctx context.Context, in *DeactivateAuthPublicKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, AuthPublicKeyService_Deactivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authPublicKeyServiceClient) Delete(ctx context.Context, in *DeleteAuthPublicKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, AuthPublicKeyService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthPublicKeyServiceServer is the server API for AuthPublicKeyService service.
// All implementations should embed UnimplementedAuthPublicKeyServiceServer
// for forward compatibility
type AuthPublicKeyServiceServer interface {
	Create(context.Context, *CreateAuthPublicKeyRequest) (*v1.Operation, error)
	Get(context.Context, *GetAuthPublicKeyRequest) (*AuthPublicKey, error)
	List(context.Context, *ListAuthPublicKeyRequest) (*ListAuthPublicKeyResponse, error)
	ListByAccount(context.Context, *ListAuthPublicKeyByAccountRequest) (*ListAuthPublicKeyResponse, error)
	Update(context.Context, *UpdateAuthPublicKeyRequest) (*v1.Operation, error)
	Activate(context.Context, *ActivateAuthPublicKeyRequest) (*v1.Operation, error)
	Deactivate(context.Context, *DeactivateAuthPublicKeyRequest) (*v1.Operation, error)
	Delete(context.Context, *DeleteAuthPublicKeyRequest) (*v1.Operation, error)
}

// UnimplementedAuthPublicKeyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAuthPublicKeyServiceServer struct {
}

func (UnimplementedAuthPublicKeyServiceServer) Create(context.Context, *CreateAuthPublicKeyRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAuthPublicKeyServiceServer) Get(context.Context, *GetAuthPublicKeyRequest) (*AuthPublicKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAuthPublicKeyServiceServer) List(context.Context, *ListAuthPublicKeyRequest) (*ListAuthPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAuthPublicKeyServiceServer) ListByAccount(context.Context, *ListAuthPublicKeyByAccountRequest) (*ListAuthPublicKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByAccount not implemented")
}
func (UnimplementedAuthPublicKeyServiceServer) Update(context.Context, *UpdateAuthPublicKeyRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAuthPublicKeyServiceServer) Activate(context.Context, *ActivateAuthPublicKeyRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedAuthPublicKeyServiceServer) Deactivate(context.Context, *DeactivateAuthPublicKeyRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deactivate not implemented")
}
func (UnimplementedAuthPublicKeyServiceServer) Delete(context.Context, *DeleteAuthPublicKeyRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeAuthPublicKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthPublicKeyServiceServer will
// result in compilation errors.
type UnsafeAuthPublicKeyServiceServer interface {
	mustEmbedUnimplementedAuthPublicKeyServiceServer()
}

func RegisterAuthPublicKeyServiceServer(s grpc.ServiceRegistrar, srv AuthPublicKeyServiceServer) {
	s.RegisterService(&AuthPublicKeyService_ServiceDesc, srv)
}

func _AuthPublicKeyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAuthPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPublicKeyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthPublicKeyService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPublicKeyServiceServer).Create(ctx, req.(*CreateAuthPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthPublicKeyService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAuthPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPublicKeyServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthPublicKeyService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPublicKeyServiceServer).Get(ctx, req.(*GetAuthPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthPublicKeyService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPublicKeyServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthPublicKeyService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPublicKeyServiceServer).List(ctx, req.(*ListAuthPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthPublicKeyService_ListByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAuthPublicKeyByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPublicKeyServiceServer).ListByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthPublicKeyService_ListByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPublicKeyServiceServer).ListByAccount(ctx, req.(*ListAuthPublicKeyByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthPublicKeyService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAuthPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPublicKeyServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthPublicKeyService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPublicKeyServiceServer).Update(ctx, req.(*UpdateAuthPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthPublicKeyService_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateAuthPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPublicKeyServiceServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthPublicKeyService_Activate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPublicKeyServiceServer).Activate(ctx, req.(*ActivateAuthPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthPublicKeyService_Deactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateAuthPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPublicKeyServiceServer).Deactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthPublicKeyService_Deactivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPublicKeyServiceServer).Deactivate(ctx, req.(*DeactivateAuthPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthPublicKeyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAuthPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthPublicKeyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthPublicKeyService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthPublicKeyServiceServer).Delete(ctx, req.(*DeleteAuthPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthPublicKeyService_ServiceDesc is the grpc.ServiceDesc for AuthPublicKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthPublicKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebius.iam.v1.AuthPublicKeyService",
	HandlerType: (*AuthPublicKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AuthPublicKeyService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AuthPublicKeyService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AuthPublicKeyService_List_Handler,
		},
		{
			MethodName: "ListByAccount",
			Handler:    _AuthPublicKeyService_ListByAccount_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AuthPublicKeyService_Update_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _AuthPublicKeyService_Activate_Handler,
		},
		{
			MethodName: "Deactivate",
			Handler:    _AuthPublicKeyService_Deactivate_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AuthPublicKeyService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebius/iam/v1/auth_public_key_service.proto",
}
