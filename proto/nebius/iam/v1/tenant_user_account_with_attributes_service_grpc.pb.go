// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: nebius/iam/v1/tenant_user_account_with_attributes_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TenantUserAccountWithAttributesService_Get_FullMethodName  = "/nebius.iam.v1.TenantUserAccountWithAttributesService/Get"
	TenantUserAccountWithAttributesService_List_FullMethodName = "/nebius.iam.v1.TenantUserAccountWithAttributesService/List"
)

// TenantUserAccountWithAttributesServiceClient is the client API for TenantUserAccountWithAttributesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenantUserAccountWithAttributesServiceClient interface {
	Get(ctx context.Context, in *GetTenantUserAccountWithAttributesRequest, opts ...grpc.CallOption) (*TenantUserAccountWithAttributes, error)
	List(ctx context.Context, in *ListTenantUserAccountsWithAttributesRequest, opts ...grpc.CallOption) (*ListTenantUserAccountsWithAttributesResponse, error)
}

type tenantUserAccountWithAttributesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTenantUserAccountWithAttributesServiceClient(cc grpc.ClientConnInterface) TenantUserAccountWithAttributesServiceClient {
	return &tenantUserAccountWithAttributesServiceClient{cc}
}

func (c *tenantUserAccountWithAttributesServiceClient) Get(ctx context.Context, in *GetTenantUserAccountWithAttributesRequest, opts ...grpc.CallOption) (*TenantUserAccountWithAttributes, error) {
	out := new(TenantUserAccountWithAttributes)
	err := c.cc.Invoke(ctx, TenantUserAccountWithAttributesService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenantUserAccountWithAttributesServiceClient) List(ctx context.Context, in *ListTenantUserAccountsWithAttributesRequest, opts ...grpc.CallOption) (*ListTenantUserAccountsWithAttributesResponse, error) {
	out := new(ListTenantUserAccountsWithAttributesResponse)
	err := c.cc.Invoke(ctx, TenantUserAccountWithAttributesService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenantUserAccountWithAttributesServiceServer is the server API for TenantUserAccountWithAttributesService service.
// All implementations should embed UnimplementedTenantUserAccountWithAttributesServiceServer
// for forward compatibility
type TenantUserAccountWithAttributesServiceServer interface {
	Get(context.Context, *GetTenantUserAccountWithAttributesRequest) (*TenantUserAccountWithAttributes, error)
	List(context.Context, *ListTenantUserAccountsWithAttributesRequest) (*ListTenantUserAccountsWithAttributesResponse, error)
}

// UnimplementedTenantUserAccountWithAttributesServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTenantUserAccountWithAttributesServiceServer struct {
}

func (UnimplementedTenantUserAccountWithAttributesServiceServer) Get(context.Context, *GetTenantUserAccountWithAttributesRequest) (*TenantUserAccountWithAttributes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTenantUserAccountWithAttributesServiceServer) List(context.Context, *ListTenantUserAccountsWithAttributesRequest) (*ListTenantUserAccountsWithAttributesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeTenantUserAccountWithAttributesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenantUserAccountWithAttributesServiceServer will
// result in compilation errors.
type UnsafeTenantUserAccountWithAttributesServiceServer interface {
	mustEmbedUnimplementedTenantUserAccountWithAttributesServiceServer()
}

func RegisterTenantUserAccountWithAttributesServiceServer(s grpc.ServiceRegistrar, srv TenantUserAccountWithAttributesServiceServer) {
	s.RegisterService(&TenantUserAccountWithAttributesService_ServiceDesc, srv)
}

func _TenantUserAccountWithAttributesService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTenantUserAccountWithAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantUserAccountWithAttributesServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantUserAccountWithAttributesService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantUserAccountWithAttributesServiceServer).Get(ctx, req.(*GetTenantUserAccountWithAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenantUserAccountWithAttributesService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTenantUserAccountsWithAttributesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenantUserAccountWithAttributesServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenantUserAccountWithAttributesService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenantUserAccountWithAttributesServiceServer).List(ctx, req.(*ListTenantUserAccountsWithAttributesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TenantUserAccountWithAttributesService_ServiceDesc is the grpc.ServiceDesc for TenantUserAccountWithAttributesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenantUserAccountWithAttributesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebius.iam.v1.TenantUserAccountWithAttributesService",
	HandlerType: (*TenantUserAccountWithAttributesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _TenantUserAccountWithAttributesService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _TenantUserAccountWithAttributesService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebius/iam/v1/tenant_user_account_with_attributes_service.proto",
}
