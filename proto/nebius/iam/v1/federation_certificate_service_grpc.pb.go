// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: nebius/iam/v1/federation_certificate_service.proto

package v1

import (
	context "context"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FederationCertificateService_Create_FullMethodName           = "/nebius.iam.v1.FederationCertificateService/Create"
	FederationCertificateService_Get_FullMethodName              = "/nebius.iam.v1.FederationCertificateService/Get"
	FederationCertificateService_ListByFederation_FullMethodName = "/nebius.iam.v1.FederationCertificateService/ListByFederation"
	FederationCertificateService_Update_FullMethodName           = "/nebius.iam.v1.FederationCertificateService/Update"
	FederationCertificateService_Delete_FullMethodName           = "/nebius.iam.v1.FederationCertificateService/Delete"
)

// FederationCertificateServiceClient is the client API for FederationCertificateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FederationCertificateServiceClient interface {
	Create(ctx context.Context, in *CreateFederationCertificateRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Get(ctx context.Context, in *GetFederationCertificateRequest, opts ...grpc.CallOption) (*FederationCertificate, error)
	ListByFederation(ctx context.Context, in *ListFederationCertificateByFederationRequest, opts ...grpc.CallOption) (*ListFederationCertificateResponse, error)
	Update(ctx context.Context, in *UpdateFederationCertificateRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Delete(ctx context.Context, in *DeleteFederationCertificateRequest, opts ...grpc.CallOption) (*v1.Operation, error)
}

type federationCertificateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFederationCertificateServiceClient(cc grpc.ClientConnInterface) FederationCertificateServiceClient {
	return &federationCertificateServiceClient{cc}
}

func (c *federationCertificateServiceClient) Create(ctx context.Context, in *CreateFederationCertificateRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, FederationCertificateService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationCertificateServiceClient) Get(ctx context.Context, in *GetFederationCertificateRequest, opts ...grpc.CallOption) (*FederationCertificate, error) {
	out := new(FederationCertificate)
	err := c.cc.Invoke(ctx, FederationCertificateService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationCertificateServiceClient) ListByFederation(ctx context.Context, in *ListFederationCertificateByFederationRequest, opts ...grpc.CallOption) (*ListFederationCertificateResponse, error) {
	out := new(ListFederationCertificateResponse)
	err := c.cc.Invoke(ctx, FederationCertificateService_ListByFederation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationCertificateServiceClient) Update(ctx context.Context, in *UpdateFederationCertificateRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, FederationCertificateService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *federationCertificateServiceClient) Delete(ctx context.Context, in *DeleteFederationCertificateRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, FederationCertificateService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FederationCertificateServiceServer is the server API for FederationCertificateService service.
// All implementations should embed UnimplementedFederationCertificateServiceServer
// for forward compatibility
type FederationCertificateServiceServer interface {
	Create(context.Context, *CreateFederationCertificateRequest) (*v1.Operation, error)
	Get(context.Context, *GetFederationCertificateRequest) (*FederationCertificate, error)
	ListByFederation(context.Context, *ListFederationCertificateByFederationRequest) (*ListFederationCertificateResponse, error)
	Update(context.Context, *UpdateFederationCertificateRequest) (*v1.Operation, error)
	Delete(context.Context, *DeleteFederationCertificateRequest) (*v1.Operation, error)
}

// UnimplementedFederationCertificateServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFederationCertificateServiceServer struct {
}

func (UnimplementedFederationCertificateServiceServer) Create(context.Context, *CreateFederationCertificateRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedFederationCertificateServiceServer) Get(context.Context, *GetFederationCertificateRequest) (*FederationCertificate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedFederationCertificateServiceServer) ListByFederation(context.Context, *ListFederationCertificateByFederationRequest) (*ListFederationCertificateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByFederation not implemented")
}
func (UnimplementedFederationCertificateServiceServer) Update(context.Context, *UpdateFederationCertificateRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedFederationCertificateServiceServer) Delete(context.Context, *DeleteFederationCertificateRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeFederationCertificateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FederationCertificateServiceServer will
// result in compilation errors.
type UnsafeFederationCertificateServiceServer interface {
	mustEmbedUnimplementedFederationCertificateServiceServer()
}

func RegisterFederationCertificateServiceServer(s grpc.ServiceRegistrar, srv FederationCertificateServiceServer) {
	s.RegisterService(&FederationCertificateService_ServiceDesc, srv)
}

func _FederationCertificateService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFederationCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationCertificateServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationCertificateService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationCertificateServiceServer).Create(ctx, req.(*CreateFederationCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationCertificateService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFederationCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationCertificateServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationCertificateService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationCertificateServiceServer).Get(ctx, req.(*GetFederationCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationCertificateService_ListByFederation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFederationCertificateByFederationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationCertificateServiceServer).ListByFederation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationCertificateService_ListByFederation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationCertificateServiceServer).ListByFederation(ctx, req.(*ListFederationCertificateByFederationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationCertificateService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateFederationCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationCertificateServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationCertificateService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationCertificateServiceServer).Update(ctx, req.(*UpdateFederationCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FederationCertificateService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFederationCertificateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FederationCertificateServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FederationCertificateService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FederationCertificateServiceServer).Delete(ctx, req.(*DeleteFederationCertificateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FederationCertificateService_ServiceDesc is the grpc.ServiceDesc for FederationCertificateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FederationCertificateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebius.iam.v1.FederationCertificateService",
	HandlerType: (*FederationCertificateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _FederationCertificateService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _FederationCertificateService_Get_Handler,
		},
		{
			MethodName: "ListByFederation",
			Handler:    _FederationCertificateService_ListByFederation_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _FederationCertificateService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _FederationCertificateService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebius/iam/v1/federation_certificate_service.proto",
}
