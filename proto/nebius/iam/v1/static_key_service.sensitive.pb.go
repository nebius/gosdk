// Code generated by protoc-gen-sensitive. DO NOT EDIT.

package v1

import (
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	slog "log/slog"
)

// func (x *GetStaticKeyRequest) Sanitize()            // is not generated as no sensitive fields found
// func (x *GetStaticKeyRequest) LogValue() slog.Value // is not generated as no sensitive fields found

// func (x *GetStaticKeyByNameRequest) Sanitize()            // is not generated as no sensitive fields found
// func (x *GetStaticKeyByNameRequest) LogValue() slog.Value // is not generated as no sensitive fields found

// func (x *DeleteStaticKeyRequest) Sanitize()            // is not generated as no sensitive fields found
// func (x *DeleteStaticKeyRequest) LogValue() slog.Value // is not generated as no sensitive fields found

// func (x *ListStaticKeysRequest) Sanitize()            // is not generated as no sensitive fields found
// func (x *ListStaticKeysRequest) LogValue() slog.Value // is not generated as no sensitive fields found

// func (x *ListStaticKeysResponse) Sanitize()            // is not generated as no sensitive fields found
// func (x *ListStaticKeysResponse) LogValue() slog.Value // is not generated as no sensitive fields found

// func (x *IssueStaticKeyRequest) Sanitize()            // is not generated as no sensitive fields found
// func (x *IssueStaticKeyRequest) LogValue() slog.Value // is not generated as no sensitive fields found

// Sanitize mutates [IssueStaticKeyResponse] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
//
// It also sanitizes the content of google.protobuf.Any, i.e. performs unmarshal, sanitize, marshal cycle.
// Important: [proto.UnmarshalOptions.DiscardUnknown] = true is used.
// In case of an error, the content of Any is replaced with google.protobuf.Empty.
func (x *IssueStaticKeyResponse) Sanitize() {
	if x == nil {
		return
	}
	x.Token = "**HIDDEN**"
	x.Operation.Sanitize()
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [IssueStaticKeyResponse].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// It also sanitizes the content of google.protobuf.Any, i.e. performs unmarshal, sanitize, marshal cycle.
// Important: [proto.UnmarshalOptions.DiscardUnknown] = true is used.
// In case of an error, the content of Any is replaced with google.protobuf.Empty.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *IssueStaticKeyResponse
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [IssueStaticKeyResponse], use the following code:
//
//	var original *IssueStaticKeyResponse
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*IssueStaticKeyResponse)
func (x *IssueStaticKeyResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*IssueStaticKeyResponse) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperIssueStaticKeyResponse)(c))
}

// wrapperIssueStaticKeyResponse is used to return [IssueStaticKeyResponse] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperIssueStaticKeyResponse IssueStaticKeyResponse

func (w *wrapperIssueStaticKeyResponse) String() string {
	return (*IssueStaticKeyResponse)(w).String()
}

func (*wrapperIssueStaticKeyResponse) ProtoMessage() {}

func (w *wrapperIssueStaticKeyResponse) ProtoReflect() protoreflect.Message {
	return (*IssueStaticKeyResponse)(w).ProtoReflect()
}

// Sanitize mutates [FindStaticKeyRequest] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *FindStaticKeyRequest) Sanitize() {
	if x == nil {
		return
	}
	x.Token = "**HIDDEN**"
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [FindStaticKeyRequest].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *FindStaticKeyRequest
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [FindStaticKeyRequest], use the following code:
//
//	var original *FindStaticKeyRequest
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*FindStaticKeyRequest)
func (x *FindStaticKeyRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*FindStaticKeyRequest) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperFindStaticKeyRequest)(c))
}

// wrapperFindStaticKeyRequest is used to return [FindStaticKeyRequest] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperFindStaticKeyRequest FindStaticKeyRequest

func (w *wrapperFindStaticKeyRequest) String() string {
	return (*FindStaticKeyRequest)(w).String()
}

func (*wrapperFindStaticKeyRequest) ProtoMessage() {}

func (w *wrapperFindStaticKeyRequest) ProtoReflect() protoreflect.Message {
	return (*FindStaticKeyRequest)(w).ProtoReflect()
}

// func (x *FindStaticKeyResponse) Sanitize()            // is not generated as no sensitive fields found
// func (x *FindStaticKeyResponse) LogValue() slog.Value // is not generated as no sensitive fields found

// Sanitize mutates [RevokeStaticKeyRequest] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *RevokeStaticKeyRequest) Sanitize() {
	if x == nil {
		return
	}
	x.Token = "**HIDDEN**"
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [RevokeStaticKeyRequest].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *RevokeStaticKeyRequest
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [RevokeStaticKeyRequest], use the following code:
//
//	var original *RevokeStaticKeyRequest
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*RevokeStaticKeyRequest)
func (x *RevokeStaticKeyRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*RevokeStaticKeyRequest) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperRevokeStaticKeyRequest)(c))
}

// wrapperRevokeStaticKeyRequest is used to return [RevokeStaticKeyRequest] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperRevokeStaticKeyRequest RevokeStaticKeyRequest

func (w *wrapperRevokeStaticKeyRequest) String() string {
	return (*RevokeStaticKeyRequest)(w).String()
}

func (*wrapperRevokeStaticKeyRequest) ProtoMessage() {}

func (w *wrapperRevokeStaticKeyRequest) ProtoReflect() protoreflect.Message {
	return (*RevokeStaticKeyRequest)(w).ProtoReflect()
}
