// Code generated by protoc-gen-sensitive. DO NOT EDIT.

package v1

import (
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	slog "log/slog"
)

// func (x *GetTenantUserAccountWithAttributesRequest) Sanitize()            // is not generated as no sensitive fields found
// func (x *GetTenantUserAccountWithAttributesRequest) LogValue() slog.Value // is not generated as no sensitive fields found

// Sanitize mutates [ListTenantUserAccountsWithAttributesRequest] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *ListTenantUserAccountsWithAttributesRequest) Sanitize() {
	if x == nil {
		return
	}
	x.Filter = "***"
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [ListTenantUserAccountsWithAttributesRequest].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with `***`, other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *ListTenantUserAccountsWithAttributesRequest
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [ListTenantUserAccountsWithAttributesRequest], use the following code:
//
//	var original *ListTenantUserAccountsWithAttributesRequest
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*ListTenantUserAccountsWithAttributesRequest)
func (x *ListTenantUserAccountsWithAttributesRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*ListTenantUserAccountsWithAttributesRequest) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperListTenantUserAccountsWithAttributesRequest)(c))
}

// wrapperListTenantUserAccountsWithAttributesRequest is used to return [ListTenantUserAccountsWithAttributesRequest] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperListTenantUserAccountsWithAttributesRequest ListTenantUserAccountsWithAttributesRequest

func (w *wrapperListTenantUserAccountsWithAttributesRequest) String() string {
	return (*ListTenantUserAccountsWithAttributesRequest)(w).String()
}

func (*wrapperListTenantUserAccountsWithAttributesRequest) ProtoMessage() {}

func (w *wrapperListTenantUserAccountsWithAttributesRequest) ProtoReflect() protoreflect.Message {
	return (*ListTenantUserAccountsWithAttributesRequest)(w).ProtoReflect()
}

// Sanitize mutates [ListTenantUserAccountsWithAttributesResponse] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *ListTenantUserAccountsWithAttributesResponse) Sanitize() {
	if x == nil {
		return
	}
	for _, y := range x.Items {
		y.Sanitize()
	}
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [ListTenantUserAccountsWithAttributesResponse].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with `***`, other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *ListTenantUserAccountsWithAttributesResponse
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [ListTenantUserAccountsWithAttributesResponse], use the following code:
//
//	var original *ListTenantUserAccountsWithAttributesResponse
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*ListTenantUserAccountsWithAttributesResponse)
func (x *ListTenantUserAccountsWithAttributesResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*ListTenantUserAccountsWithAttributesResponse) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperListTenantUserAccountsWithAttributesResponse)(c))
}

// wrapperListTenantUserAccountsWithAttributesResponse is used to return [ListTenantUserAccountsWithAttributesResponse] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperListTenantUserAccountsWithAttributesResponse ListTenantUserAccountsWithAttributesResponse

func (w *wrapperListTenantUserAccountsWithAttributesResponse) String() string {
	return (*ListTenantUserAccountsWithAttributesResponse)(w).String()
}

func (*wrapperListTenantUserAccountsWithAttributesResponse) ProtoMessage() {}

func (w *wrapperListTenantUserAccountsWithAttributesResponse) ProtoReflect() protoreflect.Message {
	return (*ListTenantUserAccountsWithAttributesResponse)(w).ProtoReflect()
}
