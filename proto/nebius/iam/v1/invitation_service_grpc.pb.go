// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: nebius/iam/v1/invitation_service.proto

package v1

import (
	context "context"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InvitationService_Create_FullMethodName = "/nebius.iam.v1.InvitationService/Create"
	InvitationService_Get_FullMethodName    = "/nebius.iam.v1.InvitationService/Get"
	InvitationService_List_FullMethodName   = "/nebius.iam.v1.InvitationService/List"
	InvitationService_Delete_FullMethodName = "/nebius.iam.v1.InvitationService/Delete"
	InvitationService_Update_FullMethodName = "/nebius.iam.v1.InvitationService/Update"
	InvitationService_Resend_FullMethodName = "/nebius.iam.v1.InvitationService/Resend"
)

// InvitationServiceClient is the client API for InvitationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InvitationServiceClient interface {
	Create(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Get(ctx context.Context, in *GetInvitationRequest, opts ...grpc.CallOption) (*Invitation, error)
	List(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*ListInvitationsResponse, error)
	Delete(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Update(ctx context.Context, in *UpdateInvitationRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Resend(ctx context.Context, in *ResendInvitationRequest, opts ...grpc.CallOption) (*v1.Operation, error)
}

type invitationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInvitationServiceClient(cc grpc.ClientConnInterface) InvitationServiceClient {
	return &invitationServiceClient{cc}
}

func (c *invitationServiceClient) Create(ctx context.Context, in *CreateInvitationRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, InvitationService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) Get(ctx context.Context, in *GetInvitationRequest, opts ...grpc.CallOption) (*Invitation, error) {
	out := new(Invitation)
	err := c.cc.Invoke(ctx, InvitationService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) List(ctx context.Context, in *ListInvitationsRequest, opts ...grpc.CallOption) (*ListInvitationsResponse, error) {
	out := new(ListInvitationsResponse)
	err := c.cc.Invoke(ctx, InvitationService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) Delete(ctx context.Context, in *DeleteInvitationRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, InvitationService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) Update(ctx context.Context, in *UpdateInvitationRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, InvitationService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *invitationServiceClient) Resend(ctx context.Context, in *ResendInvitationRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, InvitationService_Resend_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InvitationServiceServer is the server API for InvitationService service.
// All implementations should embed UnimplementedInvitationServiceServer
// for forward compatibility
type InvitationServiceServer interface {
	Create(context.Context, *CreateInvitationRequest) (*v1.Operation, error)
	Get(context.Context, *GetInvitationRequest) (*Invitation, error)
	List(context.Context, *ListInvitationsRequest) (*ListInvitationsResponse, error)
	Delete(context.Context, *DeleteInvitationRequest) (*v1.Operation, error)
	Update(context.Context, *UpdateInvitationRequest) (*v1.Operation, error)
	Resend(context.Context, *ResendInvitationRequest) (*v1.Operation, error)
}

// UnimplementedInvitationServiceServer should be embedded to have forward compatible implementations.
type UnimplementedInvitationServiceServer struct {
}

func (UnimplementedInvitationServiceServer) Create(context.Context, *CreateInvitationRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedInvitationServiceServer) Get(context.Context, *GetInvitationRequest) (*Invitation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedInvitationServiceServer) List(context.Context, *ListInvitationsRequest) (*ListInvitationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedInvitationServiceServer) Delete(context.Context, *DeleteInvitationRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedInvitationServiceServer) Update(context.Context, *UpdateInvitationRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedInvitationServiceServer) Resend(context.Context, *ResendInvitationRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resend not implemented")
}

// UnsafeInvitationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InvitationServiceServer will
// result in compilation errors.
type UnsafeInvitationServiceServer interface {
	mustEmbedUnimplementedInvitationServiceServer()
}

func RegisterInvitationServiceServer(s grpc.ServiceRegistrar, srv InvitationServiceServer) {
	s.RegisterService(&InvitationService_ServiceDesc, srv)
}

func _InvitationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).Create(ctx, req.(*CreateInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).Get(ctx, req.(*GetInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInvitationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).List(ctx, req.(*ListInvitationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).Delete(ctx, req.(*DeleteInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).Update(ctx, req.(*UpdateInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InvitationService_Resend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InvitationServiceServer).Resend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InvitationService_Resend_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InvitationServiceServer).Resend(ctx, req.(*ResendInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InvitationService_ServiceDesc is the grpc.ServiceDesc for InvitationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InvitationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebius.iam.v1.InvitationService",
	HandlerType: (*InvitationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _InvitationService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _InvitationService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _InvitationService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _InvitationService_Delete_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _InvitationService_Update_Handler,
		},
		{
			MethodName: "Resend",
			Handler:    _InvitationService_Resend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebius/iam/v1/invitation_service.proto",
}
