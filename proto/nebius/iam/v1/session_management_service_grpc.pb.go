// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: nebius/iam/v1/session_management_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SessionManagementService_Revoke_FullMethodName = "/nebius.iam.v1.SessionManagementService/Revoke"
)

// SessionManagementServiceClient is the client API for SessionManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionManagementServiceClient interface {
	Revoke(ctx context.Context, in *RevokeSessionRequest, opts ...grpc.CallOption) (*RevokeSessionResponse, error)
}

type sessionManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionManagementServiceClient(cc grpc.ClientConnInterface) SessionManagementServiceClient {
	return &sessionManagementServiceClient{cc}
}

func (c *sessionManagementServiceClient) Revoke(ctx context.Context, in *RevokeSessionRequest, opts ...grpc.CallOption) (*RevokeSessionResponse, error) {
	out := new(RevokeSessionResponse)
	err := c.cc.Invoke(ctx, SessionManagementService_Revoke_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionManagementServiceServer is the server API for SessionManagementService service.
// All implementations should embed UnimplementedSessionManagementServiceServer
// for forward compatibility
type SessionManagementServiceServer interface {
	Revoke(context.Context, *RevokeSessionRequest) (*RevokeSessionResponse, error)
}

// UnimplementedSessionManagementServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSessionManagementServiceServer struct {
}

func (UnimplementedSessionManagementServiceServer) Revoke(context.Context, *RevokeSessionRequest) (*RevokeSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Revoke not implemented")
}

// UnsafeSessionManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionManagementServiceServer will
// result in compilation errors.
type UnsafeSessionManagementServiceServer interface {
	mustEmbedUnimplementedSessionManagementServiceServer()
}

func RegisterSessionManagementServiceServer(s grpc.ServiceRegistrar, srv SessionManagementServiceServer) {
	s.RegisterService(&SessionManagementService_ServiceDesc, srv)
}

func _SessionManagementService_Revoke_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionManagementServiceServer).Revoke(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionManagementService_Revoke_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionManagementServiceServer).Revoke(ctx, req.(*RevokeSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionManagementService_ServiceDesc is the grpc.ServiceDesc for SessionManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebius.iam.v1.SessionManagementService",
	HandlerType: (*SessionManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Revoke",
			Handler:    _SessionManagementService_Revoke_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebius/iam/v1/session_management_service.proto",
}
