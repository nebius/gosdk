// Code generated by protoc-gen-sensitive. DO NOT EDIT.

package v1

import (
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	slog "log/slog"
)

// Sanitize mutates [AccessKey] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *AccessKey) Sanitize() {
	if x == nil {
		return
	}
	x.Status.Sanitize()
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [AccessKey].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *AccessKey
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [AccessKey], use the following code:
//
//	var original *AccessKey
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*AccessKey)
func (x *AccessKey) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*AccessKey) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperAccessKey)(c))
}

// wrapperAccessKey is used to return [AccessKey] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperAccessKey AccessKey

func (w *wrapperAccessKey) String() string {
	return (*AccessKey)(w).String()
}

func (*wrapperAccessKey) ProtoMessage() {}

func (w *wrapperAccessKey) ProtoReflect() protoreflect.Message {
	return (*AccessKey)(w).ProtoReflect()
}

// func (x *AccessKeySpec) Sanitize()            // is not generated as no sensitive fields found
// func (x *AccessKeySpec) LogValue() slog.Value // is not generated as no sensitive fields found

// Sanitize mutates [AccessKeyStatus] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *AccessKeyStatus) Sanitize() {
	if x == nil {
		return
	}
	x.Secret = "**HIDDEN**"
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [AccessKeyStatus].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *AccessKeyStatus
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [AccessKeyStatus], use the following code:
//
//	var original *AccessKeyStatus
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*AccessKeyStatus)
func (x *AccessKeyStatus) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*AccessKeyStatus) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperAccessKeyStatus)(c))
}

// wrapperAccessKeyStatus is used to return [AccessKeyStatus] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperAccessKeyStatus AccessKeyStatus

func (w *wrapperAccessKeyStatus) String() string {
	return (*AccessKeyStatus)(w).String()
}

func (*wrapperAccessKeyStatus) ProtoMessage() {}

func (w *wrapperAccessKeyStatus) ProtoReflect() protoreflect.Message {
	return (*AccessKeyStatus)(w).ProtoReflect()
}
