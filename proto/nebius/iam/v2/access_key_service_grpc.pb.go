// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: nebius/iam/v2/access_key_service.proto

package v2

import (
	context "context"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccessKeyService_Create_FullMethodName            = "/nebius.iam.v2.AccessKeyService/Create"
	AccessKeyService_Get_FullMethodName               = "/nebius.iam.v2.AccessKeyService/Get"
	AccessKeyService_GetSecret_FullMethodName         = "/nebius.iam.v2.AccessKeyService/GetSecret"
	AccessKeyService_List_FullMethodName              = "/nebius.iam.v2.AccessKeyService/List"
	AccessKeyService_Update_FullMethodName            = "/nebius.iam.v2.AccessKeyService/Update"
	AccessKeyService_Delete_FullMethodName            = "/nebius.iam.v2.AccessKeyService/Delete"
	AccessKeyService_Activate_FullMethodName          = "/nebius.iam.v2.AccessKeyService/Activate"
	AccessKeyService_Deactivate_FullMethodName        = "/nebius.iam.v2.AccessKeyService/Deactivate"
	AccessKeyService_ListByAccount_FullMethodName     = "/nebius.iam.v2.AccessKeyService/ListByAccount"
	AccessKeyService_GetByAwsId_FullMethodName        = "/nebius.iam.v2.AccessKeyService/GetByAwsId"
	AccessKeyService_DeleteByAwsId_FullMethodName     = "/nebius.iam.v2.AccessKeyService/DeleteByAwsId"
	AccessKeyService_ActivateByAwsId_FullMethodName   = "/nebius.iam.v2.AccessKeyService/ActivateByAwsId"
	AccessKeyService_DeactivateByAwsId_FullMethodName = "/nebius.iam.v2.AccessKeyService/DeactivateByAwsId"
)

// AccessKeyServiceClient is the client API for AccessKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccessKeyServiceClient interface {
	Create(ctx context.Context, in *CreateAccessKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Get(ctx context.Context, in *GetAccessKeyRequest, opts ...grpc.CallOption) (*AccessKey, error)
	GetSecret(ctx context.Context, in *GetAccessKeySecretRequest, opts ...grpc.CallOption) (*GetAccessKeySecretResponse, error)
	List(ctx context.Context, in *ListAccessKeysRequest, opts ...grpc.CallOption) (*ListAccessKeysResponse, error)
	Update(ctx context.Context, in *UpdateAccessKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Delete(ctx context.Context, in *DeleteAccessKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Activate(ctx context.Context, in *ActivateAccessKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Deactivate(ctx context.Context, in *DeactivateAccessKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	ListByAccount(ctx context.Context, in *ListAccessKeysByAccountRequest, opts ...grpc.CallOption) (*ListAccessKeysResponse, error)
	GetByAwsId(ctx context.Context, in *GetAccessKeyByAwsIdRequest, opts ...grpc.CallOption) (*AccessKey, error)
	DeleteByAwsId(ctx context.Context, in *DeleteAccessKeyByAwsIdRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	ActivateByAwsId(ctx context.Context, in *ActivateAccessKeyByAwsIdRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	DeactivateByAwsId(ctx context.Context, in *DeactivateAccessKeyByAwsIdRequest, opts ...grpc.CallOption) (*v1.Operation, error)
}

type accessKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccessKeyServiceClient(cc grpc.ClientConnInterface) AccessKeyServiceClient {
	return &accessKeyServiceClient{cc}
}

func (c *accessKeyServiceClient) Create(ctx context.Context, in *CreateAccessKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, AccessKeyService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) Get(ctx context.Context, in *GetAccessKeyRequest, opts ...grpc.CallOption) (*AccessKey, error) {
	out := new(AccessKey)
	err := c.cc.Invoke(ctx, AccessKeyService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) GetSecret(ctx context.Context, in *GetAccessKeySecretRequest, opts ...grpc.CallOption) (*GetAccessKeySecretResponse, error) {
	out := new(GetAccessKeySecretResponse)
	err := c.cc.Invoke(ctx, AccessKeyService_GetSecret_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) List(ctx context.Context, in *ListAccessKeysRequest, opts ...grpc.CallOption) (*ListAccessKeysResponse, error) {
	out := new(ListAccessKeysResponse)
	err := c.cc.Invoke(ctx, AccessKeyService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) Update(ctx context.Context, in *UpdateAccessKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, AccessKeyService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) Delete(ctx context.Context, in *DeleteAccessKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, AccessKeyService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) Activate(ctx context.Context, in *ActivateAccessKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, AccessKeyService_Activate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) Deactivate(ctx context.Context, in *DeactivateAccessKeyRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, AccessKeyService_Deactivate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) ListByAccount(ctx context.Context, in *ListAccessKeysByAccountRequest, opts ...grpc.CallOption) (*ListAccessKeysResponse, error) {
	out := new(ListAccessKeysResponse)
	err := c.cc.Invoke(ctx, AccessKeyService_ListByAccount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) GetByAwsId(ctx context.Context, in *GetAccessKeyByAwsIdRequest, opts ...grpc.CallOption) (*AccessKey, error) {
	out := new(AccessKey)
	err := c.cc.Invoke(ctx, AccessKeyService_GetByAwsId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) DeleteByAwsId(ctx context.Context, in *DeleteAccessKeyByAwsIdRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, AccessKeyService_DeleteByAwsId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) ActivateByAwsId(ctx context.Context, in *ActivateAccessKeyByAwsIdRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, AccessKeyService_ActivateByAwsId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accessKeyServiceClient) DeactivateByAwsId(ctx context.Context, in *DeactivateAccessKeyByAwsIdRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, AccessKeyService_DeactivateByAwsId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccessKeyServiceServer is the server API for AccessKeyService service.
// All implementations should embed UnimplementedAccessKeyServiceServer
// for forward compatibility
type AccessKeyServiceServer interface {
	Create(context.Context, *CreateAccessKeyRequest) (*v1.Operation, error)
	Get(context.Context, *GetAccessKeyRequest) (*AccessKey, error)
	GetSecret(context.Context, *GetAccessKeySecretRequest) (*GetAccessKeySecretResponse, error)
	List(context.Context, *ListAccessKeysRequest) (*ListAccessKeysResponse, error)
	Update(context.Context, *UpdateAccessKeyRequest) (*v1.Operation, error)
	Delete(context.Context, *DeleteAccessKeyRequest) (*v1.Operation, error)
	Activate(context.Context, *ActivateAccessKeyRequest) (*v1.Operation, error)
	Deactivate(context.Context, *DeactivateAccessKeyRequest) (*v1.Operation, error)
	ListByAccount(context.Context, *ListAccessKeysByAccountRequest) (*ListAccessKeysResponse, error)
	GetByAwsId(context.Context, *GetAccessKeyByAwsIdRequest) (*AccessKey, error)
	DeleteByAwsId(context.Context, *DeleteAccessKeyByAwsIdRequest) (*v1.Operation, error)
	ActivateByAwsId(context.Context, *ActivateAccessKeyByAwsIdRequest) (*v1.Operation, error)
	DeactivateByAwsId(context.Context, *DeactivateAccessKeyByAwsIdRequest) (*v1.Operation, error)
}

// UnimplementedAccessKeyServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAccessKeyServiceServer struct {
}

func (UnimplementedAccessKeyServiceServer) Create(context.Context, *CreateAccessKeyRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAccessKeyServiceServer) Get(context.Context, *GetAccessKeyRequest) (*AccessKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedAccessKeyServiceServer) GetSecret(context.Context, *GetAccessKeySecretRequest) (*GetAccessKeySecretResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedAccessKeyServiceServer) List(context.Context, *ListAccessKeysRequest) (*ListAccessKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedAccessKeyServiceServer) Update(context.Context, *UpdateAccessKeyRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAccessKeyServiceServer) Delete(context.Context, *DeleteAccessKeyRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAccessKeyServiceServer) Activate(context.Context, *ActivateAccessKeyRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Activate not implemented")
}
func (UnimplementedAccessKeyServiceServer) Deactivate(context.Context, *DeactivateAccessKeyRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deactivate not implemented")
}
func (UnimplementedAccessKeyServiceServer) ListByAccount(context.Context, *ListAccessKeysByAccountRequest) (*ListAccessKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByAccount not implemented")
}
func (UnimplementedAccessKeyServiceServer) GetByAwsId(context.Context, *GetAccessKeyByAwsIdRequest) (*AccessKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByAwsId not implemented")
}
func (UnimplementedAccessKeyServiceServer) DeleteByAwsId(context.Context, *DeleteAccessKeyByAwsIdRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByAwsId not implemented")
}
func (UnimplementedAccessKeyServiceServer) ActivateByAwsId(context.Context, *ActivateAccessKeyByAwsIdRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActivateByAwsId not implemented")
}
func (UnimplementedAccessKeyServiceServer) DeactivateByAwsId(context.Context, *DeactivateAccessKeyByAwsIdRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateByAwsId not implemented")
}

// UnsafeAccessKeyServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccessKeyServiceServer will
// result in compilation errors.
type UnsafeAccessKeyServiceServer interface {
	mustEmbedUnimplementedAccessKeyServiceServer()
}

func RegisterAccessKeyServiceServer(s grpc.ServiceRegistrar, srv AccessKeyServiceServer) {
	s.RegisterService(&AccessKeyService_ServiceDesc, srv)
}

func _AccessKeyService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).Create(ctx, req.(*CreateAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).Get(ctx, req.(*GetAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessKeySecretRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_GetSecret_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).GetSecret(ctx, req.(*GetAccessKeySecretRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).List(ctx, req.(*ListAccessKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).Update(ctx, req.(*UpdateAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).Delete(ctx, req.(*DeleteAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_Activate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).Activate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_Activate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).Activate(ctx, req.(*ActivateAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_Deactivate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateAccessKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).Deactivate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_Deactivate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).Deactivate(ctx, req.(*DeactivateAccessKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_ListByAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAccessKeysByAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).ListByAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_ListByAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).ListByAccount(ctx, req.(*ListAccessKeysByAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_GetByAwsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccessKeyByAwsIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).GetByAwsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_GetByAwsId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).GetByAwsId(ctx, req.(*GetAccessKeyByAwsIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_DeleteByAwsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAccessKeyByAwsIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).DeleteByAwsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_DeleteByAwsId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).DeleteByAwsId(ctx, req.(*DeleteAccessKeyByAwsIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_ActivateByAwsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActivateAccessKeyByAwsIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).ActivateByAwsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_ActivateByAwsId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).ActivateByAwsId(ctx, req.(*ActivateAccessKeyByAwsIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccessKeyService_DeactivateByAwsId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeactivateAccessKeyByAwsIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccessKeyServiceServer).DeactivateByAwsId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccessKeyService_DeactivateByAwsId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccessKeyServiceServer).DeactivateByAwsId(ctx, req.(*DeactivateAccessKeyByAwsIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccessKeyService_ServiceDesc is the grpc.ServiceDesc for AccessKeyService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccessKeyService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebius.iam.v2.AccessKeyService",
	HandlerType: (*AccessKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _AccessKeyService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _AccessKeyService_Get_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _AccessKeyService_GetSecret_Handler,
		},
		{
			MethodName: "List",
			Handler:    _AccessKeyService_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _AccessKeyService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AccessKeyService_Delete_Handler,
		},
		{
			MethodName: "Activate",
			Handler:    _AccessKeyService_Activate_Handler,
		},
		{
			MethodName: "Deactivate",
			Handler:    _AccessKeyService_Deactivate_Handler,
		},
		{
			MethodName: "ListByAccount",
			Handler:    _AccessKeyService_ListByAccount_Handler,
		},
		{
			MethodName: "GetByAwsId",
			Handler:    _AccessKeyService_GetByAwsId_Handler,
		},
		{
			MethodName: "DeleteByAwsId",
			Handler:    _AccessKeyService_DeleteByAwsId_Handler,
		},
		{
			MethodName: "ActivateByAwsId",
			Handler:    _AccessKeyService_ActivateByAwsId_Handler,
		},
		{
			MethodName: "DeactivateByAwsId",
			Handler:    _AccessKeyService_DeactivateByAwsId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebius/iam/v2/access_key_service.proto",
}
