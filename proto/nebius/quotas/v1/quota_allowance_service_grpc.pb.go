// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: nebius/quotas/v1/quota_allowance_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	QuotaAllowanceService_List_FullMethodName      = "/nebius.quotas.v1.QuotaAllowanceService/List"
	QuotaAllowanceService_Get_FullMethodName       = "/nebius.quotas.v1.QuotaAllowanceService/Get"
	QuotaAllowanceService_GetByName_FullMethodName = "/nebius.quotas.v1.QuotaAllowanceService/GetByName"
)

// QuotaAllowanceServiceClient is the client API for QuotaAllowanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuotaAllowanceServiceClient interface {
	// Lists quotas by an ID of a Tenant or a Project.
	List(ctx context.Context, in *ListQuotaAllowancesRequest, opts ...grpc.CallOption) (*ListQuotaAllowancesResponse, error)
	// Gets a quota by its ID.
	Get(ctx context.Context, in *GetQuotaAllowanceRequest, opts ...grpc.CallOption) (*QuotaAllowance, error)
	// Gets a quota by an ID of a Tenant or a Project, its region, and name.
	GetByName(ctx context.Context, in *GetByNameRequest, opts ...grpc.CallOption) (*QuotaAllowance, error)
}

type quotaAllowanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotaAllowanceServiceClient(cc grpc.ClientConnInterface) QuotaAllowanceServiceClient {
	return &quotaAllowanceServiceClient{cc}
}

func (c *quotaAllowanceServiceClient) List(ctx context.Context, in *ListQuotaAllowancesRequest, opts ...grpc.CallOption) (*ListQuotaAllowancesResponse, error) {
	out := new(ListQuotaAllowancesResponse)
	err := c.cc.Invoke(ctx, QuotaAllowanceService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaAllowanceServiceClient) Get(ctx context.Context, in *GetQuotaAllowanceRequest, opts ...grpc.CallOption) (*QuotaAllowance, error) {
	out := new(QuotaAllowance)
	err := c.cc.Invoke(ctx, QuotaAllowanceService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *quotaAllowanceServiceClient) GetByName(ctx context.Context, in *GetByNameRequest, opts ...grpc.CallOption) (*QuotaAllowance, error) {
	out := new(QuotaAllowance)
	err := c.cc.Invoke(ctx, QuotaAllowanceService_GetByName_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotaAllowanceServiceServer is the server API for QuotaAllowanceService service.
// All implementations should embed UnimplementedQuotaAllowanceServiceServer
// for forward compatibility
type QuotaAllowanceServiceServer interface {
	// Lists quotas by an ID of a Tenant or a Project.
	List(context.Context, *ListQuotaAllowancesRequest) (*ListQuotaAllowancesResponse, error)
	// Gets a quota by its ID.
	Get(context.Context, *GetQuotaAllowanceRequest) (*QuotaAllowance, error)
	// Gets a quota by an ID of a Tenant or a Project, its region, and name.
	GetByName(context.Context, *GetByNameRequest) (*QuotaAllowance, error)
}

// UnimplementedQuotaAllowanceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedQuotaAllowanceServiceServer struct {
}

func (UnimplementedQuotaAllowanceServiceServer) List(context.Context, *ListQuotaAllowancesRequest) (*ListQuotaAllowancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedQuotaAllowanceServiceServer) Get(context.Context, *GetQuotaAllowanceRequest) (*QuotaAllowance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedQuotaAllowanceServiceServer) GetByName(context.Context, *GetByNameRequest) (*QuotaAllowance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByName not implemented")
}

// UnsafeQuotaAllowanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotaAllowanceServiceServer will
// result in compilation errors.
type UnsafeQuotaAllowanceServiceServer interface {
	mustEmbedUnimplementedQuotaAllowanceServiceServer()
}

func RegisterQuotaAllowanceServiceServer(s grpc.ServiceRegistrar, srv QuotaAllowanceServiceServer) {
	s.RegisterService(&QuotaAllowanceService_ServiceDesc, srv)
}

func _QuotaAllowanceService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuotaAllowancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaAllowanceServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaAllowanceService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaAllowanceServiceServer).List(ctx, req.(*ListQuotaAllowancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaAllowanceService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotaAllowanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaAllowanceServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaAllowanceService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaAllowanceServiceServer).Get(ctx, req.(*GetQuotaAllowanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QuotaAllowanceService_GetByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotaAllowanceServiceServer).GetByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QuotaAllowanceService_GetByName_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotaAllowanceServiceServer).GetByName(ctx, req.(*GetByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QuotaAllowanceService_ServiceDesc is the grpc.ServiceDesc for QuotaAllowanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QuotaAllowanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebius.quotas.v1.QuotaAllowanceService",
	HandlerType: (*QuotaAllowanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _QuotaAllowanceService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _QuotaAllowanceService_Get_Handler,
		},
		{
			MethodName: "GetByName",
			Handler:    _QuotaAllowanceService_GetByName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebius/quotas/v1/quota_allowance_service.proto",
}
