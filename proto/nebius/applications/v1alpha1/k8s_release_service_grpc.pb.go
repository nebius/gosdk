// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: nebius/applications/v1alpha1/k8s_release_service.proto

package v1alpha1

import (
	context "context"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	K8SReleaseService_Get_FullMethodName    = "/nebius.applications.v1alpha1.K8sReleaseService/Get"
	K8SReleaseService_List_FullMethodName   = "/nebius.applications.v1alpha1.K8sReleaseService/List"
	K8SReleaseService_Create_FullMethodName = "/nebius.applications.v1alpha1.K8sReleaseService/Create"
	K8SReleaseService_Delete_FullMethodName = "/nebius.applications.v1alpha1.K8sReleaseService/Delete"
)

// K8SReleaseServiceClient is the client API for K8SReleaseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type K8SReleaseServiceClient interface {
	Get(ctx context.Context, in *GetK8SReleaseRequest, opts ...grpc.CallOption) (*K8SRelease, error)
	List(ctx context.Context, in *ListK8SReleasesRequest, opts ...grpc.CallOption) (*ListK8SReleasesResponse, error)
	Create(ctx context.Context, in *CreateK8SReleaseRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	Delete(ctx context.Context, in *DeleteK8SReleaseRequest, opts ...grpc.CallOption) (*v1.Operation, error)
}

type k8SReleaseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewK8SReleaseServiceClient(cc grpc.ClientConnInterface) K8SReleaseServiceClient {
	return &k8SReleaseServiceClient{cc}
}

func (c *k8SReleaseServiceClient) Get(ctx context.Context, in *GetK8SReleaseRequest, opts ...grpc.CallOption) (*K8SRelease, error) {
	out := new(K8SRelease)
	err := c.cc.Invoke(ctx, K8SReleaseService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SReleaseServiceClient) List(ctx context.Context, in *ListK8SReleasesRequest, opts ...grpc.CallOption) (*ListK8SReleasesResponse, error) {
	out := new(ListK8SReleasesResponse)
	err := c.cc.Invoke(ctx, K8SReleaseService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SReleaseServiceClient) Create(ctx context.Context, in *CreateK8SReleaseRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, K8SReleaseService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8SReleaseServiceClient) Delete(ctx context.Context, in *DeleteK8SReleaseRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, K8SReleaseService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// K8SReleaseServiceServer is the server API for K8SReleaseService service.
// All implementations should embed UnimplementedK8SReleaseServiceServer
// for forward compatibility
type K8SReleaseServiceServer interface {
	Get(context.Context, *GetK8SReleaseRequest) (*K8SRelease, error)
	List(context.Context, *ListK8SReleasesRequest) (*ListK8SReleasesResponse, error)
	Create(context.Context, *CreateK8SReleaseRequest) (*v1.Operation, error)
	Delete(context.Context, *DeleteK8SReleaseRequest) (*v1.Operation, error)
}

// UnimplementedK8SReleaseServiceServer should be embedded to have forward compatible implementations.
type UnimplementedK8SReleaseServiceServer struct {
}

func (UnimplementedK8SReleaseServiceServer) Get(context.Context, *GetK8SReleaseRequest) (*K8SRelease, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedK8SReleaseServiceServer) List(context.Context, *ListK8SReleasesRequest) (*ListK8SReleasesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedK8SReleaseServiceServer) Create(context.Context, *CreateK8SReleaseRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedK8SReleaseServiceServer) Delete(context.Context, *DeleteK8SReleaseRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeK8SReleaseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to K8SReleaseServiceServer will
// result in compilation errors.
type UnsafeK8SReleaseServiceServer interface {
	mustEmbedUnimplementedK8SReleaseServiceServer()
}

func RegisterK8SReleaseServiceServer(s grpc.ServiceRegistrar, srv K8SReleaseServiceServer) {
	s.RegisterService(&K8SReleaseService_ServiceDesc, srv)
}

func _K8SReleaseService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetK8SReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SReleaseServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SReleaseService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SReleaseServiceServer).Get(ctx, req.(*GetK8SReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SReleaseService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListK8SReleasesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SReleaseServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SReleaseService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SReleaseServiceServer).List(ctx, req.(*ListK8SReleasesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SReleaseService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateK8SReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SReleaseServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SReleaseService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SReleaseServiceServer).Create(ctx, req.(*CreateK8SReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8SReleaseService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteK8SReleaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8SReleaseServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: K8SReleaseService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8SReleaseServiceServer).Delete(ctx, req.(*DeleteK8SReleaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// K8SReleaseService_ServiceDesc is the grpc.ServiceDesc for K8SReleaseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var K8SReleaseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebius.applications.v1alpha1.K8sReleaseService",
	HandlerType: (*K8SReleaseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _K8SReleaseService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _K8SReleaseService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _K8SReleaseService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _K8SReleaseService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebius/applications/v1alpha1/k8s_release_service.proto",
}
