// Code generated by protoc-gen-sensitive. DO NOT EDIT.

package v1alpha1

import (
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	slog "log/slog"
)

// func (x *GetK8SReleaseRequest) Sanitize()            // is not generated as no sensitive fields found
// func (x *GetK8SReleaseRequest) LogValue() slog.Value // is not generated as no sensitive fields found

// func (x *ListK8SReleasesRequest) Sanitize()            // is not generated as no sensitive fields found
// func (x *ListK8SReleasesRequest) LogValue() slog.Value // is not generated as no sensitive fields found

// Sanitize mutates [CreateK8SReleaseRequest] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *CreateK8SReleaseRequest) Sanitize() {
	if x == nil {
		return
	}
	x.Spec.Sanitize()
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [CreateK8SReleaseRequest].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with `***`, other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *CreateK8SReleaseRequest
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [CreateK8SReleaseRequest], use the following code:
//
//	var original *CreateK8SReleaseRequest
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*CreateK8SReleaseRequest)
func (x *CreateK8SReleaseRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*CreateK8SReleaseRequest) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperCreateK8SReleaseRequest)(c))
}

// wrapperCreateK8SReleaseRequest is used to return [CreateK8SReleaseRequest] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperCreateK8SReleaseRequest CreateK8SReleaseRequest

func (w *wrapperCreateK8SReleaseRequest) String() string {
	return (*CreateK8SReleaseRequest)(w).String()
}

func (*wrapperCreateK8SReleaseRequest) ProtoMessage() {}

func (w *wrapperCreateK8SReleaseRequest) ProtoReflect() protoreflect.Message {
	return (*CreateK8SReleaseRequest)(w).ProtoReflect()
}

// func (x *DeleteK8SReleaseRequest) Sanitize()            // is not generated as no sensitive fields found
// func (x *DeleteK8SReleaseRequest) LogValue() slog.Value // is not generated as no sensitive fields found

// Sanitize mutates [ListK8SReleasesResponse] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *ListK8SReleasesResponse) Sanitize() {
	if x == nil {
		return
	}
	for _, y := range x.Items {
		y.Sanitize()
	}
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [ListK8SReleasesResponse].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with `***`, other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *ListK8SReleasesResponse
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [ListK8SReleasesResponse], use the following code:
//
//	var original *ListK8SReleasesResponse
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*ListK8SReleasesResponse)
func (x *ListK8SReleasesResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*ListK8SReleasesResponse) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperListK8SReleasesResponse)(c))
}

// wrapperListK8SReleasesResponse is used to return [ListK8SReleasesResponse] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperListK8SReleasesResponse ListK8SReleasesResponse

func (w *wrapperListK8SReleasesResponse) String() string {
	return (*ListK8SReleasesResponse)(w).String()
}

func (*wrapperListK8SReleasesResponse) ProtoMessage() {}

func (w *wrapperListK8SReleasesResponse) ProtoReflect() protoreflect.Message {
	return (*ListK8SReleasesResponse)(w).ProtoReflect()
}
