// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.4
// 	protoc        v5.28.3
// source: nebius/common/v1/error.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ServiceError_RetryType int32

const (
	ServiceError_UNSPECIFIED ServiceError_RetryType = 0
	// Just retry the failed call.
	ServiceError_CALL ServiceError_RetryType = 1
	// Retry whole logic before call and make a new one.
	ServiceError_UNIT_OF_WORK ServiceError_RetryType = 2
	// Do not retry, this is a fatal error.
	ServiceError_NOTHING ServiceError_RetryType = 3
)

// Enum value maps for ServiceError_RetryType.
var (
	ServiceError_RetryType_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "CALL",
		2: "UNIT_OF_WORK",
		3: "NOTHING",
	}
	ServiceError_RetryType_value = map[string]int32{
		"UNSPECIFIED":  0,
		"CALL":         1,
		"UNIT_OF_WORK": 2,
		"NOTHING":      3,
	}
)

func (x ServiceError_RetryType) Enum() *ServiceError_RetryType {
	p := new(ServiceError_RetryType)
	*p = x
	return p
}

func (x ServiceError_RetryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ServiceError_RetryType) Descriptor() protoreflect.EnumDescriptor {
	return file_nebius_common_v1_error_proto_enumTypes[0].Descriptor()
}

func (ServiceError_RetryType) Type() protoreflect.EnumType {
	return &file_nebius_common_v1_error_proto_enumTypes[0]
}

func (x ServiceError_RetryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ServiceError_RetryType.Descriptor instead.
func (ServiceError_RetryType) EnumDescriptor() ([]byte, []int) {
	return file_nebius_common_v1_error_proto_rawDescGZIP(), []int{0, 0}
}

type ServiceError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of Service which the error originated in. E.g. "dns".
	Service string `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	// Detailed error code, service-specific. E.g. "DnsZoneNotEmpty".
	// Name of the exception, without Exception suffix if not set.
	// Example: for PermissionDeniedException -> code == PermissionDenied.
	Code string `protobuf:"bytes,2,opt,name=code,proto3" json:"code,omitempty"`
	// Additional message describing the error, if any.
	//
	// Types that are valid to be assigned to Details:
	//
	//	*ServiceError_BadRequest
	//	*ServiceError_BadResourceState
	//	*ServiceError_ResourceNotFound
	//	*ServiceError_ResourceAlreadyExists
	//	*ServiceError_OutOfRange
	//	*ServiceError_PermissionDenied
	//	*ServiceError_ResourceConflict
	//	*ServiceError_OperationAborted
	//	*ServiceError_TooManyRequests
	//	*ServiceError_QuotaFailure
	//	*ServiceError_NotEnoughResources
	//	*ServiceError_InternalError
	Details isServiceError_Details `protobuf_oneof:"details"`
	// Retry type tells how to provide retry, e.g.: just a single call or the whole logic before it.
	RetryType     ServiceError_RetryType `protobuf:"varint,30,opt,name=retry_type,json=retryType,proto3,enum=nebius.common.v1.ServiceError_RetryType" json:"retry_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ServiceError) Reset() {
	*x = ServiceError{}
	mi := &file_nebius_common_v1_error_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ServiceError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceError) ProtoMessage() {}

func (x *ServiceError) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_common_v1_error_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceError.ProtoReflect.Descriptor instead.
func (*ServiceError) Descriptor() ([]byte, []int) {
	return file_nebius_common_v1_error_proto_rawDescGZIP(), []int{0}
}

func (x *ServiceError) GetService() string {
	if x != nil {
		return x.Service
	}
	return ""
}

func (x *ServiceError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ServiceError) GetDetails() isServiceError_Details {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *ServiceError) GetBadRequest() *BadRequest {
	if x != nil {
		if x, ok := x.Details.(*ServiceError_BadRequest); ok {
			return x.BadRequest
		}
	}
	return nil
}

func (x *ServiceError) GetBadResourceState() *BadResourceState {
	if x != nil {
		if x, ok := x.Details.(*ServiceError_BadResourceState); ok {
			return x.BadResourceState
		}
	}
	return nil
}

func (x *ServiceError) GetResourceNotFound() *ResourceNotFound {
	if x != nil {
		if x, ok := x.Details.(*ServiceError_ResourceNotFound); ok {
			return x.ResourceNotFound
		}
	}
	return nil
}

func (x *ServiceError) GetResourceAlreadyExists() *ResourceAlreadyExists {
	if x != nil {
		if x, ok := x.Details.(*ServiceError_ResourceAlreadyExists); ok {
			return x.ResourceAlreadyExists
		}
	}
	return nil
}

func (x *ServiceError) GetOutOfRange() *OutOfRange {
	if x != nil {
		if x, ok := x.Details.(*ServiceError_OutOfRange); ok {
			return x.OutOfRange
		}
	}
	return nil
}

func (x *ServiceError) GetPermissionDenied() *PermissionDenied {
	if x != nil {
		if x, ok := x.Details.(*ServiceError_PermissionDenied); ok {
			return x.PermissionDenied
		}
	}
	return nil
}

func (x *ServiceError) GetResourceConflict() *ResourceConflict {
	if x != nil {
		if x, ok := x.Details.(*ServiceError_ResourceConflict); ok {
			return x.ResourceConflict
		}
	}
	return nil
}

func (x *ServiceError) GetOperationAborted() *OperationAborted {
	if x != nil {
		if x, ok := x.Details.(*ServiceError_OperationAborted); ok {
			return x.OperationAborted
		}
	}
	return nil
}

func (x *ServiceError) GetTooManyRequests() *TooManyRequests {
	if x != nil {
		if x, ok := x.Details.(*ServiceError_TooManyRequests); ok {
			return x.TooManyRequests
		}
	}
	return nil
}

func (x *ServiceError) GetQuotaFailure() *QuotaFailure {
	if x != nil {
		if x, ok := x.Details.(*ServiceError_QuotaFailure); ok {
			return x.QuotaFailure
		}
	}
	return nil
}

func (x *ServiceError) GetNotEnoughResources() *NotEnoughResources {
	if x != nil {
		if x, ok := x.Details.(*ServiceError_NotEnoughResources); ok {
			return x.NotEnoughResources
		}
	}
	return nil
}

func (x *ServiceError) GetInternalError() *InternalError {
	if x != nil {
		if x, ok := x.Details.(*ServiceError_InternalError); ok {
			return x.InternalError
		}
	}
	return nil
}

func (x *ServiceError) GetRetryType() ServiceError_RetryType {
	if x != nil {
		return x.RetryType
	}
	return ServiceError_UNSPECIFIED
}

type isServiceError_Details interface {
	isServiceError_Details()
}

type ServiceError_BadRequest struct {
	BadRequest *BadRequest `protobuf:"bytes,100,opt,name=bad_request,json=badRequest,proto3,oneof"`
}

type ServiceError_BadResourceState struct {
	BadResourceState *BadResourceState `protobuf:"bytes,110,opt,name=bad_resource_state,json=badResourceState,proto3,oneof"`
}

type ServiceError_ResourceNotFound struct {
	ResourceNotFound *ResourceNotFound `protobuf:"bytes,111,opt,name=resource_not_found,json=resourceNotFound,proto3,oneof"`
}

type ServiceError_ResourceAlreadyExists struct {
	ResourceAlreadyExists *ResourceAlreadyExists `protobuf:"bytes,112,opt,name=resource_already_exists,json=resourceAlreadyExists,proto3,oneof"`
}

type ServiceError_OutOfRange struct {
	OutOfRange *OutOfRange `protobuf:"bytes,113,opt,name=out_of_range,json=outOfRange,proto3,oneof"`
}

type ServiceError_PermissionDenied struct {
	PermissionDenied *PermissionDenied `protobuf:"bytes,120,opt,name=permission_denied,json=permissionDenied,proto3,oneof"`
}

type ServiceError_ResourceConflict struct {
	ResourceConflict *ResourceConflict `protobuf:"bytes,130,opt,name=resource_conflict,json=resourceConflict,proto3,oneof"`
}

type ServiceError_OperationAborted struct {
	OperationAborted *OperationAborted `protobuf:"bytes,131,opt,name=operation_aborted,json=operationAborted,proto3,oneof"`
}

type ServiceError_TooManyRequests struct {
	TooManyRequests *TooManyRequests `protobuf:"bytes,140,opt,name=too_many_requests,json=tooManyRequests,proto3,oneof"`
}

type ServiceError_QuotaFailure struct {
	QuotaFailure *QuotaFailure `protobuf:"bytes,141,opt,name=quota_failure,json=quotaFailure,proto3,oneof"`
}

type ServiceError_NotEnoughResources struct {
	NotEnoughResources *NotEnoughResources `protobuf:"bytes,142,opt,name=not_enough_resources,json=notEnoughResources,proto3,oneof"`
}

type ServiceError_InternalError struct {
	InternalError *InternalError `protobuf:"bytes,999,opt,name=internal_error,json=internalError,proto3,oneof"`
}

func (*ServiceError_BadRequest) isServiceError_Details() {}

func (*ServiceError_BadResourceState) isServiceError_Details() {}

func (*ServiceError_ResourceNotFound) isServiceError_Details() {}

func (*ServiceError_ResourceAlreadyExists) isServiceError_Details() {}

func (*ServiceError_OutOfRange) isServiceError_Details() {}

func (*ServiceError_PermissionDenied) isServiceError_Details() {}

func (*ServiceError_ResourceConflict) isServiceError_Details() {}

func (*ServiceError_OperationAborted) isServiceError_Details() {}

func (*ServiceError_TooManyRequests) isServiceError_Details() {}

func (*ServiceError_QuotaFailure) isServiceError_Details() {}

func (*ServiceError_NotEnoughResources) isServiceError_Details() {}

func (*ServiceError_InternalError) isServiceError_Details() {}

// The request is invalid.
type BadRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Describes all violations.
	Violations    []*BadRequest_Violation `protobuf:"bytes,1,rep,name=violations,proto3" json:"violations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BadRequest) Reset() {
	*x = BadRequest{}
	mi := &file_nebius_common_v1_error_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadRequest) ProtoMessage() {}

func (x *BadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_common_v1_error_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadRequest.ProtoReflect.Descriptor instead.
func (*BadRequest) Descriptor() ([]byte, []int) {
	return file_nebius_common_v1_error_proto_rawDescGZIP(), []int{1}
}

func (x *BadRequest) GetViolations() []*BadRequest_Violation {
	if x != nil {
		return x.Violations
	}
	return nil
}

// The resource we are trying to use, create, change or delete is in a bad state and cannot be used.
type BadResourceState struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the resource which is bad.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// The reason why this state is bad and cannot be used.
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BadResourceState) Reset() {
	*x = BadResourceState{}
	mi := &file_nebius_common_v1_error_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BadResourceState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadResourceState) ProtoMessage() {}

func (x *BadResourceState) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_common_v1_error_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadResourceState.ProtoReflect.Descriptor instead.
func (*BadResourceState) Descriptor() ([]byte, []int) {
	return file_nebius_common_v1_error_proto_rawDescGZIP(), []int{2}
}

func (x *BadResourceState) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *BadResourceState) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Resource we are trying to interact with does not exist.
type ResourceNotFound struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the requested resource.
	ResourceId    string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceNotFound) Reset() {
	*x = ResourceNotFound{}
	mi := &file_nebius_common_v1_error_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceNotFound) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceNotFound) ProtoMessage() {}

func (x *ResourceNotFound) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_common_v1_error_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceNotFound.ProtoReflect.Descriptor instead.
func (*ResourceNotFound) Descriptor() ([]byte, []int) {
	return file_nebius_common_v1_error_proto_rawDescGZIP(), []int{3}
}

func (x *ResourceNotFound) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// Resource we are trying to create already exists.
type ResourceAlreadyExists struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the existing resource.
	ResourceId    string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceAlreadyExists) Reset() {
	*x = ResourceAlreadyExists{}
	mi := &file_nebius_common_v1_error_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceAlreadyExists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceAlreadyExists) ProtoMessage() {}

func (x *ResourceAlreadyExists) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_common_v1_error_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceAlreadyExists.ProtoReflect.Descriptor instead.
func (*ResourceAlreadyExists) Descriptor() ([]byte, []int) {
	return file_nebius_common_v1_error_proto_rawDescGZIP(), []int{4}
}

func (x *ResourceAlreadyExists) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// There is a difference between the actual resource state and the expected one.
type ResourceConflict struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of conflicting resource.
	ResourceId string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// Detailed info about conflict.
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ResourceConflict) Reset() {
	*x = ResourceConflict{}
	mi := &file_nebius_common_v1_error_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceConflict) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceConflict) ProtoMessage() {}

func (x *ResourceConflict) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_common_v1_error_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceConflict.ProtoReflect.Descriptor instead.
func (*ResourceConflict) Descriptor() ([]byte, []int) {
	return file_nebius_common_v1_error_proto_rawDescGZIP(), []int{5}
}

func (x *ResourceConflict) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

func (x *ResourceConflict) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Operation on the resource has been aborted by a subsequent operation.
type OperationAborted struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the aborted operation.
	OperationId string `protobuf:"bytes,1,opt,name=operation_id,json=operationId,proto3" json:"operation_id,omitempty"`
	// ID of the subsequent operation.
	AbortedByOperationId string `protobuf:"bytes,2,opt,name=aborted_by_operation_id,json=abortedByOperationId,proto3" json:"aborted_by_operation_id,omitempty"`
	// Resource ID corresponding to both of the operations.
	ResourceId    string `protobuf:"bytes,3,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OperationAborted) Reset() {
	*x = OperationAborted{}
	mi := &file_nebius_common_v1_error_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OperationAborted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperationAborted) ProtoMessage() {}

func (x *OperationAborted) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_common_v1_error_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperationAborted.ProtoReflect.Descriptor instead.
func (*OperationAborted) Descriptor() ([]byte, []int) {
	return file_nebius_common_v1_error_proto_rawDescGZIP(), []int{6}
}

func (x *OperationAborted) GetOperationId() string {
	if x != nil {
		return x.OperationId
	}
	return ""
}

func (x *OperationAborted) GetAbortedByOperationId() string {
	if x != nil {
		return x.AbortedByOperationId
	}
	return ""
}

func (x *OperationAborted) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// Indicates that element with requested parameters is exceeding the particular range.
type OutOfRange struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Requested value.
	Requested string `protobuf:"bytes,1,opt,name=requested,proto3" json:"requested,omitempty"`
	// Available limit.
	Limit         string `protobuf:"bytes,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OutOfRange) Reset() {
	*x = OutOfRange{}
	mi := &file_nebius_common_v1_error_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OutOfRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutOfRange) ProtoMessage() {}

func (x *OutOfRange) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_common_v1_error_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutOfRange.ProtoReflect.Descriptor instead.
func (*OutOfRange) Descriptor() ([]byte, []int) {
	return file_nebius_common_v1_error_proto_rawDescGZIP(), []int{7}
}

func (x *OutOfRange) GetRequested() string {
	if x != nil {
		return x.Requested
	}
	return ""
}

func (x *OutOfRange) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

// Indicates that the action cannot be performed because there are insufficient access rights to a resource.
type PermissionDenied struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the resource that cannot be accessed.
	ResourceId    string `protobuf:"bytes,1,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PermissionDenied) Reset() {
	*x = PermissionDenied{}
	mi := &file_nebius_common_v1_error_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PermissionDenied) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionDenied) ProtoMessage() {}

func (x *PermissionDenied) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_common_v1_error_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionDenied.ProtoReflect.Descriptor instead.
func (*PermissionDenied) Descriptor() ([]byte, []int) {
	return file_nebius_common_v1_error_proto_rawDescGZIP(), []int{8}
}

func (x *PermissionDenied) GetResourceId() string {
	if x != nil {
		return x.ResourceId
	}
	return ""
}

// Generic internal error.
type InternalError struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Error request ID.
	RequestId string `protobuf:"bytes,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Trace ID for the failing request.
	TraceId       string `protobuf:"bytes,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *InternalError) Reset() {
	*x = InternalError{}
	mi := &file_nebius_common_v1_error_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InternalError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternalError) ProtoMessage() {}

func (x *InternalError) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_common_v1_error_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternalError.ProtoReflect.Descriptor instead.
func (*InternalError) Descriptor() ([]byte, []int) {
	return file_nebius_common_v1_error_proto_rawDescGZIP(), []int{9}
}

func (x *InternalError) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *InternalError) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

// You initiated too many requests to the service at once. Enhance your calm.
type TooManyRequests struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// What request limit is exceeded (service-dependent).
	Violation     string `protobuf:"bytes,1,opt,name=violation,proto3" json:"violation,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TooManyRequests) Reset() {
	*x = TooManyRequests{}
	mi := &file_nebius_common_v1_error_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TooManyRequests) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TooManyRequests) ProtoMessage() {}

func (x *TooManyRequests) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_common_v1_error_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TooManyRequests.ProtoReflect.Descriptor instead.
func (*TooManyRequests) Descriptor() ([]byte, []int) {
	return file_nebius_common_v1_error_proto_rawDescGZIP(), []int{10}
}

func (x *TooManyRequests) GetViolation() string {
	if x != nil {
		return x.Violation
	}
	return ""
}

// Indicates a failure due to exceeding specified limits or allocations in a system or service.
type QuotaFailure struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Describes all quota violations.
	Violations    []*QuotaFailure_Violation `protobuf:"bytes,1,rep,name=violations,proto3" json:"violations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuotaFailure) Reset() {
	*x = QuotaFailure{}
	mi := &file_nebius_common_v1_error_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuotaFailure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaFailure) ProtoMessage() {}

func (x *QuotaFailure) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_common_v1_error_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaFailure.ProtoReflect.Descriptor instead.
func (*QuotaFailure) Descriptor() ([]byte, []int) {
	return file_nebius_common_v1_error_proto_rawDescGZIP(), []int{11}
}

func (x *QuotaFailure) GetViolations() []*QuotaFailure_Violation {
	if x != nil {
		return x.Violations
	}
	return nil
}

// Indicates that there are not enough resources available to perform the requested action.
type NotEnoughResources struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Describes all resource violations.
	Violations    []*NotEnoughResources_Violation `protobuf:"bytes,1,rep,name=violations,proto3" json:"violations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotEnoughResources) Reset() {
	*x = NotEnoughResources{}
	mi := &file_nebius_common_v1_error_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotEnoughResources) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotEnoughResources) ProtoMessage() {}

func (x *NotEnoughResources) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_common_v1_error_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotEnoughResources.ProtoReflect.Descriptor instead.
func (*NotEnoughResources) Descriptor() ([]byte, []int) {
	return file_nebius_common_v1_error_proto_rawDescGZIP(), []int{12}
}

func (x *NotEnoughResources) GetViolations() []*NotEnoughResources_Violation {
	if x != nil {
		return x.Violations
	}
	return nil
}

type BadRequest_Violation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// What field value is invalid.
	Field string `protobuf:"bytes,1,opt,name=field,proto3" json:"field,omitempty"`
	// Description why the value is invalid, in English.
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BadRequest_Violation) Reset() {
	*x = BadRequest_Violation{}
	mi := &file_nebius_common_v1_error_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BadRequest_Violation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BadRequest_Violation) ProtoMessage() {}

func (x *BadRequest_Violation) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_common_v1_error_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BadRequest_Violation.ProtoReflect.Descriptor instead.
func (*BadRequest_Violation) Descriptor() ([]byte, []int) {
	return file_nebius_common_v1_error_proto_rawDescGZIP(), []int{1, 0}
}

func (x *BadRequest_Violation) GetField() string {
	if x != nil {
		return x.Field
	}
	return ""
}

func (x *BadRequest_Violation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type QuotaFailure_Violation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Which quota check failed.
	Quota string `protobuf:"bytes,1,opt,name=quota,proto3" json:"quota,omitempty"`
	// A description of how the quota check failed.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Maximum permissible value.
	Limit string `protobuf:"bytes,3,opt,name=limit,proto3" json:"limit,omitempty"`
	// Requested value.
	Requested     string `protobuf:"bytes,4,opt,name=requested,proto3" json:"requested,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuotaFailure_Violation) Reset() {
	*x = QuotaFailure_Violation{}
	mi := &file_nebius_common_v1_error_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuotaFailure_Violation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotaFailure_Violation) ProtoMessage() {}

func (x *QuotaFailure_Violation) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_common_v1_error_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotaFailure_Violation.ProtoReflect.Descriptor instead.
func (*QuotaFailure_Violation) Descriptor() ([]byte, []int) {
	return file_nebius_common_v1_error_proto_rawDescGZIP(), []int{11, 0}
}

func (x *QuotaFailure_Violation) GetQuota() string {
	if x != nil {
		return x.Quota
	}
	return ""
}

func (x *QuotaFailure_Violation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *QuotaFailure_Violation) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *QuotaFailure_Violation) GetRequested() string {
	if x != nil {
		return x.Requested
	}
	return ""
}

type NotEnoughResources_Violation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The type of resource that is insufficient.
	// This field is populated when it is possible to determine the lacking resource type.
	// **Not for programmatic use.**
	ResourceType string `protobuf:"bytes,1,opt,name=resource_type,json=resourceType,proto3" json:"resource_type,omitempty"`
	// A description of how the resource is insufficient.
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	// Requested value.
	Requested     string `protobuf:"bytes,3,opt,name=requested,proto3" json:"requested,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NotEnoughResources_Violation) Reset() {
	*x = NotEnoughResources_Violation{}
	mi := &file_nebius_common_v1_error_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NotEnoughResources_Violation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotEnoughResources_Violation) ProtoMessage() {}

func (x *NotEnoughResources_Violation) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_common_v1_error_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotEnoughResources_Violation.ProtoReflect.Descriptor instead.
func (*NotEnoughResources_Violation) Descriptor() ([]byte, []int) {
	return file_nebius_common_v1_error_proto_rawDescGZIP(), []int{12, 0}
}

func (x *NotEnoughResources_Violation) GetResourceType() string {
	if x != nil {
		return x.ResourceType
	}
	return ""
}

func (x *NotEnoughResources_Violation) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *NotEnoughResources_Violation) GetRequested() string {
	if x != nil {
		return x.Requested
	}
	return ""
}

var File_nebius_common_v1_error_proto protoreflect.FileDescriptor

var file_nebius_common_v1_error_proto_rawDesc = string([]byte{
	0x0a, 0x1c, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f,
	0x76, 0x31, 0x2f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31,
	0x22, 0xa0, 0x09, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x3f, 0x0a, 0x0b, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x64,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x52, 0x0a, 0x12, 0x62, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x6e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e,
	0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x10, 0x62, 0x61, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x66, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x6f, 0x74, 0x46,
	0x6f, 0x75, 0x6e, 0x64, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x61, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x65, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x18, 0x70, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6e, 0x65, 0x62, 0x69,
	0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x6f,
	0x75, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x71, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x66, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x51, 0x0a,
	0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x6e, 0x69,
	0x65, 0x64, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75,
	0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64,
	0x12, 0x52, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x6c, 0x69, 0x63, 0x74, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6e,
	0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x6c, 0x69, 0x63, 0x74, 0x12, 0x52, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x83, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x11, 0x74, 0x6f, 0x6f, 0x5f,
	0x6d, 0x61, 0x6e, 0x79, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x8c, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x6f, 0x6f, 0x4d, 0x61,
	0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x46, 0x0a, 0x0d, 0x71, 0x75,
	0x6f, 0x74, 0x61, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x18, 0x8d, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x75,
	0x72, 0x65, 0x12, 0x59, 0x0a, 0x14, 0x6e, 0x6f, 0x74, 0x5f, 0x65, 0x6e, 0x6f, 0x75, 0x67, 0x68,
	0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x8e, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x48, 0x00, 0x52, 0x12, 0x6e, 0x6f, 0x74, 0x45, 0x6e,
	0x6f, 0x75, 0x67, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x49, 0x0a,
	0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0xe7, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x0d, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72,
	0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x6e,
	0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x52, 0x65, 0x74,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x45, 0x0a, 0x09, 0x52, 0x65, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f,
	0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x43, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x49,
	0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x57, 0x4f, 0x52, 0x4b, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x4e,
	0x4f, 0x54, 0x48, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x42, 0x09, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0x91, 0x01, 0x0a, 0x0a, 0x42, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x3b, 0x0a, 0x09, 0x56, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x4d, 0x0a, 0x10, 0x42, 0x61, 0x64, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x33, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x15, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x6c, 0x72, 0x65, 0x61, 0x64, 0x79, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x4d, 0x0a, 0x10, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x6c, 0x69, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x35, 0x0a, 0x17,
	0x61, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x61,
	0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x42, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x49, 0x64, 0x22, 0x40, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x33, 0x0a, 0x10, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x6e, 0x69, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x64, 0x22, 0x49, 0x0a, 0x0d, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x2f, 0x0a, 0x0f, 0x54, 0x6f, 0x6f, 0x4d, 0x61, 0x6e,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x76, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc9, 0x01, 0x0a, 0x0c, 0x51, 0x75, 0x6f, 0x74,
	0x61, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x12, 0x48, 0x0a, 0x0a, 0x76, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6e,
	0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e,
	0x51, 0x75, 0x6f, 0x74, 0x61, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x2e, 0x56, 0x69, 0x6f,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x6f, 0x0a, 0x09, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x71, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x71, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x22, 0xce, 0x01, 0x0a, 0x12, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67,
	0x68, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x0a, 0x76, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x6f, 0x74, 0x45, 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x2e, 0x56, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a,
	0x76, 0x69, 0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a, 0x68, 0x0a, 0x09, 0x56, 0x69,
	0x6f, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x42, 0x57, 0x0a, 0x17, 0x61, 0x69, 0x2e, 0x6e, 0x65, 0x62, 0x69, 0x75,
	0x73, 0x2e, 0x70, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x42,
	0x0a, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x65, 0x62, 0x69, 0x75, 0x73,
	0x2f, 0x67, 0x6f, 0x73, 0x64, 0x6b, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6e, 0x65, 0x62,
	0x69, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_nebius_common_v1_error_proto_rawDescOnce sync.Once
	file_nebius_common_v1_error_proto_rawDescData []byte
)

func file_nebius_common_v1_error_proto_rawDescGZIP() []byte {
	file_nebius_common_v1_error_proto_rawDescOnce.Do(func() {
		file_nebius_common_v1_error_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nebius_common_v1_error_proto_rawDesc), len(file_nebius_common_v1_error_proto_rawDesc)))
	})
	return file_nebius_common_v1_error_proto_rawDescData
}

var file_nebius_common_v1_error_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_nebius_common_v1_error_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_nebius_common_v1_error_proto_goTypes = []any{
	(ServiceError_RetryType)(0),          // 0: nebius.common.v1.ServiceError.RetryType
	(*ServiceError)(nil),                 // 1: nebius.common.v1.ServiceError
	(*BadRequest)(nil),                   // 2: nebius.common.v1.BadRequest
	(*BadResourceState)(nil),             // 3: nebius.common.v1.BadResourceState
	(*ResourceNotFound)(nil),             // 4: nebius.common.v1.ResourceNotFound
	(*ResourceAlreadyExists)(nil),        // 5: nebius.common.v1.ResourceAlreadyExists
	(*ResourceConflict)(nil),             // 6: nebius.common.v1.ResourceConflict
	(*OperationAborted)(nil),             // 7: nebius.common.v1.OperationAborted
	(*OutOfRange)(nil),                   // 8: nebius.common.v1.OutOfRange
	(*PermissionDenied)(nil),             // 9: nebius.common.v1.PermissionDenied
	(*InternalError)(nil),                // 10: nebius.common.v1.InternalError
	(*TooManyRequests)(nil),              // 11: nebius.common.v1.TooManyRequests
	(*QuotaFailure)(nil),                 // 12: nebius.common.v1.QuotaFailure
	(*NotEnoughResources)(nil),           // 13: nebius.common.v1.NotEnoughResources
	(*BadRequest_Violation)(nil),         // 14: nebius.common.v1.BadRequest.Violation
	(*QuotaFailure_Violation)(nil),       // 15: nebius.common.v1.QuotaFailure.Violation
	(*NotEnoughResources_Violation)(nil), // 16: nebius.common.v1.NotEnoughResources.Violation
}
var file_nebius_common_v1_error_proto_depIdxs = []int32{
	2,  // 0: nebius.common.v1.ServiceError.bad_request:type_name -> nebius.common.v1.BadRequest
	3,  // 1: nebius.common.v1.ServiceError.bad_resource_state:type_name -> nebius.common.v1.BadResourceState
	4,  // 2: nebius.common.v1.ServiceError.resource_not_found:type_name -> nebius.common.v1.ResourceNotFound
	5,  // 3: nebius.common.v1.ServiceError.resource_already_exists:type_name -> nebius.common.v1.ResourceAlreadyExists
	8,  // 4: nebius.common.v1.ServiceError.out_of_range:type_name -> nebius.common.v1.OutOfRange
	9,  // 5: nebius.common.v1.ServiceError.permission_denied:type_name -> nebius.common.v1.PermissionDenied
	6,  // 6: nebius.common.v1.ServiceError.resource_conflict:type_name -> nebius.common.v1.ResourceConflict
	7,  // 7: nebius.common.v1.ServiceError.operation_aborted:type_name -> nebius.common.v1.OperationAborted
	11, // 8: nebius.common.v1.ServiceError.too_many_requests:type_name -> nebius.common.v1.TooManyRequests
	12, // 9: nebius.common.v1.ServiceError.quota_failure:type_name -> nebius.common.v1.QuotaFailure
	13, // 10: nebius.common.v1.ServiceError.not_enough_resources:type_name -> nebius.common.v1.NotEnoughResources
	10, // 11: nebius.common.v1.ServiceError.internal_error:type_name -> nebius.common.v1.InternalError
	0,  // 12: nebius.common.v1.ServiceError.retry_type:type_name -> nebius.common.v1.ServiceError.RetryType
	14, // 13: nebius.common.v1.BadRequest.violations:type_name -> nebius.common.v1.BadRequest.Violation
	15, // 14: nebius.common.v1.QuotaFailure.violations:type_name -> nebius.common.v1.QuotaFailure.Violation
	16, // 15: nebius.common.v1.NotEnoughResources.violations:type_name -> nebius.common.v1.NotEnoughResources.Violation
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_nebius_common_v1_error_proto_init() }
func file_nebius_common_v1_error_proto_init() {
	if File_nebius_common_v1_error_proto != nil {
		return
	}
	file_nebius_common_v1_error_proto_msgTypes[0].OneofWrappers = []any{
		(*ServiceError_BadRequest)(nil),
		(*ServiceError_BadResourceState)(nil),
		(*ServiceError_ResourceNotFound)(nil),
		(*ServiceError_ResourceAlreadyExists)(nil),
		(*ServiceError_OutOfRange)(nil),
		(*ServiceError_PermissionDenied)(nil),
		(*ServiceError_ResourceConflict)(nil),
		(*ServiceError_OperationAborted)(nil),
		(*ServiceError_TooManyRequests)(nil),
		(*ServiceError_QuotaFailure)(nil),
		(*ServiceError_NotEnoughResources)(nil),
		(*ServiceError_InternalError)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nebius_common_v1_error_proto_rawDesc), len(file_nebius_common_v1_error_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_nebius_common_v1_error_proto_goTypes,
		DependencyIndexes: file_nebius_common_v1_error_proto_depIdxs,
		EnumInfos:         file_nebius_common_v1_error_proto_enumTypes,
		MessageInfos:      file_nebius_common_v1_error_proto_msgTypes,
	}.Build()
	File_nebius_common_v1_error_proto = out.File
	file_nebius_common_v1_error_proto_goTypes = nil
	file_nebius_common_v1_error_proto_depIdxs = nil
}
