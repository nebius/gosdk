// Code generated by protoc-gen-sensitive. DO NOT EDIT.

package v1alpha1

import (
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	anypb "google.golang.org/protobuf/types/known/anypb"
	slog "log/slog"
)

// Sanitize mutates [Operation] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
//
// It also sanitizes the content of google.protobuf.Any, i.e. performs unmarshal, sanitize, marshal cycle.
// Important: [proto.UnmarshalOptions.DiscardUnknown] = true is used.
// In case of an error, the content of Any is replaced with google.protobuf.Empty.
func (x *Operation) Sanitize() {
	if x == nil {
		return
	}
	sanitizeAny := func(a *anypb.Any) {
		if a == nil {
			return
		}
		p, err := anypb.UnmarshalNew(a, proto.UnmarshalOptions{DiscardUnknown: true})
		if err != nil {
			a.TypeUrl = "type.googleapis.com/google.protobuf.Empty"
			a.Value = nil
			return
		}
		if s, ok := p.(interface{ Sanitize() }); ok {
			s.Sanitize()
		}
		err = a.MarshalFrom(p)
		if err != nil {
			a.TypeUrl = "type.googleapis.com/google.protobuf.Empty"
			a.Value = nil
		}
	}
	sanitizeAny(x.Request)
	sanitizeAny(x.Resource)
	sanitizeAny(x.ProgressData)
	for _, y := range x.Status.GetDetails() {
		sanitizeAny(y)
	}
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [Operation].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// It also sanitizes the content of google.protobuf.Any, i.e. performs unmarshal, sanitize, marshal cycle.
// Important: [proto.UnmarshalOptions.DiscardUnknown] = true is used.
// In case of an error, the content of Any is replaced with google.protobuf.Empty.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *Operation
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [Operation], use the following code:
//
//	var original *Operation
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*Operation)
func (x *Operation) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*Operation) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperOperation)(c))
}

// wrapperOperation is used to return [Operation] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperOperation Operation

func (w *wrapperOperation) String() string {
	return (*Operation)(w).String()
}

func (*wrapperOperation) ProtoMessage() {}

func (w *wrapperOperation) ProtoReflect() protoreflect.Message {
	return (*Operation)(w).ProtoReflect()
}

// func (x *OperationRequestHeader) Sanitize()            // is not generated as no sensitive fields found
// func (x *OperationRequestHeader) LogValue() slog.Value // is not generated as no sensitive fields found
