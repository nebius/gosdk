// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.28.3
// source: nebius/msp/spark/v1alpha1/cluster_service.proto

package v1alpha1

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	_ "github.com/nebius/gosdk/proto/nebius"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the cluster to retrieve.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterRequest) Reset() {
	*x = GetClusterRequest{}
	mi := &file_nebius_msp_spark_v1alpha1_cluster_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterRequest) ProtoMessage() {}

func (x *GetClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_msp_spark_v1alpha1_cluster_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterRequest.ProtoReflect.Descriptor instead.
func (*GetClusterRequest) Descriptor() ([]byte, []int) {
	return file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type GetClusterByNameRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Parent ID of the cluster to retrieve.
	ParentId string `protobuf:"bytes,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// Name of the cluster to retrieve.
	Name          string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetClusterByNameRequest) Reset() {
	*x = GetClusterByNameRequest{}
	mi := &file_nebius_msp_spark_v1alpha1_cluster_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClusterByNameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClusterByNameRequest) ProtoMessage() {}

func (x *GetClusterByNameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_msp_spark_v1alpha1_cluster_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClusterByNameRequest.ProtoReflect.Descriptor instead.
func (*GetClusterByNameRequest) Descriptor() ([]byte, []int) {
	return file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetClusterByNameRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *GetClusterByNameRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ListClustersRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifier of IAM container to list clusters from.
	ParentId string `protobuf:"bytes,1,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	// Specifies the maximum number of items to return in the response. Default value is 100.
	PageSize int64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	// Token for pagination, allowing the retrieval of the next set of results.
	PageToken     string `protobuf:"bytes,3,opt,name=page_token,json=pageToken,proto3" json:"page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersRequest) Reset() {
	*x = ListClustersRequest{}
	mi := &file_nebius_msp_spark_v1alpha1_cluster_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersRequest) ProtoMessage() {}

func (x *ListClustersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_msp_spark_v1alpha1_cluster_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersRequest.ProtoReflect.Descriptor instead.
func (*ListClustersRequest) Descriptor() ([]byte, []int) {
	return file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDescGZIP(), []int{2}
}

func (x *ListClustersRequest) GetParentId() string {
	if x != nil {
		return x.ParentId
	}
	return ""
}

func (x *ListClustersRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ListClustersRequest) GetPageToken() string {
	if x != nil {
		return x.PageToken
	}
	return ""
}

type ListClustersResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// List of clusters.
	Items []*Cluster `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	// Token for pagination, indicating the next set of results can be retrieved using this token.
	NextPageToken *string `protobuf:"bytes,2,opt,name=next_page_token,json=nextPageToken,proto3,oneof" json:"next_page_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListClustersResponse) Reset() {
	*x = ListClustersResponse{}
	mi := &file_nebius_msp_spark_v1alpha1_cluster_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListClustersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListClustersResponse) ProtoMessage() {}

func (x *ListClustersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_msp_spark_v1alpha1_cluster_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListClustersResponse.ProtoReflect.Descriptor instead.
func (*ListClustersResponse) Descriptor() ([]byte, []int) {
	return file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDescGZIP(), []int{3}
}

func (x *ListClustersResponse) GetItems() []*Cluster {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListClustersResponse) GetNextPageToken() string {
	if x != nil && x.NextPageToken != nil {
		return *x.NextPageToken
	}
	return ""
}

type CreateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata associated with the new cluster. Must include parent_id in which we create the cluster.
	Metadata *v1.ResourceMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Specification for the new cluster.
	Spec          *ClusterSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateClusterRequest) Reset() {
	*x = CreateClusterRequest{}
	mi := &file_nebius_msp_spark_v1alpha1_cluster_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateClusterRequest) ProtoMessage() {}

func (x *CreateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_msp_spark_v1alpha1_cluster_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateClusterRequest.ProtoReflect.Descriptor instead.
func (*CreateClusterRequest) Descriptor() ([]byte, []int) {
	return file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDescGZIP(), []int{4}
}

func (x *CreateClusterRequest) GetMetadata() *v1.ResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreateClusterRequest) GetSpec() *ClusterSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type UpdateClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Metadata associated with the cluster. Must include id of the cluster we are going to update.
	Metadata *v1.ResourceMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
	// Updated specification for the cluster.
	Spec          *ClusterSpec `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateClusterRequest) Reset() {
	*x = UpdateClusterRequest{}
	mi := &file_nebius_msp_spark_v1alpha1_cluster_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateClusterRequest) ProtoMessage() {}

func (x *UpdateClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_msp_spark_v1alpha1_cluster_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateClusterRequest.ProtoReflect.Descriptor instead.
func (*UpdateClusterRequest) Descriptor() ([]byte, []int) {
	return file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateClusterRequest) GetMetadata() *v1.ResourceMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UpdateClusterRequest) GetSpec() *ClusterSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

type DeleteClusterRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID of the cluster to delete.
	Id            string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteClusterRequest) Reset() {
	*x = DeleteClusterRequest{}
	mi := &file_nebius_msp_spark_v1alpha1_cluster_service_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteClusterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteClusterRequest) ProtoMessage() {}

func (x *DeleteClusterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_nebius_msp_spark_v1alpha1_cluster_service_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteClusterRequest.ProtoReflect.Descriptor instead.
func (*DeleteClusterRequest) Descriptor() ([]byte, []int) {
	return file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteClusterRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

var File_nebius_msp_spark_v1alpha1_cluster_service_proto protoreflect.FileDescriptor

const file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDesc = "" +
	"\n" +
	"/nebius/msp/spark/v1alpha1/cluster_service.proto\x12\x19nebius.msp.spark.v1alpha1\x1a\x1bbuf/validate/validate.proto\x1a\x1fnebius/common/v1/metadata.proto\x1a nebius/common/v1/operation.proto\x1a\x18nebius/annotations.proto\x1a'nebius/msp/spark/v1alpha1/cluster.proto\"+\n" +
	"\x11GetClusterRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id\"Z\n" +
	"\x17GetClusterByNameRequest\x12#\n" +
	"\tparent_id\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\bparentId\x12\x1a\n" +
	"\x04name\x18\x02 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x04name\"\x7f\n" +
	"\x13ListClustersRequest\x12#\n" +
	"\tparent_id\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\bparentId\x12$\n" +
	"\tpage_size\x18\x02 \x01(\x03B\a\xbaH\x04\"\x02(\x00R\bpageSize\x12\x1d\n" +
	"\n" +
	"page_token\x18\x03 \x01(\tR\tpageToken\"\x99\x01\n" +
	"\x14ListClustersResponse\x12@\n" +
	"\x05items\x18\x01 \x03(\v2\".nebius.msp.spark.v1alpha1.ClusterB\x06\xbaH\x03\xc8\x01\x01R\x05items\x12+\n" +
	"\x0fnext_page_token\x18\x02 \x01(\tH\x00R\rnextPageToken\x88\x01\x01B\x12\n" +
	"\x10_next_page_token\"\x81\x03\n" +
	"\x14CreateClusterRequest\x12F\n" +
	"\bmetadata\x18\x01 \x01(\v2\".nebius.common.v1.ResourceMetadataB\x06\xbaH\x03\xc8\x01\x01R\bmetadata\x12B\n" +
	"\x04spec\x18\x02 \x01(\v2&.nebius.msp.spark.v1alpha1.ClusterSpecB\x06\xbaH\x03\xc8\x01\x01R\x04spec:\xdc\x01\xbaH\xd8\x01\x1a\x7f\n" +
	"\x17create_cluster.metadata\x12+'metadata' must have 'parent_id' and 'name'\x1a7has(this.metadata.parent_id) && has(this.metadata.name)\x1aU\n" +
	"\x13create_cluster.spec\x12 'spec' must have 'authorization'\x1a\x1chas(this.spec.authorization)\"\xec\x01\n" +
	"\x14UpdateClusterRequest\x12F\n" +
	"\bmetadata\x18\x01 \x01(\v2\".nebius.common.v1.ResourceMetadataB\x06\xbaH\x03\xc8\x01\x01R\bmetadata\x12:\n" +
	"\x04spec\x18\x02 \x01(\v2&.nebius.msp.spark.v1alpha1.ClusterSpecR\x04spec:P\xbaHM\x1aK\n" +
	"\x17update_cluster.metadata\x12\x19'metadata' must have 'id'\x1a\x15has(this.metadata.id)\".\n" +
	"\x14DeleteClusterRequest\x12\x16\n" +
	"\x02id\x18\x01 \x01(\tB\x06\xbaH\x03\xc8\x01\x01R\x02id2\xe1\x05\n" +
	"\x0eClusterService\x12W\n" +
	"\x03Get\x12,.nebius.msp.spark.v1alpha1.GetClusterRequest\x1a\".nebius.msp.spark.v1alpha1.Cluster\x12c\n" +
	"\tGetByName\x122.nebius.msp.spark.v1alpha1.GetClusterByNameRequest\x1a\".nebius.msp.spark.v1alpha1.Cluster\x12g\n" +
	"\x04List\x12..nebius.msp.spark.v1alpha1.ListClustersRequest\x1a/.nebius.msp.spark.v1alpha1.ListClustersResponse\x12V\n" +
	"\x06Create\x12/.nebius.msp.spark.v1alpha1.CreateClusterRequest\x1a\x1b.nebius.common.v1.Operation\x12V\n" +
	"\x06Update\x12/.nebius.msp.spark.v1alpha1.UpdateClusterRequest\x1a\x1b.nebius.common.v1.Operation\x12V\n" +
	"\x06Delete\x12/.nebius.msp.spark.v1alpha1.DeleteClusterRequest\x1a\x1b.nebius.common.v1.Operation\x1a\x9f\x01\xbaJ\x06sp.msp\xd2J\x8f\x01\n" +
	"\n" +
	"2025-08-12\x12\x80\x01Nebius AI Cloud no longer supports the service. Instead, use Application for Apache Spark™ Connect in Standalone Applications.\x88\x02\x01Br\n" +
	" ai.nebius.pub.msp.spark.v1alpha1B\x13ClusterServiceProtoP\x01Z7github.com/nebius/gosdk/proto/nebius/msp/spark/v1alpha1b\x06proto3"

var (
	file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDescOnce sync.Once
	file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDescData []byte
)

func file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDescGZIP() []byte {
	file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDescOnce.Do(func() {
		file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDesc), len(file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDesc)))
	})
	return file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDescData
}

var file_nebius_msp_spark_v1alpha1_cluster_service_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_nebius_msp_spark_v1alpha1_cluster_service_proto_goTypes = []any{
	(*GetClusterRequest)(nil),       // 0: nebius.msp.spark.v1alpha1.GetClusterRequest
	(*GetClusterByNameRequest)(nil), // 1: nebius.msp.spark.v1alpha1.GetClusterByNameRequest
	(*ListClustersRequest)(nil),     // 2: nebius.msp.spark.v1alpha1.ListClustersRequest
	(*ListClustersResponse)(nil),    // 3: nebius.msp.spark.v1alpha1.ListClustersResponse
	(*CreateClusterRequest)(nil),    // 4: nebius.msp.spark.v1alpha1.CreateClusterRequest
	(*UpdateClusterRequest)(nil),    // 5: nebius.msp.spark.v1alpha1.UpdateClusterRequest
	(*DeleteClusterRequest)(nil),    // 6: nebius.msp.spark.v1alpha1.DeleteClusterRequest
	(*Cluster)(nil),                 // 7: nebius.msp.spark.v1alpha1.Cluster
	(*v1.ResourceMetadata)(nil),     // 8: nebius.common.v1.ResourceMetadata
	(*ClusterSpec)(nil),             // 9: nebius.msp.spark.v1alpha1.ClusterSpec
	(*v1.Operation)(nil),            // 10: nebius.common.v1.Operation
}
var file_nebius_msp_spark_v1alpha1_cluster_service_proto_depIdxs = []int32{
	7,  // 0: nebius.msp.spark.v1alpha1.ListClustersResponse.items:type_name -> nebius.msp.spark.v1alpha1.Cluster
	8,  // 1: nebius.msp.spark.v1alpha1.CreateClusterRequest.metadata:type_name -> nebius.common.v1.ResourceMetadata
	9,  // 2: nebius.msp.spark.v1alpha1.CreateClusterRequest.spec:type_name -> nebius.msp.spark.v1alpha1.ClusterSpec
	8,  // 3: nebius.msp.spark.v1alpha1.UpdateClusterRequest.metadata:type_name -> nebius.common.v1.ResourceMetadata
	9,  // 4: nebius.msp.spark.v1alpha1.UpdateClusterRequest.spec:type_name -> nebius.msp.spark.v1alpha1.ClusterSpec
	0,  // 5: nebius.msp.spark.v1alpha1.ClusterService.Get:input_type -> nebius.msp.spark.v1alpha1.GetClusterRequest
	1,  // 6: nebius.msp.spark.v1alpha1.ClusterService.GetByName:input_type -> nebius.msp.spark.v1alpha1.GetClusterByNameRequest
	2,  // 7: nebius.msp.spark.v1alpha1.ClusterService.List:input_type -> nebius.msp.spark.v1alpha1.ListClustersRequest
	4,  // 8: nebius.msp.spark.v1alpha1.ClusterService.Create:input_type -> nebius.msp.spark.v1alpha1.CreateClusterRequest
	5,  // 9: nebius.msp.spark.v1alpha1.ClusterService.Update:input_type -> nebius.msp.spark.v1alpha1.UpdateClusterRequest
	6,  // 10: nebius.msp.spark.v1alpha1.ClusterService.Delete:input_type -> nebius.msp.spark.v1alpha1.DeleteClusterRequest
	7,  // 11: nebius.msp.spark.v1alpha1.ClusterService.Get:output_type -> nebius.msp.spark.v1alpha1.Cluster
	7,  // 12: nebius.msp.spark.v1alpha1.ClusterService.GetByName:output_type -> nebius.msp.spark.v1alpha1.Cluster
	3,  // 13: nebius.msp.spark.v1alpha1.ClusterService.List:output_type -> nebius.msp.spark.v1alpha1.ListClustersResponse
	10, // 14: nebius.msp.spark.v1alpha1.ClusterService.Create:output_type -> nebius.common.v1.Operation
	10, // 15: nebius.msp.spark.v1alpha1.ClusterService.Update:output_type -> nebius.common.v1.Operation
	10, // 16: nebius.msp.spark.v1alpha1.ClusterService.Delete:output_type -> nebius.common.v1.Operation
	11, // [11:17] is the sub-list for method output_type
	5,  // [5:11] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_nebius_msp_spark_v1alpha1_cluster_service_proto_init() }
func file_nebius_msp_spark_v1alpha1_cluster_service_proto_init() {
	if File_nebius_msp_spark_v1alpha1_cluster_service_proto != nil {
		return
	}
	file_nebius_msp_spark_v1alpha1_cluster_proto_init()
	file_nebius_msp_spark_v1alpha1_cluster_service_proto_msgTypes[3].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDesc), len(file_nebius_msp_spark_v1alpha1_cluster_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_nebius_msp_spark_v1alpha1_cluster_service_proto_goTypes,
		DependencyIndexes: file_nebius_msp_spark_v1alpha1_cluster_service_proto_depIdxs,
		MessageInfos:      file_nebius_msp_spark_v1alpha1_cluster_service_proto_msgTypes,
	}.Build()
	File_nebius_msp_spark_v1alpha1_cluster_service_proto = out.File
	file_nebius_msp_spark_v1alpha1_cluster_service_proto_goTypes = nil
	file_nebius_msp_spark_v1alpha1_cluster_service_proto_depIdxs = nil
}
