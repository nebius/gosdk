// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: nebius/msp/v1alpha1/resource/preset_service.proto

package resource

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PresetService_List_FullMethodName = "/nebius.msp.v1alpha1.resource.PresetService/List"
)

// PresetServiceClient is the client API for PresetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PresetServiceClient interface {
	List(ctx context.Context, in *ListPresetsRequest, opts ...grpc.CallOption) (*ListPresetsResponse, error)
}

type presetServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPresetServiceClient(cc grpc.ClientConnInterface) PresetServiceClient {
	return &presetServiceClient{cc}
}

func (c *presetServiceClient) List(ctx context.Context, in *ListPresetsRequest, opts ...grpc.CallOption) (*ListPresetsResponse, error) {
	out := new(ListPresetsResponse)
	err := c.cc.Invoke(ctx, PresetService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PresetServiceServer is the server API for PresetService service.
// All implementations should embed UnimplementedPresetServiceServer
// for forward compatibility
type PresetServiceServer interface {
	List(context.Context, *ListPresetsRequest) (*ListPresetsResponse, error)
}

// UnimplementedPresetServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPresetServiceServer struct {
}

func (UnimplementedPresetServiceServer) List(context.Context, *ListPresetsRequest) (*ListPresetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafePresetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PresetServiceServer will
// result in compilation errors.
type UnsafePresetServiceServer interface {
	mustEmbedUnimplementedPresetServiceServer()
}

func RegisterPresetServiceServer(s grpc.ServiceRegistrar, srv PresetServiceServer) {
	s.RegisterService(&PresetService_ServiceDesc, srv)
}

func _PresetService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPresetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PresetServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PresetService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PresetServiceServer).List(ctx, req.(*ListPresetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PresetService_ServiceDesc is the grpc.ServiceDesc for PresetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PresetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebius.msp.v1alpha1.resource.PresetService",
	HandlerType: (*PresetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _PresetService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebius/msp/v1alpha1/resource/preset_service.proto",
}
