// Code generated by protoc-gen-sensitive. DO NOT EDIT.

package v1alpha1

import (
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	slog "log/slog"
)

// Sanitize mutates [CreateEndpointRequest] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *CreateEndpointRequest) Sanitize() {
	if x == nil {
		return
	}
	x.Spec.Sanitize()
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [CreateEndpointRequest].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *CreateEndpointRequest
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [CreateEndpointRequest], use the following code:
//
//	var original *CreateEndpointRequest
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*CreateEndpointRequest)
func (x *CreateEndpointRequest) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*CreateEndpointRequest) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperCreateEndpointRequest)(c))
}

// wrapperCreateEndpointRequest is used to return [CreateEndpointRequest] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperCreateEndpointRequest CreateEndpointRequest

func (w *wrapperCreateEndpointRequest) String() string {
	return (*CreateEndpointRequest)(w).String()
}

func (*wrapperCreateEndpointRequest) ProtoMessage() {}

func (w *wrapperCreateEndpointRequest) ProtoReflect() protoreflect.Message {
	return (*CreateEndpointRequest)(w).ProtoReflect()
}

// Sanitize mutates [ListEndpointsResponse] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *ListEndpointsResponse) Sanitize() {
	if x == nil {
		return
	}
	for _, y := range x.Items {
		y.Sanitize()
	}
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [ListEndpointsResponse].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *ListEndpointsResponse
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [ListEndpointsResponse], use the following code:
//
//	var original *ListEndpointsResponse
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*ListEndpointsResponse)
func (x *ListEndpointsResponse) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*ListEndpointsResponse) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperListEndpointsResponse)(c))
}

// wrapperListEndpointsResponse is used to return [ListEndpointsResponse] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperListEndpointsResponse ListEndpointsResponse

func (w *wrapperListEndpointsResponse) String() string {
	return (*ListEndpointsResponse)(w).String()
}

func (*wrapperListEndpointsResponse) ProtoMessage() {}

func (w *wrapperListEndpointsResponse) ProtoReflect() protoreflect.Message {
	return (*ListEndpointsResponse)(w).ProtoReflect()
}
