// Code generated by protoc-gen-sensitive. DO NOT EDIT.

package v1alpha1

import (
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	slog "log/slog"
)

// Sanitize mutates [Endpoint] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *Endpoint) Sanitize() {
	if x == nil {
		return
	}
	x.Spec.Sanitize()
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [Endpoint].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *Endpoint
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [Endpoint], use the following code:
//
//	var original *Endpoint
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*Endpoint)
func (x *Endpoint) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*Endpoint) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperEndpoint)(c))
}

// wrapperEndpoint is used to return [Endpoint] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperEndpoint Endpoint

func (w *wrapperEndpoint) String() string {
	return (*Endpoint)(w).String()
}

func (*wrapperEndpoint) ProtoMessage() {}

func (w *wrapperEndpoint) ProtoReflect() protoreflect.Message {
	return (*Endpoint)(w).ProtoReflect()
}

// Sanitize mutates [EndpointSpec] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *EndpointSpec) Sanitize() {
	if x == nil {
		return
	}
	x.Username = "**HIDDEN**"
	x.Password = "**HIDDEN**"
	x.Container.Sanitize()
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [EndpointSpec].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *EndpointSpec
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [EndpointSpec], use the following code:
//
//	var original *EndpointSpec
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*EndpointSpec)
func (x *EndpointSpec) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*EndpointSpec) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperEndpointSpec)(c))
}

// wrapperEndpointSpec is used to return [EndpointSpec] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperEndpointSpec EndpointSpec

func (w *wrapperEndpointSpec) String() string {
	return (*EndpointSpec)(w).String()
}

func (*wrapperEndpointSpec) ProtoMessage() {}

func (w *wrapperEndpointSpec) ProtoReflect() protoreflect.Message {
	return (*EndpointSpec)(w).ProtoReflect()
}

// Sanitize mutates [EndpointContainerSpec] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *EndpointContainerSpec) Sanitize() {
	if x == nil {
		return
	}
	x.SensitiveEnvs = map[string]string{"**HIDDEN**": "**HIDDEN**"}
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [EndpointContainerSpec].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *EndpointContainerSpec
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [EndpointContainerSpec], use the following code:
//
//	var original *EndpointContainerSpec
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*EndpointContainerSpec)
func (x *EndpointContainerSpec) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*EndpointContainerSpec) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperEndpointContainerSpec)(c))
}

// wrapperEndpointContainerSpec is used to return [EndpointContainerSpec] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperEndpointContainerSpec EndpointContainerSpec

func (w *wrapperEndpointContainerSpec) String() string {
	return (*EndpointContainerSpec)(w).String()
}

func (*wrapperEndpointContainerSpec) ProtoMessage() {}

func (w *wrapperEndpointContainerSpec) ProtoReflect() protoreflect.Message {
	return (*EndpointContainerSpec)(w).ProtoReflect()
}

// func (x *ProbeSpec) Sanitize()            // is not generated as no sensitive fields found
// func (x *ProbeSpec) LogValue() slog.Value // is not generated as no sensitive fields found

// func (x *EndpointTemplateSpec) Sanitize()            // is not generated as no sensitive fields found
// func (x *EndpointTemplateSpec) LogValue() slog.Value // is not generated as no sensitive fields found

// func (x *EndpointStatus) Sanitize()            // is not generated as no sensitive fields found
// func (x *EndpointStatus) LogValue() slog.Value // is not generated as no sensitive fields found
