// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: nebius/mysterybox/v1/secret_version_service.proto

package v1

import (
	context "context"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SecretVersionService_Create_FullMethodName   = "/nebius.mysterybox.v1.SecretVersionService/Create"
	SecretVersionService_Get_FullMethodName      = "/nebius.mysterybox.v1.SecretVersionService/Get"
	SecretVersionService_List_FullMethodName     = "/nebius.mysterybox.v1.SecretVersionService/List"
	SecretVersionService_Delete_FullMethodName   = "/nebius.mysterybox.v1.SecretVersionService/Delete"
	SecretVersionService_Undelete_FullMethodName = "/nebius.mysterybox.v1.SecretVersionService/Undelete"
)

// SecretVersionServiceClient is the client API for SecretVersionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SecretVersionServiceClient interface {
	// Creates a new secret version in the specified container.
	Create(ctx context.Context, in *CreateSecretVersionRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	// Returns the specified secret version, without its Payload.
	Get(ctx context.Context, in *GetSecretVersionRequest, opts ...grpc.CallOption) (*SecretVersion, error)
	// Returns the list of secret versions in a specified container, without its Payload.
	List(ctx context.Context, in *ListSecretVersionsRequest, opts ...grpc.CallOption) (*ListSecretVersionsResponse, error)
	// Soft delete secret version.
	Delete(ctx context.Context, in *DeleteSecretVersionRequest, opts ...grpc.CallOption) (*v1.Operation, error)
	// Undelete secret version
	Undelete(ctx context.Context, in *UndeleteSecretVersionRequest, opts ...grpc.CallOption) (*v1.Operation, error)
}

type secretVersionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSecretVersionServiceClient(cc grpc.ClientConnInterface) SecretVersionServiceClient {
	return &secretVersionServiceClient{cc}
}

func (c *secretVersionServiceClient) Create(ctx context.Context, in *CreateSecretVersionRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, SecretVersionService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretVersionServiceClient) Get(ctx context.Context, in *GetSecretVersionRequest, opts ...grpc.CallOption) (*SecretVersion, error) {
	out := new(SecretVersion)
	err := c.cc.Invoke(ctx, SecretVersionService_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretVersionServiceClient) List(ctx context.Context, in *ListSecretVersionsRequest, opts ...grpc.CallOption) (*ListSecretVersionsResponse, error) {
	out := new(ListSecretVersionsResponse)
	err := c.cc.Invoke(ctx, SecretVersionService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretVersionServiceClient) Delete(ctx context.Context, in *DeleteSecretVersionRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, SecretVersionService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *secretVersionServiceClient) Undelete(ctx context.Context, in *UndeleteSecretVersionRequest, opts ...grpc.CallOption) (*v1.Operation, error) {
	out := new(v1.Operation)
	err := c.cc.Invoke(ctx, SecretVersionService_Undelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SecretVersionServiceServer is the server API for SecretVersionService service.
// All implementations should embed UnimplementedSecretVersionServiceServer
// for forward compatibility
type SecretVersionServiceServer interface {
	// Creates a new secret version in the specified container.
	Create(context.Context, *CreateSecretVersionRequest) (*v1.Operation, error)
	// Returns the specified secret version, without its Payload.
	Get(context.Context, *GetSecretVersionRequest) (*SecretVersion, error)
	// Returns the list of secret versions in a specified container, without its Payload.
	List(context.Context, *ListSecretVersionsRequest) (*ListSecretVersionsResponse, error)
	// Soft delete secret version.
	Delete(context.Context, *DeleteSecretVersionRequest) (*v1.Operation, error)
	// Undelete secret version
	Undelete(context.Context, *UndeleteSecretVersionRequest) (*v1.Operation, error)
}

// UnimplementedSecretVersionServiceServer should be embedded to have forward compatible implementations.
type UnimplementedSecretVersionServiceServer struct {
}

func (UnimplementedSecretVersionServiceServer) Create(context.Context, *CreateSecretVersionRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSecretVersionServiceServer) Get(context.Context, *GetSecretVersionRequest) (*SecretVersion, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedSecretVersionServiceServer) List(context.Context, *ListSecretVersionsRequest) (*ListSecretVersionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedSecretVersionServiceServer) Delete(context.Context, *DeleteSecretVersionRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSecretVersionServiceServer) Undelete(context.Context, *UndeleteSecretVersionRequest) (*v1.Operation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Undelete not implemented")
}

// UnsafeSecretVersionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SecretVersionServiceServer will
// result in compilation errors.
type UnsafeSecretVersionServiceServer interface {
	mustEmbedUnimplementedSecretVersionServiceServer()
}

func RegisterSecretVersionServiceServer(s grpc.ServiceRegistrar, srv SecretVersionServiceServer) {
	s.RegisterService(&SecretVersionService_ServiceDesc, srv)
}

func _SecretVersionService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSecretVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretVersionServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretVersionService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretVersionServiceServer).Create(ctx, req.(*CreateSecretVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretVersionService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSecretVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretVersionServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretVersionService_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretVersionServiceServer).Get(ctx, req.(*GetSecretVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretVersionService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSecretVersionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretVersionServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretVersionService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretVersionServiceServer).List(ctx, req.(*ListSecretVersionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretVersionService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSecretVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretVersionServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretVersionService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretVersionServiceServer).Delete(ctx, req.(*DeleteSecretVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SecretVersionService_Undelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UndeleteSecretVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SecretVersionServiceServer).Undelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SecretVersionService_Undelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SecretVersionServiceServer).Undelete(ctx, req.(*UndeleteSecretVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SecretVersionService_ServiceDesc is the grpc.ServiceDesc for SecretVersionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SecretVersionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "nebius.mysterybox.v1.SecretVersionService",
	HandlerType: (*SecretVersionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _SecretVersionService_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _SecretVersionService_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _SecretVersionService_List_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SecretVersionService_Delete_Handler,
		},
		{
			MethodName: "Undelete",
			Handler:    _SecretVersionService_Undelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebius/mysterybox/v1/secret_version_service.proto",
}
