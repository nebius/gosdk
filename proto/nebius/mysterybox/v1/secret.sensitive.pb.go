// Code generated by protoc-gen-sensitive. DO NOT EDIT.

package v1

import (
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	slog "log/slog"
)

// Sanitize mutates [Secret] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *Secret) Sanitize() {
	if x == nil {
		return
	}
	x.Spec.Sanitize()
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [Secret].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *Secret
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [Secret], use the following code:
//
//	var original *Secret
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*Secret)
func (x *Secret) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*Secret) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperSecret)(c))
}

// wrapperSecret is used to return [Secret] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperSecret Secret

func (w *wrapperSecret) String() string {
	return (*Secret)(w).String()
}

func (*wrapperSecret) ProtoMessage() {}

func (w *wrapperSecret) ProtoReflect() protoreflect.Message {
	return (*Secret)(w).ProtoReflect()
}

// Sanitize mutates [SecretSpec] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *SecretSpec) Sanitize() {
	if x == nil {
		return
	}
	x.SecretVersion.Sanitize()
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [SecretSpec].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *SecretSpec
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [SecretSpec], use the following code:
//
//	var original *SecretSpec
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*SecretSpec)
func (x *SecretSpec) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*SecretSpec) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperSecretSpec)(c))
}

// wrapperSecretSpec is used to return [SecretSpec] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperSecretSpec SecretSpec

func (w *wrapperSecretSpec) String() string {
	return (*SecretSpec)(w).String()
}

func (*wrapperSecretSpec) ProtoMessage() {}

func (w *wrapperSecretSpec) ProtoReflect() protoreflect.Message {
	return (*SecretSpec)(w).ProtoReflect()
}

// func (x *SecretStatus) Sanitize()            // is not generated as no sensitive fields found
// func (x *SecretStatus) LogValue() slog.Value // is not generated as no sensitive fields found
