// Code generated by protoc-gen-sensitive. DO NOT EDIT.

package v1

import (
	proto "google.golang.org/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	slog "log/slog"
)

// func (x *GetPayloadRequest) Sanitize()            // is not generated as no sensitive fields found
// func (x *GetPayloadRequest) LogValue() slog.Value // is not generated as no sensitive fields found

// func (x *GetPayloadByKeyRequest) Sanitize()            // is not generated as no sensitive fields found
// func (x *GetPayloadByKeyRequest) LogValue() slog.Value // is not generated as no sensitive fields found

// Sanitize mutates [SecretPayload] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *SecretPayload) Sanitize() {
	if x == nil {
		return
	}
	for _, y := range x.Data {
		y.Sanitize()
	}
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [SecretPayload].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *SecretPayload
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [SecretPayload], use the following code:
//
//	var original *SecretPayload
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*SecretPayload)
func (x *SecretPayload) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*SecretPayload) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperSecretPayload)(c))
}

// wrapperSecretPayload is used to return [SecretPayload] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperSecretPayload SecretPayload

func (w *wrapperSecretPayload) String() string {
	return (*SecretPayload)(w).String()
}

func (*wrapperSecretPayload) ProtoMessage() {}

func (w *wrapperSecretPayload) ProtoReflect() protoreflect.Message {
	return (*SecretPayload)(w).ProtoReflect()
}

// Sanitize mutates [SecretPayloadEntry] to remove/mask all sensitive values.
// Sensitive fields are marked with [(nebius.sensitive) = true].
func (x *SecretPayloadEntry) Sanitize() {
	if x == nil {
		return
	}
	x.Data.Sanitize()
}

// LogValue implements [slog.LogValuer] interface. It returns sanitized copy of [SecretPayloadEntry].
// Properly implemented [slog.Handler] must call LogValue, so sensitive values are not logged.
// Sensitive strings and bytes are masked with "**HIDDEN**", other sensitive fields are omitted.
//
// Returning value has kind [slog.KindAny]. To extract [proto.Message], use the following code:
//
//	var original *SecretPayloadEntry
//	sanitized := original.LogValue().Any().(proto.Message)
//
// If you need to extract [SecretPayloadEntry], use the following code:
//
//	var original *SecretPayloadEntry
//	sanitized := original.LogValue().Any().(proto.Message).ProtoReflect().Interface().(*SecretPayloadEntry)
func (x *SecretPayloadEntry) LogValue() slog.Value {
	if x == nil {
		return slog.AnyValue(x)
	}
	c := proto.Clone(x).(*SecretPayloadEntry) // TODO: generate static cloner without protoreflect
	c.Sanitize()
	return slog.AnyValue((*wrapperSecretPayloadEntry)(c))
}

// wrapperSecretPayloadEntry is used to return [SecretPayloadEntry] not implementing [slog.LogValuer] to avoid recursion while resolving.
type wrapperSecretPayloadEntry SecretPayloadEntry

func (w *wrapperSecretPayloadEntry) String() string {
	return (*SecretPayloadEntry)(w).String()
}

func (*wrapperSecretPayloadEntry) ProtoMessage() {}

func (w *wrapperSecretPayloadEntry) ProtoReflect() protoreflect.Message {
	return (*SecretPayloadEntry)(w).ProtoReflect()
}
