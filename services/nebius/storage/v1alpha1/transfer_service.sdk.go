// Code generated by protoc-gen-gosdk. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	conn "github.com/nebius/gosdk/conn"
	iface "github.com/nebius/gosdk/internal/iface"
	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	grpcheader "github.com/nebius/gosdk/proto/fieldmask/grpcheader"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v1alpha1 "github.com/nebius/gosdk/proto/nebius/storage/v1alpha1"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
)

func init() {
	conn.ConventionResolverServiceIDToNameMap[TransferServiceID] = "transfer.storage"
}

func (s Services) Transfer() TransferService {
	return NewTransferService(s.sdk)
}

const TransferServiceID conn.ServiceID = "nebius.storage.v1alpha1.TransferService"

type TransferService interface {
	Get(context.Context, *v1alpha1.GetTransferRequest, ...grpc.CallOption) (*v1alpha1.Transfer, error)
	GetByName(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v1alpha1.Transfer, error)
	List(context.Context, *v1alpha1.ListTransfersRequest, ...grpc.CallOption) (*v1alpha1.ListTransfersResponse, error)
	Filter(context.Context, *v1alpha1.ListTransfersRequest, ...grpc.CallOption) iter.Seq2[*v1alpha1.Transfer, error]
	Create(context.Context, *v1alpha1.CreateTransferRequest, ...grpc.CallOption) (operations.Operation, error)
	Update(context.Context, *v1alpha1.UpdateTransferRequest, ...grpc.CallOption) (operations.Operation, error)
	Stop(context.Context, *v1alpha1.StopTransferRequest, ...grpc.CallOption) (operations.Operation, error)
	Resume(context.Context, *v1alpha1.ResumeTransferRequest, ...grpc.CallOption) (operations.Operation, error)
	Delete(context.Context, *v1alpha1.DeleteTransferRequest, ...grpc.CallOption) (operations.Operation, error)
	GetIterationHistory(context.Context, *v1alpha1.GetIterationHistoryRequest, ...grpc.CallOption) (*v1alpha1.GetIterationHistoryResponse, error)
	GetOperation(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)
	ListOperations(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)
}

type transferService struct {
	sdk iface.SDK
}

func NewTransferService(sdk iface.SDK) TransferService {
	return transferService{
		sdk: sdk,
	}
}

func (s transferService) Get(ctx context.Context, request *v1alpha1.GetTransferRequest, opts ...grpc.CallOption) (*v1alpha1.Transfer, error) {
	address, err := s.sdk.Resolve(ctx, TransferServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1alpha1.NewTransferServiceClient(con).Get(ctx, request, opts...)
}

func (s transferService) GetByName(ctx context.Context, request *v1.GetByNameRequest, opts ...grpc.CallOption) (*v1alpha1.Transfer, error) {
	address, err := s.sdk.Resolve(ctx, TransferServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1alpha1.NewTransferServiceClient(con).GetByName(ctx, request, opts...)
}

func (s transferService) List(ctx context.Context, request *v1alpha1.ListTransfersRequest, opts ...grpc.CallOption) (*v1alpha1.ListTransfersResponse, error) {
	address, err := s.sdk.Resolve(ctx, TransferServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1alpha1.NewTransferServiceClient(con).List(ctx, request, opts...)
}

func (s transferService) Filter(ctx context.Context, request *v1alpha1.ListTransfersRequest, opts ...grpc.CallOption) iter.Seq2[*v1alpha1.Transfer, error] {
	req := proto.Clone(request).(*v1alpha1.ListTransfersRequest)
	return func(yield func(*v1alpha1.Transfer, error) bool) {
		for {
			res, err := s.List(ctx, req, opts...)
			if err != nil {
				yield(nil, err)
				return
			}

			for _, item := range res.GetItems() {
				if !yield(item, nil) {
					return
				}
			}

			if res.GetNextPageToken() == "" {
				return
			}

			req.PageToken = res.GetNextPageToken()
		}
	}
}

func (s transferService) Create(ctx context.Context, request *v1alpha1.CreateTransferRequest, opts ...grpc.CallOption) (operations.Operation, error) {
	address, err := s.sdk.Resolve(ctx, TransferServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v1alpha1.NewTransferServiceClient(con).Create(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v1.NewOperationServiceClient(con))
}

func (s transferService) Update(ctx context.Context, request *v1alpha1.UpdateTransferRequest, opts ...grpc.CallOption) (operations.Operation, error) {
	ctx, err := grpcheader.EnsureMessageResetMaskInOutgoingContext(ctx, request)
	if err != nil {
		return nil, err
	}
	address, err := s.sdk.Resolve(ctx, TransferServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v1alpha1.NewTransferServiceClient(con).Update(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v1.NewOperationServiceClient(con))
}

func (s transferService) Stop(ctx context.Context, request *v1alpha1.StopTransferRequest, opts ...grpc.CallOption) (operations.Operation, error) {
	address, err := s.sdk.Resolve(ctx, TransferServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v1alpha1.NewTransferServiceClient(con).Stop(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v1.NewOperationServiceClient(con))
}

func (s transferService) Resume(ctx context.Context, request *v1alpha1.ResumeTransferRequest, opts ...grpc.CallOption) (operations.Operation, error) {
	address, err := s.sdk.Resolve(ctx, TransferServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v1alpha1.NewTransferServiceClient(con).Resume(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v1.NewOperationServiceClient(con))
}

func (s transferService) Delete(ctx context.Context, request *v1alpha1.DeleteTransferRequest, opts ...grpc.CallOption) (operations.Operation, error) {
	address, err := s.sdk.Resolve(ctx, TransferServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v1alpha1.NewTransferServiceClient(con).Delete(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v1.NewOperationServiceClient(con))
}

func (s transferService) GetIterationHistory(ctx context.Context, request *v1alpha1.GetIterationHistoryRequest, opts ...grpc.CallOption) (*v1alpha1.GetIterationHistoryResponse, error) {
	address, err := s.sdk.Resolve(ctx, TransferServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1alpha1.NewTransferServiceClient(con).GetIterationHistory(ctx, request, opts...)
}

func (s transferService) GetOperation(ctx context.Context, request *v1.GetOperationRequest, opts ...grpc.CallOption) (operations.Operation, error) {
	address, err := s.sdk.Resolve(ctx, TransferServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	client := v1.NewOperationServiceClient(con)
	op, err := client.Get(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, client)
}

func (s transferService) ListOperations(ctx context.Context, request *v1.ListOperationsRequest, opts ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	address, err := s.sdk.Resolve(ctx, TransferServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1.NewOperationServiceClient(con).List(ctx, request, opts...)
}
