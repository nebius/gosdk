// Code generated by protoc-gen-gosdk. DO NOT EDIT.

package v1

import (
	context "context"
	conn "github.com/nebius/gosdk/conn"
	iface "github.com/nebius/gosdk/internal/iface"
	v1 "github.com/nebius/gosdk/proto/nebius/mysterybox/v1"
	grpc "google.golang.org/grpc"
)

func init() {
	conn.ConventionResolverServiceIDToNameMap[PayloadServiceID] = "dpl.mysterybox"
}

func (s Services) Payload() PayloadService {
	return NewPayloadService(s.sdk)
}

const PayloadServiceID conn.ServiceID = "nebius.mysterybox.v1.PayloadService"

type PayloadService interface {
	Get(context.Context, *v1.GetPayloadRequest, ...grpc.CallOption) (*v1.SecretPayload, error)
	GetByKey(context.Context, *v1.GetPayloadByKeyRequest, ...grpc.CallOption) (*v1.SecretPayloadEntry, error)
}

type payloadService struct {
	sdk iface.SDK
}

func NewPayloadService(sdk iface.SDK) PayloadService {
	return payloadService{
		sdk: sdk,
	}
}

func (s payloadService) Get(ctx context.Context, request *v1.GetPayloadRequest, opts ...grpc.CallOption) (*v1.SecretPayload, error) {
	address, err := s.sdk.Resolve(ctx, PayloadServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1.NewPayloadServiceClient(con).Get(ctx, request, opts...)
}

func (s payloadService) GetByKey(ctx context.Context, request *v1.GetPayloadByKeyRequest, opts ...grpc.CallOption) (*v1.SecretPayloadEntry, error) {
	address, err := s.sdk.Resolve(ctx, PayloadServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1.NewPayloadServiceClient(con).GetByKey(ctx, request, opts...)
}
