// Code generated by protoc-gen-gosdk. DO NOT EDIT.

package v1

import (
	context "context"
	conn "github.com/nebius/gosdk/conn"
	iface "github.com/nebius/gosdk/internal/iface"
	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	grpcheader "github.com/nebius/gosdk/proto/fieldmask/grpcheader"
	v11 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v1 "github.com/nebius/gosdk/proto/nebius/iam/v1"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
)

func init() {
	conn.ConventionResolverServiceIDToNameMap[FederatedCredentialsServiceID] = "cpl.iam"
}

func (s Services) FederatedCredentials() FederatedCredentialsService {
	return NewFederatedCredentialsService(s.sdk)
}

const FederatedCredentialsServiceID conn.ServiceID = "nebius.iam.v1.FederatedCredentialsService"

type FederatedCredentialsService interface {
	Get(context.Context, *v1.GetFederatedCredentialsRequest, ...grpc.CallOption) (*v1.FederatedCredentials, error)
	GetByName(context.Context, *v1.GetByNameFederatedCredentialsRequest, ...grpc.CallOption) (*v1.FederatedCredentials, error)
	List(context.Context, *v1.ListFederatedCredentialsRequest, ...grpc.CallOption) (*v1.ListFederatedCredentialsResponse, error)
	Filter(context.Context, *v1.ListFederatedCredentialsRequest, ...grpc.CallOption) iter.Seq2[*v1.FederatedCredentials, error]
	Create(context.Context, *v1.CreateFederatedCredentialsRequest, ...grpc.CallOption) (operations.Operation, error)
	Update(context.Context, *v1.UpdateFederatedCredentialsRequest, ...grpc.CallOption) (operations.Operation, error)
	Delete(context.Context, *v1.DeleteFederatedCredentialsRequest, ...grpc.CallOption) (operations.Operation, error)
	GetOperation(context.Context, *v11.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)
	ListOperations(context.Context, *v11.ListOperationsRequest, ...grpc.CallOption) (*v11.ListOperationsResponse, error)
}

type federatedCredentialsService struct {
	sdk iface.SDK
}

func NewFederatedCredentialsService(sdk iface.SDK) FederatedCredentialsService {
	return federatedCredentialsService{
		sdk: sdk,
	}
}

func (s federatedCredentialsService) Get(ctx context.Context, request *v1.GetFederatedCredentialsRequest, opts ...grpc.CallOption) (*v1.FederatedCredentials, error) {
	address, err := s.sdk.Resolve(ctx, FederatedCredentialsServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1.NewFederatedCredentialsServiceClient(con).Get(ctx, request, opts...)
}

func (s federatedCredentialsService) GetByName(ctx context.Context, request *v1.GetByNameFederatedCredentialsRequest, opts ...grpc.CallOption) (*v1.FederatedCredentials, error) {
	address, err := s.sdk.Resolve(ctx, FederatedCredentialsServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1.NewFederatedCredentialsServiceClient(con).GetByName(ctx, request, opts...)
}

func (s federatedCredentialsService) List(ctx context.Context, request *v1.ListFederatedCredentialsRequest, opts ...grpc.CallOption) (*v1.ListFederatedCredentialsResponse, error) {
	address, err := s.sdk.Resolve(ctx, FederatedCredentialsServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1.NewFederatedCredentialsServiceClient(con).List(ctx, request, opts...)
}

func (s federatedCredentialsService) Filter(ctx context.Context, request *v1.ListFederatedCredentialsRequest, opts ...grpc.CallOption) iter.Seq2[*v1.FederatedCredentials, error] {
	req := proto.Clone(request).(*v1.ListFederatedCredentialsRequest)
	return func(yield func(*v1.FederatedCredentials, error) bool) {
		for {
			res, err := s.List(ctx, req, opts...)
			if err != nil {
				yield(nil, err)
				return
			}

			for _, item := range res.GetItems() {
				if !yield(item, nil) {
					return
				}
			}

			if res.GetNextPageToken() == "" {
				return
			}

			req.PageToken = res.GetNextPageToken()
		}
	}
}

func (s federatedCredentialsService) Create(ctx context.Context, request *v1.CreateFederatedCredentialsRequest, opts ...grpc.CallOption) (operations.Operation, error) {
	address, err := s.sdk.Resolve(ctx, FederatedCredentialsServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v1.NewFederatedCredentialsServiceClient(con).Create(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v11.NewOperationServiceClient(con))
}

func (s federatedCredentialsService) Update(ctx context.Context, request *v1.UpdateFederatedCredentialsRequest, opts ...grpc.CallOption) (operations.Operation, error) {
	ctx, err := grpcheader.EnsureMessageResetMaskInOutgoingContext(ctx, request)
	if err != nil {
		return nil, err
	}
	address, err := s.sdk.Resolve(ctx, FederatedCredentialsServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v1.NewFederatedCredentialsServiceClient(con).Update(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v11.NewOperationServiceClient(con))
}

func (s federatedCredentialsService) Delete(ctx context.Context, request *v1.DeleteFederatedCredentialsRequest, opts ...grpc.CallOption) (operations.Operation, error) {
	address, err := s.sdk.Resolve(ctx, FederatedCredentialsServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v1.NewFederatedCredentialsServiceClient(con).Delete(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v11.NewOperationServiceClient(con))
}

func (s federatedCredentialsService) GetOperation(ctx context.Context, request *v11.GetOperationRequest, opts ...grpc.CallOption) (operations.Operation, error) {
	address, err := s.sdk.Resolve(ctx, FederatedCredentialsServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	client := v11.NewOperationServiceClient(con)
	op, err := client.Get(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, client)
}

func (s federatedCredentialsService) ListOperations(ctx context.Context, request *v11.ListOperationsRequest, opts ...grpc.CallOption) (*v11.ListOperationsResponse, error) {
	address, err := s.sdk.Resolve(ctx, FederatedCredentialsServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v11.NewOperationServiceClient(con).List(ctx, request, opts...)
}
