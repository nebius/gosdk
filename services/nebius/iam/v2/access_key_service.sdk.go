// Code generated by protoc-gen-gosdk. DO NOT EDIT.

package v2

import (
	context "context"
	conn "github.com/nebius/gosdk/conn"
	iface "github.com/nebius/gosdk/internal/iface"
	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	grpcheader "github.com/nebius/gosdk/proto/fieldmask/grpcheader"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v2 "github.com/nebius/gosdk/proto/nebius/iam/v2"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
)

func init() {
	conn.ConventionResolverServiceIDToNameMap[AccessKeyServiceID] = "cpl.iam"
}

func (s Services) AccessKey() AccessKeyService {
	return NewAccessKeyService(s.sdk)
}

const AccessKeyServiceID conn.ServiceID = "nebius.iam.v2.AccessKeyService"

type AccessKeyService interface {
	Create(context.Context, *v2.CreateAccessKeyRequest, ...grpc.CallOption) (operations.Operation, error)
	Get(context.Context, *v2.GetAccessKeyRequest, ...grpc.CallOption) (*v2.AccessKey, error)
	GetSecret(context.Context, *v2.GetAccessKeySecretRequest, ...grpc.CallOption) (*v2.GetAccessKeySecretResponse, error)
	List(context.Context, *v2.ListAccessKeysRequest, ...grpc.CallOption) (*v2.ListAccessKeysResponse, error)
	Filter(context.Context, *v2.ListAccessKeysRequest, ...grpc.CallOption) iter.Seq2[*v2.AccessKey, error]
	Update(context.Context, *v2.UpdateAccessKeyRequest, ...grpc.CallOption) (operations.Operation, error)
	Delete(context.Context, *v2.DeleteAccessKeyRequest, ...grpc.CallOption) (operations.Operation, error)
	Activate(context.Context, *v2.ActivateAccessKeyRequest, ...grpc.CallOption) (operations.Operation, error)
	Deactivate(context.Context, *v2.DeactivateAccessKeyRequest, ...grpc.CallOption) (operations.Operation, error)
	ListByAccount(context.Context, *v2.ListAccessKeysByAccountRequest, ...grpc.CallOption) (*v2.ListAccessKeysResponse, error)
	GetByAwsId(context.Context, *v2.GetAccessKeyByAwsIdRequest, ...grpc.CallOption) (*v2.AccessKey, error)
	DeleteByAwsId(context.Context, *v2.DeleteAccessKeyByAwsIdRequest, ...grpc.CallOption) (operations.Operation, error)
	ActivateByAwsId(context.Context, *v2.ActivateAccessKeyByAwsIdRequest, ...grpc.CallOption) (operations.Operation, error)
	DeactivateByAwsId(context.Context, *v2.DeactivateAccessKeyByAwsIdRequest, ...grpc.CallOption) (operations.Operation, error)
	GetOperation(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)
	ListOperations(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)
}

type accessKeyService struct {
	sdk iface.SDKWithParentID
}

func NewAccessKeyService(sdk iface.SDK) AccessKeyService {
	return accessKeyService{
		sdk: iface.WrapSDK(sdk),
	}
}

func (s accessKeyService) Create(ctx context.Context, request *v2.CreateAccessKeyRequest, opts ...grpc.CallOption) (
	operations.Operation,
	error,
) {
	if request.GetMetadata().GetParentId() == "" {
		md := request.GetMetadata()
		if md == nil {
			md = &v1.ResourceMetadata{}
		}
		md.ParentId = s.sdk.ParentID()
		request.Metadata = md
	}
	address, err := s.sdk.Resolve(ctx, AccessKeyServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v2.NewAccessKeyServiceClient(con).Create(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v1.NewOperationServiceClient(con))
}

func (s accessKeyService) Get(ctx context.Context, request *v2.GetAccessKeyRequest, opts ...grpc.CallOption) (
	*v2.AccessKey,
	error,
) {
	address, err := s.sdk.Resolve(ctx, AccessKeyServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v2.NewAccessKeyServiceClient(con).Get(ctx, request, opts...)
}

func (s accessKeyService) GetSecret(ctx context.Context, request *v2.GetAccessKeySecretRequest, opts ...grpc.CallOption) (
	*v2.GetAccessKeySecretResponse,
	error,
) {
	address, err := s.sdk.Resolve(ctx, AccessKeyServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v2.NewAccessKeyServiceClient(con).GetSecret(ctx, request, opts...)
}

func (s accessKeyService) List(ctx context.Context, request *v2.ListAccessKeysRequest, opts ...grpc.CallOption) (
	*v2.ListAccessKeysResponse,
	error,
) {
	if request.GetParentId() == "" {
		request.ParentId = s.sdk.ParentID()
	}
	address, err := s.sdk.Resolve(ctx, AccessKeyServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v2.NewAccessKeyServiceClient(con).List(ctx, request, opts...)
}

func (s accessKeyService) Filter(ctx context.Context, request *v2.ListAccessKeysRequest, opts ...grpc.CallOption) iter.Seq2[*v2.AccessKey, error] {
	req := proto.Clone(request).(*v2.ListAccessKeysRequest)
	return func(yield func(*v2.AccessKey, error) bool) {
		for {
			res, err := s.List(ctx, req, opts...)
			if err != nil {
				yield(nil, err)
				return
			}

			for _, item := range res.GetItems() {
				if !yield(item, nil) {
					return
				}
			}

			if res.GetNextPageToken() == "" {
				return
			}

			req.PageToken = res.GetNextPageToken()
		}
	}
}

func (s accessKeyService) Update(ctx context.Context, request *v2.UpdateAccessKeyRequest, opts ...grpc.CallOption) (
	operations.Operation,
	error,
) {
	ctx, err := grpcheader.EnsureMessageResetMaskInOutgoingContext(ctx, request)
	if err != nil {
		return nil, err
	}
	address, err := s.sdk.Resolve(ctx, AccessKeyServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v2.NewAccessKeyServiceClient(con).Update(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v1.NewOperationServiceClient(con))
}

func (s accessKeyService) Delete(ctx context.Context, request *v2.DeleteAccessKeyRequest, opts ...grpc.CallOption) (
	operations.Operation,
	error,
) {
	address, err := s.sdk.Resolve(ctx, AccessKeyServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v2.NewAccessKeyServiceClient(con).Delete(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v1.NewOperationServiceClient(con))
}

func (s accessKeyService) Activate(ctx context.Context, request *v2.ActivateAccessKeyRequest, opts ...grpc.CallOption) (
	operations.Operation,
	error,
) {
	address, err := s.sdk.Resolve(ctx, AccessKeyServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v2.NewAccessKeyServiceClient(con).Activate(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v1.NewOperationServiceClient(con))
}

func (s accessKeyService) Deactivate(ctx context.Context, request *v2.DeactivateAccessKeyRequest, opts ...grpc.CallOption) (
	operations.Operation,
	error,
) {
	address, err := s.sdk.Resolve(ctx, AccessKeyServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v2.NewAccessKeyServiceClient(con).Deactivate(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v1.NewOperationServiceClient(con))
}

func (s accessKeyService) ListByAccount(ctx context.Context, request *v2.ListAccessKeysByAccountRequest, opts ...grpc.CallOption) (
	*v2.ListAccessKeysResponse,
	error,
) {
	address, err := s.sdk.Resolve(ctx, AccessKeyServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v2.NewAccessKeyServiceClient(con).ListByAccount(ctx, request, opts...)
}

func (s accessKeyService) GetByAwsId(ctx context.Context, request *v2.GetAccessKeyByAwsIdRequest, opts ...grpc.CallOption) (
	*v2.AccessKey,
	error,
) {
	address, err := s.sdk.Resolve(ctx, AccessKeyServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v2.NewAccessKeyServiceClient(con).GetByAwsId(ctx, request, opts...)
}

func (s accessKeyService) DeleteByAwsId(ctx context.Context, request *v2.DeleteAccessKeyByAwsIdRequest, opts ...grpc.CallOption) (
	operations.Operation,
	error,
) {
	address, err := s.sdk.Resolve(ctx, AccessKeyServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v2.NewAccessKeyServiceClient(con).DeleteByAwsId(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v1.NewOperationServiceClient(con))
}

func (s accessKeyService) ActivateByAwsId(ctx context.Context, request *v2.ActivateAccessKeyByAwsIdRequest, opts ...grpc.CallOption) (
	operations.Operation,
	error,
) {
	address, err := s.sdk.Resolve(ctx, AccessKeyServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v2.NewAccessKeyServiceClient(con).ActivateByAwsId(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v1.NewOperationServiceClient(con))
}

func (s accessKeyService) DeactivateByAwsId(ctx context.Context, request *v2.DeactivateAccessKeyByAwsIdRequest, opts ...grpc.CallOption) (
	operations.Operation,
	error,
) {
	address, err := s.sdk.Resolve(ctx, AccessKeyServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v2.NewAccessKeyServiceClient(con).DeactivateByAwsId(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v1.NewOperationServiceClient(con))
}

func (s accessKeyService) GetOperation(ctx context.Context, request *v1.GetOperationRequest, opts ...grpc.CallOption) (operations.Operation, error) {
	address, err := s.sdk.Resolve(ctx, AccessKeyServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	client := v1.NewOperationServiceClient(con)
	op, err := client.Get(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, client)
}

func (s accessKeyService) ListOperations(ctx context.Context, request *v1.ListOperationsRequest, opts ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	address, err := s.sdk.Resolve(ctx, AccessKeyServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1.NewOperationServiceClient(con).List(ctx, request, opts...)
}
