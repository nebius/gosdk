// Code generated by protoc-gen-gosdk. DO NOT EDIT.

package v1

import (
	context "context"
	conn "github.com/nebius/gosdk/conn"
	iface "github.com/nebius/gosdk/internal/iface"
	operations "github.com/nebius/gosdk/operations"
	grpcheader "github.com/nebius/gosdk/proto/fieldmask/grpcheader"
	v11 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v1 "github.com/nebius/gosdk/proto/nebius/vpc/v1"
	grpc "google.golang.org/grpc"
)

func init() {
	conn.ConventionResolverServiceIDToNameMap[TargetGroupServiceID] = "vpc"
}

func (s Services) TargetGroup() TargetGroupService {
	return NewTargetGroupService(s.sdk)
}

const TargetGroupServiceID conn.ServiceID = "nebius.vpc.v1.TargetGroupService"

type TargetGroupService interface {
	Get(context.Context, *v1.GetTargetGroupRequest, ...grpc.CallOption) (*v1.TargetGroup, error)
	Update(context.Context, *v1.UpdateTargetGroupRequest, ...grpc.CallOption) (operations.Operation, error)
	GetOperation(context.Context, *v11.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)
	ListOperations(context.Context, *v11.ListOperationsRequest, ...grpc.CallOption) (*v11.ListOperationsResponse, error)
}

type targetGroupService struct {
	sdk iface.SDKWithParentID
}

func NewTargetGroupService(sdk iface.SDK) TargetGroupService {
	return targetGroupService{
		sdk: iface.WrapSDK(sdk),
	}
}

func (s targetGroupService) Get(ctx context.Context, request *v1.GetTargetGroupRequest, opts ...grpc.CallOption) (
	*v1.TargetGroup,
	error,
) {
	address, err := s.sdk.Resolve(ctx, TargetGroupServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1.NewTargetGroupServiceClient(con).Get(ctx, request, opts...)
}

func (s targetGroupService) Update(ctx context.Context, request *v1.UpdateTargetGroupRequest, opts ...grpc.CallOption) (
	operations.Operation,
	error,
) {
	ctx, err := grpcheader.EnsureMessageResetMaskInOutgoingContext(ctx, request)
	if err != nil {
		return nil, err
	}
	address, err := s.sdk.Resolve(ctx, TargetGroupServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v1.NewTargetGroupServiceClient(con).Update(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v11.NewOperationServiceClient(con))
}

func (s targetGroupService) GetOperation(ctx context.Context, request *v11.GetOperationRequest, opts ...grpc.CallOption) (operations.Operation, error) {
	address, err := s.sdk.Resolve(ctx, TargetGroupServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	client := v11.NewOperationServiceClient(con)
	op, err := client.Get(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, client)
}

func (s targetGroupService) ListOperations(ctx context.Context, request *v11.ListOperationsRequest, opts ...grpc.CallOption) (*v11.ListOperationsResponse, error) {
	address, err := s.sdk.Resolve(ctx, TargetGroupServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v11.NewOperationServiceClient(con).List(ctx, request, opts...)
}
