// Code generated by protoc-gen-gosdk. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	conn "github.com/nebius/gosdk/conn"
	iface "github.com/nebius/gosdk/internal/iface"
	iter "github.com/nebius/gosdk/iter"
	operations "github.com/nebius/gosdk/operations"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v1alpha11 "github.com/nebius/gosdk/proto/nebius/msp/serverless/v1alpha1"
	v1alpha1 "github.com/nebius/gosdk/proto/nebius/msp/v1alpha1"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
)

func init() {
	conn.ConventionResolverServiceIDToNameMap[EndpointServiceID] = "apps.msp"
}

func (s Services) Endpoint() EndpointService {
	return NewEndpointService(s.sdk)
}

const EndpointServiceID conn.ServiceID = "nebius.msp.serverless.v1alpha1.EndpointService"

type EndpointService interface {
	Get(context.Context, *v1alpha1.GetRequest, ...grpc.CallOption) (*v1alpha11.Endpoint, error)
	GetByName(context.Context, *v1alpha1.GetByNameRequest, ...grpc.CallOption) (*v1alpha11.Endpoint, error)
	List(context.Context, *v1alpha1.ListRequest, ...grpc.CallOption) (*v1alpha11.ListEndpointsResponse, error)
	Filter(context.Context, *v1alpha1.ListRequest, ...grpc.CallOption) iter.Seq2[*v1alpha11.Endpoint, error]
	Create(context.Context, *v1alpha11.CreateEndpointRequest, ...grpc.CallOption) (operations.Operation, error)
	Delete(context.Context, *v1alpha1.DeleteRequest, ...grpc.CallOption) (operations.Operation, error)
	Start(context.Context, *v1alpha1.StartRequest, ...grpc.CallOption) (operations.Operation, error)
	Stop(context.Context, *v1alpha1.StopRequest, ...grpc.CallOption) (operations.Operation, error)
	GetOperation(context.Context, *v1.GetOperationRequest, ...grpc.CallOption) (operations.Operation, error)
	ListOperations(context.Context, *v1.ListOperationsRequest, ...grpc.CallOption) (*v1.ListOperationsResponse, error)
}

type endpointService struct {
	sdk iface.SDKWithParentID
}

func NewEndpointService(sdk iface.SDK) EndpointService {
	return endpointService{
		sdk: iface.WrapSDK(sdk),
	}
}

func (s endpointService) Get(ctx context.Context, request *v1alpha1.GetRequest, opts ...grpc.CallOption) (
	*v1alpha11.Endpoint,
	error,
) {
	address, err := s.sdk.Resolve(ctx, EndpointServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1alpha11.NewEndpointServiceClient(con).Get(ctx, request, opts...)
}

func (s endpointService) GetByName(ctx context.Context, request *v1alpha1.GetByNameRequest, opts ...grpc.CallOption) (
	*v1alpha11.Endpoint,
	error,
) {
	if request.GetParentId() == "" {
		request.ParentId = s.sdk.ParentID()
	}
	address, err := s.sdk.Resolve(ctx, EndpointServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1alpha11.NewEndpointServiceClient(con).GetByName(ctx, request, opts...)
}

func (s endpointService) List(ctx context.Context, request *v1alpha1.ListRequest, opts ...grpc.CallOption) (
	*v1alpha11.ListEndpointsResponse,
	error,
) {
	if request.GetParentId() == "" {
		request.ParentId = s.sdk.ParentID()
	}
	address, err := s.sdk.Resolve(ctx, EndpointServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1alpha11.NewEndpointServiceClient(con).List(ctx, request, opts...)
}

func (s endpointService) Filter(ctx context.Context, request *v1alpha1.ListRequest, opts ...grpc.CallOption) iter.Seq2[*v1alpha11.Endpoint, error] {
	req := proto.Clone(request).(*v1alpha1.ListRequest)
	return func(yield func(*v1alpha11.Endpoint, error) bool) {
		for {
			res, err := s.List(ctx, req, opts...)
			if err != nil {
				yield(nil, err)
				return
			}

			for _, item := range res.GetItems() {
				if !yield(item, nil) {
					return
				}
			}

			if res.GetNextPageToken() == "" {
				return
			}

			req.PageToken = res.GetNextPageToken()
		}
	}
}

func (s endpointService) Create(ctx context.Context, request *v1alpha11.CreateEndpointRequest, opts ...grpc.CallOption) (
	operations.Operation,
	error,
) {
	if request.GetMetadata().GetParentId() == "" {
		md := request.GetMetadata()
		if md == nil {
			md = &v1.ResourceMetadata{}
		}
		md.ParentId = s.sdk.ParentID()
		request.Metadata = md
	}
	address, err := s.sdk.Resolve(ctx, EndpointServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v1alpha11.NewEndpointServiceClient(con).Create(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v1.NewOperationServiceClient(con))
}

func (s endpointService) Delete(ctx context.Context, request *v1alpha1.DeleteRequest, opts ...grpc.CallOption) (
	operations.Operation,
	error,
) {
	address, err := s.sdk.Resolve(ctx, EndpointServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v1alpha11.NewEndpointServiceClient(con).Delete(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v1.NewOperationServiceClient(con))
}

func (s endpointService) Start(ctx context.Context, request *v1alpha1.StartRequest, opts ...grpc.CallOption) (
	operations.Operation,
	error,
) {
	address, err := s.sdk.Resolve(ctx, EndpointServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v1alpha11.NewEndpointServiceClient(con).Start(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v1.NewOperationServiceClient(con))
}

func (s endpointService) Stop(ctx context.Context, request *v1alpha1.StopRequest, opts ...grpc.CallOption) (
	operations.Operation,
	error,
) {
	address, err := s.sdk.Resolve(ctx, EndpointServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	op, err := v1alpha11.NewEndpointServiceClient(con).Stop(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, v1.NewOperationServiceClient(con))
}

func (s endpointService) GetOperation(ctx context.Context, request *v1.GetOperationRequest, opts ...grpc.CallOption) (operations.Operation, error) {
	address, err := s.sdk.Resolve(ctx, EndpointServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	client := v1.NewOperationServiceClient(con)
	op, err := client.Get(ctx, request, opts...)
	if err != nil {
		return nil, err
	}
	return operations.New(op, client)
}

func (s endpointService) ListOperations(ctx context.Context, request *v1.ListOperationsRequest, opts ...grpc.CallOption) (*v1.ListOperationsResponse, error) {
	address, err := s.sdk.Resolve(ctx, EndpointServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1.NewOperationServiceClient(con).List(ctx, request, opts...)
}
