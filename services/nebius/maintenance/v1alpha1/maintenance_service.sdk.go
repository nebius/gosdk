// Code generated by protoc-gen-gosdk. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	conn "github.com/nebius/gosdk/conn"
	iface "github.com/nebius/gosdk/internal/iface"
	grpcheader "github.com/nebius/gosdk/proto/fieldmask/grpcheader"
	v1alpha1 "github.com/nebius/gosdk/proto/nebius/maintenance/v1alpha1"
	grpc "google.golang.org/grpc"
)

func init() {
	conn.ConventionResolverServiceIDToNameMap[MaintenanceServiceID] = "maintenance.msp"
}

func (s Services) Maintenance() MaintenanceService {
	return NewMaintenanceService(s.sdk)
}

const MaintenanceServiceID conn.ServiceID = "nebius.maintenance.v1alpha1.MaintenanceService"

type MaintenanceService interface {
	Get(context.Context, *v1alpha1.GetMaintenanceRequest, ...grpc.CallOption) (*v1alpha1.Maintenance, error)
	List(context.Context, *v1alpha1.ListMaintenancesRequest, ...grpc.CallOption) (*v1alpha1.ListMaintenancesResponse, error)
	Update(context.Context, *v1alpha1.UpdateMaintenanceRequest, ...grpc.CallOption) (*v1alpha1.UpdateMaintenanceResponse, error)
}

type maintenanceService struct {
	sdk iface.SDKWithParentID
}

func NewMaintenanceService(sdk iface.SDK) MaintenanceService {
	return maintenanceService{
		sdk: iface.WrapSDK(sdk),
	}
}

func (s maintenanceService) Get(ctx context.Context, request *v1alpha1.GetMaintenanceRequest, opts ...grpc.CallOption) (
	*v1alpha1.Maintenance,
	error,
) {
	address, err := s.sdk.Resolve(ctx, MaintenanceServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1alpha1.NewMaintenanceServiceClient(con).Get(ctx, request, opts...)
}

func (s maintenanceService) List(ctx context.Context, request *v1alpha1.ListMaintenancesRequest, opts ...grpc.CallOption) (
	*v1alpha1.ListMaintenancesResponse,
	error,
) {
	if request.GetParentId() == "" {
		request.ParentId = s.sdk.ParentID()
	}
	address, err := s.sdk.Resolve(ctx, MaintenanceServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1alpha1.NewMaintenanceServiceClient(con).List(ctx, request, opts...)
}

func (s maintenanceService) Update(ctx context.Context, request *v1alpha1.UpdateMaintenanceRequest, opts ...grpc.CallOption) (
	*v1alpha1.UpdateMaintenanceResponse,
	error,
) {
	ctx, err := grpcheader.EnsureMessageResetMaskInOutgoingContext(ctx, request)
	if err != nil {
		return nil, err
	}
	address, err := s.sdk.Resolve(ctx, MaintenanceServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1alpha1.NewMaintenanceServiceClient(con).Update(ctx, request, opts...)
}
