// Code generated by protoc-gen-gosdk. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	conn "github.com/nebius/gosdk/conn"
	iface "github.com/nebius/gosdk/internal/iface"
	v1alpha1 "github.com/nebius/gosdk/proto/nebius/billing/v1alpha1"
	grpc "google.golang.org/grpc"
)

func init() {
	conn.ConventionResolverServiceIDToNameMap[CalculatorServiceID] = "api.calculator.billing-data-plane"
}

func (s Services) Calculator() CalculatorService {
	return NewCalculatorService(s.sdk)
}

const CalculatorServiceID conn.ServiceID = "nebius.billing.v1alpha1.CalculatorService"

type CalculatorService interface {
	Estimate(context.Context, *v1alpha1.EstimateRequest, ...grpc.CallOption) (*v1alpha1.EstimateResponse, error)
	EstimateBatch(context.Context, *v1alpha1.EstimateBatchRequest, ...grpc.CallOption) (*v1alpha1.EstimateBatchResponse, error)
}

type calculatorService struct {
	sdk iface.SDK
}

func NewCalculatorService(sdk iface.SDK) CalculatorService {
	return calculatorService{
		sdk: sdk,
	}
}

func (s calculatorService) Estimate(ctx context.Context, request *v1alpha1.EstimateRequest, opts ...grpc.CallOption) (*v1alpha1.EstimateResponse, error) {
	address, err := s.sdk.Resolve(ctx, CalculatorServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1alpha1.NewCalculatorServiceClient(con).Estimate(ctx, request, opts...)
}

func (s calculatorService) EstimateBatch(ctx context.Context, request *v1alpha1.EstimateBatchRequest, opts ...grpc.CallOption) (*v1alpha1.EstimateBatchResponse, error) {
	address, err := s.sdk.Resolve(ctx, CalculatorServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1alpha1.NewCalculatorServiceClient(con).EstimateBatch(ctx, request, opts...)
}
