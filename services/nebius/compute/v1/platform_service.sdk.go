// Code generated by protoc-gen-gosdk. DO NOT EDIT.

package v1

import (
	context "context"
	conn "github.com/nebius/gosdk/conn"
	iface "github.com/nebius/gosdk/internal/iface"
	iter "github.com/nebius/gosdk/iter"
	v1 "github.com/nebius/gosdk/proto/nebius/common/v1"
	v11 "github.com/nebius/gosdk/proto/nebius/compute/v1"
	grpc "google.golang.org/grpc"
	proto "google.golang.org/protobuf/proto"
)

func (s Services) Platform() PlatformService {
	return NewPlatformService(s.sdk)
}

const PlatformServiceID conn.ServiceID = "nebius.compute.v1.PlatformService"

type PlatformService interface {
	GetByName(context.Context, *v1.GetByNameRequest, ...grpc.CallOption) (*v11.Platform, error)
	List(context.Context, *v11.ListPlatformsRequest, ...grpc.CallOption) (*v11.ListPlatformsResponse, error)
	Filter(context.Context, *v11.ListPlatformsRequest, ...grpc.CallOption) iter.Seq2[*v11.Platform, error]
}

type platformService struct {
	sdk iface.SDK
}

func NewPlatformService(sdk iface.SDK) PlatformService {
	return platformService{
		sdk: sdk,
	}
}

func (s platformService) GetByName(ctx context.Context, request *v1.GetByNameRequest, opts ...grpc.CallOption) (*v11.Platform, error) {
	address, err := s.sdk.Resolve(ctx, PlatformServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v11.NewPlatformServiceClient(con).GetByName(ctx, request, opts...)
}

func (s platformService) List(ctx context.Context, request *v11.ListPlatformsRequest, opts ...grpc.CallOption) (*v11.ListPlatformsResponse, error) {
	address, err := s.sdk.Resolve(ctx, PlatformServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v11.NewPlatformServiceClient(con).List(ctx, request, opts...)
}

func (s platformService) Filter(ctx context.Context, request *v11.ListPlatformsRequest, opts ...grpc.CallOption) iter.Seq2[*v11.Platform, error] {
	req := proto.Clone(request).(*v11.ListPlatformsRequest)
	return func(yield func(*v11.Platform, error) bool) {
		for {
			res, err := s.List(ctx, req, opts...)
			if err != nil {
				yield(nil, err)
				return
			}

			for _, item := range res.GetItems() {
				if !yield(item, nil) {
					return
				}
			}

			if res.GetNextPageToken() == "" {
				return
			}

			req.PageToken = res.GetNextPageToken()
		}
	}
}
