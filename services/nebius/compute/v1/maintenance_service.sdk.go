// Code generated by protoc-gen-gosdk. DO NOT EDIT.

package v1

import (
	context "context"
	conn "github.com/nebius/gosdk/conn"
	iface "github.com/nebius/gosdk/internal/iface"
	v1 "github.com/nebius/gosdk/proto/nebius/compute/v1"
	grpc "google.golang.org/grpc"
)

func init() {
	conn.ConventionResolverServiceIDToNameMap[MaintenanceServiceID] = "compute"
}

func (s Services) Maintenance() MaintenanceService {
	return NewMaintenanceService(s.sdk)
}

const MaintenanceServiceID conn.ServiceID = "nebius.compute.v1.MaintenanceService"

type MaintenanceService interface {
	GetByInstance(context.Context, *v1.GetMaintenanceEventByInstanceRequest, ...grpc.CallOption) (*v1.MaintenanceEvent, error)
	ListActive(context.Context, *v1.ListMaintenanceEventsRequest, ...grpc.CallOption) (*v1.ListMaintenanceEventsResponse, error)
}

type maintenanceService struct {
	sdk iface.SDKWithParentID
}

func NewMaintenanceService(sdk iface.SDK) MaintenanceService {
	return maintenanceService{
		sdk: iface.WrapSDK(sdk),
	}
}

func (s maintenanceService) GetByInstance(ctx context.Context, request *v1.GetMaintenanceEventByInstanceRequest, opts ...grpc.CallOption) (
	*v1.MaintenanceEvent,
	error,
) {
	address, err := s.sdk.Resolve(ctx, MaintenanceServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1.NewMaintenanceServiceClient(con).GetByInstance(ctx, request, opts...)
}

func (s maintenanceService) ListActive(ctx context.Context, request *v1.ListMaintenanceEventsRequest, opts ...grpc.CallOption) (
	*v1.ListMaintenanceEventsResponse,
	error,
) {
	address, err := s.sdk.Resolve(ctx, MaintenanceServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1.NewMaintenanceServiceClient(con).ListActive(ctx, request, opts...)
}
