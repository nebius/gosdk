// Code generated by protoc-gen-gosdk. DO NOT EDIT.

package v1

import (
	context "context"
	conn "github.com/nebius/gosdk/conn"
	iface "github.com/nebius/gosdk/internal/iface"
	v1 "github.com/nebius/gosdk/proto/nebius/compute/v1"
	grpc "google.golang.org/grpc"
)

func init() {
	conn.ConventionResolverServiceIDToNameMap[NodeServiceID] = "compute"
}

func (s Services) Node() NodeService {
	return NewNodeService(s.sdk)
}

const NodeServiceID conn.ServiceID = "nebius.compute.v1.NodeService"

type NodeService interface {
	SetUnhealthy(context.Context, *v1.NodeSetUnhealthyRequest, ...grpc.CallOption) (*v1.NodeSetUnhealthyResponse, error)
}

type nodeService struct {
	sdk iface.SDKWithParentID
}

func NewNodeService(sdk iface.SDK) NodeService {
	return nodeService{
		sdk: iface.WrapSDK(sdk),
	}
}

func (s nodeService) SetUnhealthy(ctx context.Context, request *v1.NodeSetUnhealthyRequest, opts ...grpc.CallOption) (
	*v1.NodeSetUnhealthyResponse,
	error,
) {
	address, err := s.sdk.Resolve(ctx, NodeServiceID)
	if err != nil {
		return nil, err
	}
	con, err := s.sdk.Dial(ctx, address)
	if err != nil {
		return nil, err
	}
	return v1.NewNodeServiceClient(con).SetUnhealthy(ctx, request, opts...)
}
